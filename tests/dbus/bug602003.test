Packages: gio-2.0
D-Bus

Program: client

[DBus (name = "org.example.Test")]
interface Test : Object {
	public abstract Variant test_string () throws IOError;
}

void main () {
	// client
	Test test = Bus.get_proxy_sync (BusType.SESSION, "org.example.Test", "/org/example/test");

	Variant v = test.test_string ();
	string[] s = (string[]) v;
	assert (s.length == 1 && s[0] == "hello");
}

Program: server

[DBus (name = "org.example.Test")]
class Test : Object {
	public Variant test_string () {
		string[] s = { "hello" };
		return s;
	}
}

Application app;

void client_exit (Pid pid, int status) {
	// client finished, terminate server
	assert (status == 0);
	app.quit ();
}

void main () {
	var conn = Bus.get_sync (BusType.SESSION);
	conn.register_object ("/org/example/test", new Test ());

	// try to register service in session bus
	app = new Application ("org.example.Test");

	// server ready, spawn client
	Pid client_pid;
	Process.spawn_async (null, { "test", "/dbus/bug602003/client" }, null, SpawnFlags.DO_NOT_REAP_CHILD, null, out client_pid);
	ChildWatch.add (client_pid, client_exit);

	app.run ();
}
