Packages: gio-2.0
D-Bus

Program: client

[DBus (name = "org.example.Test")]
interface Test : Object {
	public signal void foo (int i);

	public abstract void do_foo (int i) throws IOError;
}

MainLoop main_loop;

void main () {
	// client
	Test test = Bus.get_proxy_sync (BusType.SESSION, "org.example.Test", "/org/example/test");

	test.foo.connect ((i) => {
		assert (i == 42);
		main_loop.quit ();
	});

	test.do_foo (42);

	main_loop = new MainLoop ();
	main_loop.run ();
}

Program: server

[DBus (name = "org.example.Test")]
class Test : Object {
	public signal void foo (int i);

	public void do_foo (int i) {
		this.foo (i);
	}
}

Application app;

void client_exit (Pid pid, int status) {
	// client finished, terminate server
	assert (status == 0);
	app.quit ();
}

void main () {
	var conn = Bus.get_sync (BusType.SESSION);
	conn.register_object ("/org/example/test", new Test ());

	// try to register service in session bus
	app = new Application ("org.example.Test");

	// server ready, spawn client
	Pid client_pid;
	Process.spawn_async (null, { "test", "/dbus/signals/client" }, null, SpawnFlags.DO_NOT_REAP_CHILD, null, out client_pid);
	ChildWatch.add (client_pid, client_exit);

	app.run ();
}
