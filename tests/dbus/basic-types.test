Packages: dbus-glib-1

Program: client

[DBus (name = "org.example.Test")]
interface Test : Object {
    public abstract int test_int (int i, out int j);
    public abstract string test_string (string s, out string t);
}

void main () {
	var conn = DBus.Bus.get (DBus.BusType.SESSION);

	// client       
	var test = (Test) conn.get_object ("org.example.Test", "/org/example/test");

	int j, k;
	k = test.test_int (42, out j);
	assert (j == 23);
	assert (k == 11);

	string t, u;
	u = test.test_string ("hello", out t);
	assert (t == "world");
	assert (u == "vala");
}

Program: server

[DBus (name = "org.example.Test")]
class Test : Object {
    public int test_int (int i, out int j) {
    	assert (i == 42);
    	j = 23;
    	return 11;
    }

    public string test_string (string s, out string t) {
    	assert (s == "hello");
    	t = "world";
    	return "vala";
    }
}

MainLoop main_loop;
int exit_status;

void client_exit (Pid pid, int status) {
	// client finished, terminate server
	if (status != 0) {
		exit_status = 1;
	}
	main_loop.quit ();
}

int main () {
	var conn = DBus.Bus.get (DBus.BusType.SESSION);
	dynamic DBus.Object bus = conn.get_object ("org.freedesktop.DBus", "/org/freedesktop/DBus", "org.freedesktop.DBus");

	// try to register service in session bus
	uint request_name_result = bus.request_name ("org.example.Test", (uint) 0);
	if (request_name_result == DBus.RequestNameReply.PRIMARY_OWNER) {
		// start server
		var server = new Test ();
		conn.register_object ("/org/example/test", server);

		// server ready, spawn client
		Pid client_pid;
		Process.spawn_async (null, { "client" }, null, SpawnFlags.DO_NOT_REAP_CHILD, null, out client_pid);
		ChildWatch.add (client_pid, client_exit);

		main_loop = new MainLoop (null, false);
		main_loop.run ();
	} else {
		exit_status = 1;
	}
	return exit_status;
}
