/* basic_types_arrays_move_with_class.c generated by valac, the Vala compiler
 * generated from basic_types_arrays_move_with_class.vala, do not modify */

#include <glib-object.h>
#include <glib.h>
#include <string.h>

#if !defined(VALA_EXTERN)
#if defined(_MSC_VER)
#define VALA_EXTERN __declspec(dllexport) extern
#elif __GNUC__ >= 4
#define VALA_EXTERN __attribute__((visibility("default"))) extern
#else
#define VALA_EXTERN extern
#endif
#endif

#define TYPE_FOO (foo_get_type ())
#define FOO(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), TYPE_FOO, Foo))
#define FOO_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), TYPE_FOO, FooClass))
#define IS_FOO(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), TYPE_FOO))
#define IS_FOO_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), TYPE_FOO))
#define FOO_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), TYPE_FOO, FooClass))

typedef struct _Foo Foo;
typedef struct _FooClass FooClass;
typedef struct _FooPrivate FooPrivate;
enum  {
	FOO_0_PROPERTY,
	FOO_NUM_PROPERTIES
};
static GParamSpec* foo_properties[FOO_NUM_PROPERTIES];
#define _g_object_unref0(var) ((var == NULL) ? NULL : (var = (g_object_unref (var), NULL)))
#define _vala_assert(expr, msg) if G_LIKELY (expr) ; else g_assertion_message_expr (G_LOG_DOMAIN, __FILE__, __LINE__, G_STRFUNC, msg);
#define _vala_return_if_fail(expr, msg) if G_LIKELY (expr) ; else { g_return_if_fail_warning (G_LOG_DOMAIN, G_STRFUNC, msg); return; }
#define _vala_return_val_if_fail(expr, msg, val) if G_LIKELY (expr) ; else { g_return_if_fail_warning (G_LOG_DOMAIN, G_STRFUNC, msg); return val; }
#define _vala_warn_if_fail(expr, msg) if G_LIKELY (expr) ; else g_warn_message (G_LOG_DOMAIN, __FILE__, __LINE__, G_STRFUNC, msg);

struct _Foo {
	GObject parent_instance;
	FooPrivate * priv;
};

struct _FooClass {
	GObjectClass parent_class;
};

static gpointer foo_parent_class = NULL;

VALA_EXTERN GType foo_get_type (void) G_GNUC_CONST ;
G_DEFINE_AUTOPTR_CLEANUP_FUNC (Foo, g_object_unref)
VALA_EXTERN Foo* foo_new (void);
VALA_EXTERN Foo* foo_construct (GType object_type);
static GType foo_get_type_once (void);
VALA_EXTERN void test_array_with_class_move (void);
VALA_EXTERN void test_unowned_array_with_class_move (void);
static void _vala_main (void);
static void _vala_array_destroy (gpointer array,
                          gssize array_length,
                          GDestroyNotify destroy_func);
static void _vala_array_free (gpointer array,
                       gssize array_length,
                       GDestroyNotify destroy_func);
static void _vala_array_move (gpointer array,
                       gsize element_size,
                       GDestroyNotify element_destroy_func,
                       gboolean is_pointer,
                       gssize src,
                       gssize dest,
                       gssize length);

Foo*
foo_construct (GType object_type)
{
	Foo * self = NULL;
	self = (Foo*) g_object_new (object_type, NULL);
	return self;
}

Foo*
foo_new (void)
{
	return foo_construct (TYPE_FOO);
}

static void
foo_class_init (FooClass * klass,
                gpointer klass_data)
{
	foo_parent_class = g_type_class_peek_parent (klass);
}

static void
foo_instance_init (Foo * self,
                   gpointer klass)
{
}

static GType
foo_get_type_once (void)
{
	static const GTypeInfo g_define_type_info = { sizeof (FooClass), (GBaseInitFunc) NULL, (GBaseFinalizeFunc) NULL, (GClassInitFunc) foo_class_init, (GClassFinalizeFunc) NULL, NULL, sizeof (Foo), 0, (GInstanceInitFunc) foo_instance_init, NULL };
	GType foo_type_id;
	foo_type_id = g_type_register_static (G_TYPE_OBJECT, "Foo", &g_define_type_info, 0);
	return foo_type_id;
}

GType
foo_get_type (void)
{
	static volatile gsize foo_type_id__once = 0;
	if (g_once_init_enter (&foo_type_id__once)) {
		GType foo_type_id;
		foo_type_id = foo_get_type_once ();
		g_once_init_leave (&foo_type_id__once, foo_type_id);
	}
	return foo_type_id__once;
}

static gpointer
_g_object_ref0 (gpointer self)
{
	return self ? g_object_ref (self) : NULL;
}

void
test_array_with_class_move (void)
{
	Foo* foo = NULL;
	Foo* _tmp0_;
	Foo** a = NULL;
	Foo* _tmp1_;
	Foo* _tmp2_;
	Foo* _tmp3_;
	Foo* _tmp4_;
	Foo* _tmp5_;
	Foo* _tmp6_;
	Foo* _tmp7_;
	Foo* _tmp8_;
	Foo* _tmp9_;
	Foo** _tmp10_;
	gint a_length1;
	gint _a_size_;
	_tmp0_ = foo_new ();
	foo = _tmp0_;
	_vala_assert (G_TYPE_CHECK_INSTANCE_CAST (foo, G_TYPE_OBJECT, GObject)->ref_count == ((guint) 1), "foo.ref_count == 1");
	_tmp1_ = _g_object_ref0 (foo);
	_tmp2_ = _g_object_ref0 (foo);
	_tmp3_ = _g_object_ref0 (foo);
	_tmp4_ = _g_object_ref0 (foo);
	_tmp5_ = _g_object_ref0 (foo);
	_tmp6_ = _g_object_ref0 (foo);
	_tmp7_ = _g_object_ref0 (foo);
	_tmp8_ = _g_object_ref0 (foo);
	_tmp9_ = _g_object_ref0 (foo);
	_tmp10_ = g_new0 (Foo*, 9 + 1);
	_tmp10_[0] = _tmp1_;
	_tmp10_[1] = _tmp2_;
	_tmp10_[2] = _tmp3_;
	_tmp10_[3] = _tmp4_;
	_tmp10_[4] = _tmp5_;
	_tmp10_[5] = _tmp6_;
	_tmp10_[6] = _tmp7_;
	_tmp10_[7] = _tmp8_;
	_tmp10_[8] = _tmp9_;
	a = _tmp10_;
	a_length1 = 9;
	_a_size_ = a_length1;
	_vala_assert (G_TYPE_CHECK_INSTANCE_CAST (foo, G_TYPE_OBJECT, GObject)->ref_count == ((guint) 10), "foo.ref_count == 10");
	_vala_array_move (a, sizeof (Foo*), g_object_unref, TRUE, 0, 2, 3);
	a = (_vala_array_free (a, a_length1, (GDestroyNotify) g_object_unref), NULL);
	_g_object_unref0 (foo);
}

void
test_unowned_array_with_class_move (void)
{
	Foo* foo = NULL;
	Foo* _tmp0_;
	Foo** a = NULL;
	Foo** _tmp1_;
	gint a_length1;
	gint _a_size_;
	_tmp0_ = foo_new ();
	foo = _tmp0_;
	_vala_assert (G_TYPE_CHECK_INSTANCE_CAST (foo, G_TYPE_OBJECT, GObject)->ref_count == ((guint) 1), "foo.ref_count == 1");
	_tmp1_ = g_new0 (Foo*, 9 + 1);
	_tmp1_[0] = foo;
	_tmp1_[1] = foo;
	_tmp1_[2] = foo;
	_tmp1_[3] = foo;
	_tmp1_[4] = foo;
	_tmp1_[5] = foo;
	_tmp1_[6] = foo;
	_tmp1_[7] = foo;
	_tmp1_[8] = foo;
	a = _tmp1_;
	a_length1 = 9;
	_a_size_ = a_length1;
	_vala_assert (G_TYPE_CHECK_INSTANCE_CAST (foo, G_TYPE_OBJECT, GObject)->ref_count == ((guint) 1), "foo.ref_count == 1");
	_vala_array_move (a, sizeof (Foo*), NULL, TRUE, 0, 2, 3);
	_vala_assert (G_TYPE_CHECK_INSTANCE_CAST (foo, G_TYPE_OBJECT, GObject)->ref_count == ((guint) 1), "foo.ref_count == 1");
	a = (g_free (a), NULL);
	_g_object_unref0 (foo);
}

static void
_vala_main (void)
{
	test_array_with_class_move ();
	test_unowned_array_with_class_move ();
}

int
main (int argc,
      char ** argv)
{
	_vala_main ();
	return 0;
}

static void
_vala_array_destroy (gpointer array,
                     gssize array_length,
                     GDestroyNotify destroy_func)
{
	if ((array != NULL) && (destroy_func != NULL)) {
		gssize i;
		for (i = 0; i < array_length; i = i + 1) {
			if (((gpointer*) array)[i] != NULL) {
				destroy_func (((gpointer*) array)[i]);
			}
		}
	}
}

static void
_vala_array_free (gpointer array,
                  gssize array_length,
                  GDestroyNotify destroy_func)
{
	_vala_array_destroy (array, array_length, destroy_func);
	g_free (array);
}

static void
_vala_array_move (gpointer array,
                  gsize element_size,
                  GDestroyNotify element_destroy_func,
                  gboolean is_pointer,
                  gssize src,
                  gssize dest,
                  gssize length)
{
	if (element_destroy_func != NULL) {
		if ((src < dest) && ((src + length) > dest)) {
			gssize i;
			if (is_pointer) {
				for (i = dest; i < (src + length); i++) {
					element_destroy_func (((void**) array)[i]);
				}
			} else {
				for (i = dest; i < (src + length); i++) {
					element_destroy_func (((char*) array) + (i * element_size));
				}
			}
		} else if ((src > dest) && (src < (dest + length))) {
			gssize i;
			if (is_pointer) {
				for (i = dest; i < src; i++) {
					element_destroy_func (((void**) array)[i]);
				}
			} else {
				for (i = dest; i < src; i++) {
					element_destroy_func (((char*) array) + (i * element_size));
				}
			}
		} else if (src != dest) {
			gssize i;
			if (is_pointer) {
				for (i = dest; i < (dest + length); i++) {
					element_destroy_func (((void**) array)[i]);
				}
			} else {
				for (i = dest; i < (dest + length); i++) {
					element_destroy_func (((char*) array) + (i * element_size));
				}
			}
		}
	}
	memmove (((char*) array) + (dest * element_size), ((char*) array) + (src * element_size), length * element_size);
	if ((src < dest) && ((src + length) > dest)) {
		memset (((char*) array) + (src * element_size), 0, (dest - src) * element_size);
	} else if ((src > dest) && (src < (dest + length))) {
		memset (((char*) array) + ((dest + length) * element_size), 0, (src - dest) * element_size);
	} else if (src != dest) {
		memset (((char*) array) + (src * element_size), 0, length * element_size);
	}
}

