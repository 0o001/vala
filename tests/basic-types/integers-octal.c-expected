/* basic_types_integers_octal.c generated by valac, the Vala compiler
 * generated from basic_types_integers_octal.vala, do not modify */

#include <glib.h>

#define _vala_assert(expr, msg) if G_LIKELY (expr) ; else g_assertion_message_expr (G_LOG_DOMAIN, __FILE__, __LINE__, G_STRFUNC, msg);
#define _vala_return_if_fail(expr, msg) if G_LIKELY (expr) ; else { g_return_if_fail_warning (G_LOG_DOMAIN, G_STRFUNC, msg); return; }
#define _vala_return_val_if_fail(expr, msg, val) if G_LIKELY (expr) ; else { g_return_if_fail_warning (G_LOG_DOMAIN, G_STRFUNC, msg); return val; }
#define _vala_warn_if_fail(expr, msg) if G_LIKELY (expr) ; else g_warn_message (G_LOG_DOMAIN, __FILE__, __LINE__, G_STRFUNC, msg);

static void _vala_main (void);

static void
_vala_main (void)
{
	gint a = 0;
	guint b = 0U;
	gint c = 0;
	guint64 d = 0ULL;
	gint64 e = 0LL;
	a = 0644;
	_vala_assert (a == 420, "a == 420");
	b = 0105264631U;
	_vala_assert (b == 18180505U, "b == 18180505u");
	c = -01322;
	_vala_assert (c == -722, "c == -722");
	d = 01777777777777777777777ULL;
	_vala_assert (d == 0xffffffffffffffffULL, "d == 0xffffffffffffffff");
	e = -033653337357LL;
	_vala_assert (e == -0xdeadbeefLL, "e == -0xdeadbeef");
}

int
main (int argc,
      char ** argv)
{
	_vala_main ();
	return 0;
}

