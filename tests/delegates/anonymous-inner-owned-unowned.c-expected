/* delegates_anonymous_inner_owned_unowned.c generated by valac, the Vala compiler
 * generated from delegates_anonymous_inner_owned_unowned.vala, do not modify */

#include <glib.h>
#include <glib-object.h>
#include <gobject/gvaluecollector.h>

#if !defined(VALA_EXTERN)
#if defined(_WIN32) || defined(__CYGWIN__)
#define VALA_EXTERN __declspec(dllexport) extern
#elif __GNUC__ >= 4
#define VALA_EXTERN __attribute__((visibility("default"))) extern
#else
#define VALA_EXTERN extern
#endif
#endif

typedef struct _Aaa Aaa;

#define TYPE_BBB (bbb_get_type ())
#define BBB(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), TYPE_BBB, Bbb))
#define BBB_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), TYPE_BBB, BbbClass))
#define IS_BBB(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), TYPE_BBB))
#define IS_BBB_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), TYPE_BBB))
#define BBB_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), TYPE_BBB, BbbClass))

typedef struct _Bbb Bbb;
typedef struct _BbbClass BbbClass;
typedef struct _BbbPrivate BbbPrivate;
#define _aaa_free0(var) ((var == NULL) ? NULL : (var = (aaa_free (var), NULL)))
typedef struct _ParamSpecBbb ParamSpecBbb;
typedef void (*__delegate0_) (Aaa* p0, gpointer user_data);
typedef void (*__delegate1_) (Aaa* p0, gpointer user_data);
typedef Aaa* (*__delegate2_) (gpointer user_data);
typedef Aaa* (*__delegate3_) (gpointer user_data);
#define _bbb_unref0(var) ((var == NULL) ? NULL : (var = (bbb_unref (var), NULL)))
#define _vala_assert(expr, msg) if G_LIKELY (expr) ; else g_assertion_message_expr (G_LOG_DOMAIN, __FILE__, __LINE__, G_STRFUNC, msg);
#define _vala_return_if_fail(expr, msg) if G_LIKELY (expr) ; else { g_return_if_fail_warning (G_LOG_DOMAIN, G_STRFUNC, msg); return; }
#define _vala_return_val_if_fail(expr, msg, val) if G_LIKELY (expr) ; else { g_return_if_fail_warning (G_LOG_DOMAIN, G_STRFUNC, msg); return val; }
#define _vala_warn_if_fail(expr, msg) if G_LIKELY (expr) ; else g_warn_message (G_LOG_DOMAIN, __FILE__, __LINE__, G_STRFUNC, msg);

struct _Aaa {
	gint i;
};

struct _Bbb {
	GTypeInstance parent_instance;
	volatile int ref_count;
	BbbPrivate * priv;
};

struct _BbbClass {
	GTypeClass parent_class;
	void (*finalize) (Bbb *self);
};

struct _BbbPrivate {
	Aaa* a;
};

struct _ParamSpecBbb {
	GParamSpec parent_instance;
};

static gint Bbb_private_offset;
static gpointer bbb_parent_class = NULL;

VALA_EXTERN void aaa_free (Aaa * self);
G_DEFINE_AUTOPTR_CLEANUP_FUNC (Aaa, aaa_free)
static void aaa_instance_init (Aaa * self);
VALA_EXTERN Aaa* aaa_new (void);
VALA_EXTERN gpointer bbb_ref (gpointer instance);
VALA_EXTERN void bbb_unref (gpointer instance);
VALA_EXTERN GParamSpec* param_spec_bbb (const gchar* name,
                            const gchar* nick,
                            const gchar* blurb,
                            GType object_type,
                            GParamFlags flags);
VALA_EXTERN void value_set_bbb (GValue* value,
                    gpointer v_object);
VALA_EXTERN void value_take_bbb (GValue* value,
                     gpointer v_object);
VALA_EXTERN gpointer value_get_bbb (const GValue* value);
VALA_EXTERN GType bbb_get_type (void) G_GNUC_CONST ;
G_DEFINE_AUTOPTR_CLEANUP_FUNC (Bbb, bbb_unref)
VALA_EXTERN Aaa* bbb_get_a (Bbb* self);
VALA_EXTERN Bbb* bbb_new (void);
VALA_EXTERN Bbb* bbb_construct (GType object_type);
static void bbb_finalize (Bbb * obj);
static GType bbb_get_type_once (void);
VALA_EXTERN void p (__delegate0_ d,
        gpointer d_target);
VALA_EXTERN void q (__delegate1_ d,
        gpointer d_target);
VALA_EXTERN void r (__delegate2_ d,
        gpointer d_target);
VALA_EXTERN void s (__delegate3_ d,
        gpointer d_target);
static void _vala_main (void);
static void __lambda4_ (Aaa* a);
static void ___lambda4____delegate0_ (Aaa* p0,
                               gpointer self);
static void __lambda5_ (Aaa* a);
static void ___lambda5____delegate1_ (Aaa* p0,
                               gpointer self);
static Aaa* __lambda6_ (void);
static Aaa* ___lambda6____delegate2_ (gpointer self);
static Aaa* _bbb_get_a___delegate3_ (gpointer self);

Aaa*
aaa_new (void)
{
	Aaa* self;
	self = g_slice_new0 (Aaa);
	aaa_instance_init (self);
	return self;
}

static void
aaa_instance_init (Aaa * self)
{
	self->i = 42;
}

void
aaa_free (Aaa * self)
{
	g_slice_free (Aaa, self);
}

static inline gpointer
bbb_get_instance_private (Bbb* self)
{
	return G_STRUCT_MEMBER_P (self, Bbb_private_offset);
}

Aaa*
bbb_get_a (Bbb* self)
{
	Aaa* x = NULL;
	Aaa* _tmp0_;
	Aaa* result;
	g_return_val_if_fail (IS_BBB (self), NULL);
	_tmp0_ = self->priv->a;
	x = _tmp0_;
	_aaa_free0 (self->priv->a);
	self->priv->a = NULL;
	result = x;
	return result;
}

Bbb*
bbb_construct (GType object_type)
{
	Bbb* self = NULL;
	self = (Bbb*) g_type_create_instance (object_type);
	return self;
}

Bbb*
bbb_new (void)
{
	return bbb_construct (TYPE_BBB);
}

static void
value_bbb_init (GValue* value)
{
	value->data[0].v_pointer = NULL;
}

static void
value_bbb_free_value (GValue* value)
{
	if (value->data[0].v_pointer) {
		bbb_unref (value->data[0].v_pointer);
	}
}

static void
value_bbb_copy_value (const GValue* src_value,
                      GValue* dest_value)
{
	if (src_value->data[0].v_pointer) {
		dest_value->data[0].v_pointer = bbb_ref (src_value->data[0].v_pointer);
	} else {
		dest_value->data[0].v_pointer = NULL;
	}
}

static gpointer
value_bbb_peek_pointer (const GValue* value)
{
	return value->data[0].v_pointer;
}

static gchar*
value_bbb_collect_value (GValue* value,
                         guint n_collect_values,
                         GTypeCValue* collect_values,
                         guint collect_flags)
{
	if (collect_values[0].v_pointer) {
		Bbb * object;
		object = collect_values[0].v_pointer;
		if (object->parent_instance.g_class == NULL) {
			return g_strconcat ("invalid unclassed object pointer for value type `", G_VALUE_TYPE_NAME (value), "'", NULL);
		} else if (!g_value_type_compatible (G_TYPE_FROM_INSTANCE (object), G_VALUE_TYPE (value))) {
			return g_strconcat ("invalid object type `", g_type_name (G_TYPE_FROM_INSTANCE (object)), "' for value type `", G_VALUE_TYPE_NAME (value), "'", NULL);
		}
		value->data[0].v_pointer = bbb_ref (object);
	} else {
		value->data[0].v_pointer = NULL;
	}
	return NULL;
}

static gchar*
value_bbb_lcopy_value (const GValue* value,
                       guint n_collect_values,
                       GTypeCValue* collect_values,
                       guint collect_flags)
{
	Bbb ** object_p;
	object_p = collect_values[0].v_pointer;
	if (!object_p) {
		return g_strdup_printf ("value location for `%s' passed as NULL", G_VALUE_TYPE_NAME (value));
	}
	if (!value->data[0].v_pointer) {
		*object_p = NULL;
	} else if (collect_flags & G_VALUE_NOCOPY_CONTENTS) {
		*object_p = value->data[0].v_pointer;
	} else {
		*object_p = bbb_ref (value->data[0].v_pointer);
	}
	return NULL;
}

GParamSpec*
param_spec_bbb (const gchar* name,
                const gchar* nick,
                const gchar* blurb,
                GType object_type,
                GParamFlags flags)
{
	ParamSpecBbb* spec;
	g_return_val_if_fail (g_type_is_a (object_type, TYPE_BBB), NULL);
	spec = g_param_spec_internal (G_TYPE_PARAM_OBJECT, name, nick, blurb, flags);
	G_PARAM_SPEC (spec)->value_type = object_type;
	return G_PARAM_SPEC (spec);
}

gpointer
value_get_bbb (const GValue* value)
{
	g_return_val_if_fail (G_TYPE_CHECK_VALUE_TYPE (value, TYPE_BBB), NULL);
	return value->data[0].v_pointer;
}

void
value_set_bbb (GValue* value,
               gpointer v_object)
{
	Bbb * old;
	g_return_if_fail (G_TYPE_CHECK_VALUE_TYPE (value, TYPE_BBB));
	old = value->data[0].v_pointer;
	if (v_object) {
		g_return_if_fail (G_TYPE_CHECK_INSTANCE_TYPE (v_object, TYPE_BBB));
		g_return_if_fail (g_value_type_compatible (G_TYPE_FROM_INSTANCE (v_object), G_VALUE_TYPE (value)));
		value->data[0].v_pointer = v_object;
		bbb_ref (value->data[0].v_pointer);
	} else {
		value->data[0].v_pointer = NULL;
	}
	if (old) {
		bbb_unref (old);
	}
}

void
value_take_bbb (GValue* value,
                gpointer v_object)
{
	Bbb * old;
	g_return_if_fail (G_TYPE_CHECK_VALUE_TYPE (value, TYPE_BBB));
	old = value->data[0].v_pointer;
	if (v_object) {
		g_return_if_fail (G_TYPE_CHECK_INSTANCE_TYPE (v_object, TYPE_BBB));
		g_return_if_fail (g_value_type_compatible (G_TYPE_FROM_INSTANCE (v_object), G_VALUE_TYPE (value)));
		value->data[0].v_pointer = v_object;
	} else {
		value->data[0].v_pointer = NULL;
	}
	if (old) {
		bbb_unref (old);
	}
}

static void
bbb_class_init (BbbClass * klass,
                gpointer klass_data)
{
	bbb_parent_class = g_type_class_peek_parent (klass);
	((BbbClass *) klass)->finalize = bbb_finalize;
	g_type_class_adjust_private_offset (klass, &Bbb_private_offset);
}

static void
bbb_instance_init (Bbb * self,
                   gpointer klass)
{
	Aaa* _tmp0_;
	self->priv = bbb_get_instance_private (self);
	_tmp0_ = aaa_new ();
	self->priv->a = _tmp0_;
	self->ref_count = 1;
}

static void
bbb_finalize (Bbb * obj)
{
	Bbb * self;
	self = G_TYPE_CHECK_INSTANCE_CAST (obj, TYPE_BBB, Bbb);
	g_signal_handlers_destroy (self);
	_aaa_free0 (self->priv->a);
}

static GType
bbb_get_type_once (void)
{
	static const GTypeValueTable g_define_type_value_table = { value_bbb_init, value_bbb_free_value, value_bbb_copy_value, value_bbb_peek_pointer, "p", value_bbb_collect_value, "p", value_bbb_lcopy_value };
	static const GTypeInfo g_define_type_info = { sizeof (BbbClass), (GBaseInitFunc) NULL, (GBaseFinalizeFunc) NULL, (GClassInitFunc) bbb_class_init, (GClassFinalizeFunc) NULL, NULL, sizeof (Bbb), 0, (GInstanceInitFunc) bbb_instance_init, &g_define_type_value_table };
	static const GTypeFundamentalInfo g_define_type_fundamental_info = { (G_TYPE_FLAG_CLASSED | G_TYPE_FLAG_INSTANTIATABLE | G_TYPE_FLAG_DERIVABLE | G_TYPE_FLAG_DEEP_DERIVABLE) };
	GType bbb_type_id;
	bbb_type_id = g_type_register_fundamental (g_type_fundamental_next (), "Bbb", &g_define_type_info, &g_define_type_fundamental_info, 0);
	Bbb_private_offset = g_type_add_instance_private (bbb_type_id, sizeof (BbbPrivate));
	return bbb_type_id;
}

GType
bbb_get_type (void)
{
	static volatile gsize bbb_type_id__once = 0;
	if (g_once_init_enter (&bbb_type_id__once)) {
		GType bbb_type_id;
		bbb_type_id = bbb_get_type_once ();
		g_once_init_leave (&bbb_type_id__once, bbb_type_id);
	}
	return bbb_type_id__once;
}

gpointer
bbb_ref (gpointer instance)
{
	Bbb * self;
	self = instance;
	g_atomic_int_inc (&self->ref_count);
	return instance;
}

void
bbb_unref (gpointer instance)
{
	Bbb * self;
	self = instance;
	if (g_atomic_int_dec_and_test (&self->ref_count)) {
		BBB_GET_CLASS (self)->finalize (self);
		g_type_free_instance ((GTypeInstance *) self);
	}
}

void
p (__delegate0_ d,
   gpointer d_target)
{
	Aaa* a = NULL;
	Aaa* _tmp0_;
	Aaa* _tmp1_;
	Aaa* _tmp2_;
	_tmp0_ = aaa_new ();
	a = _tmp0_;
	_tmp1_ = a;
	a = NULL;
	d (_tmp1_, d_target);
	_tmp2_ = a;
	_vala_assert (_tmp2_ == NULL, "a == null");
	_aaa_free0 (a);
}

void
q (__delegate1_ d,
   gpointer d_target)
{
	Aaa* a = NULL;
	Aaa* _tmp0_;
	_tmp0_ = aaa_new ();
	a = _tmp0_;
	d (a, d_target);
	_vala_assert (a->i == 42, "a.i == 42");
	_aaa_free0 (a);
}

void
r (__delegate2_ d,
   gpointer d_target)
{
	Aaa* _tmp0_;
	Aaa* _tmp1_;
	_tmp0_ = d (d_target);
	_tmp1_ = _tmp0_;
	_vala_assert (_tmp1_->i == 42, "d ().i == 42");
	_aaa_free0 (_tmp1_);
}

void
s (__delegate3_ d,
   gpointer d_target)
{
	Aaa* _tmp0_;
	_tmp0_ = d (d_target);
	_vala_assert (_tmp0_->i != 42, "d ().i != 42");
}

static void
__lambda4_ (Aaa* a)
{
	g_return_if_fail (a != NULL);
	_vala_assert (a->i == 42, "a.i == 42");
	_aaa_free0 (a);
}

static void
___lambda4____delegate0_ (Aaa* p0,
                          gpointer self)
{
	__lambda4_ (p0);
}

static void
__lambda5_ (Aaa* a)
{
	g_return_if_fail (a != NULL);
	_vala_assert (a->i == 42, "a.i == 42");
}

static void
___lambda5____delegate1_ (Aaa* p0,
                          gpointer self)
{
	__lambda5_ (p0);
}

static Aaa*
__lambda6_ (void)
{
	Aaa* _tmp0_;
	Aaa* result;
	_tmp0_ = aaa_new ();
	result = _tmp0_;
	return result;
}

static Aaa*
___lambda6____delegate2_ (gpointer self)
{
	Aaa* result;
	result = __lambda6_ ();
	return result;
}

static Aaa*
_bbb_get_a___delegate3_ (gpointer self)
{
	Aaa* result;
	result = bbb_get_a ((Bbb*) self);
	return result;
}

static void
_vala_main (void)
{
	Bbb* _tmp0_;
	Bbb* _tmp1_;
	p (___lambda4____delegate0_, NULL);
	q (___lambda5____delegate1_, NULL);
	r (___lambda6____delegate2_, NULL);
	_tmp0_ = bbb_new ();
	_tmp1_ = _tmp0_;
	s (_bbb_get_a___delegate3_, _tmp1_);
	_bbb_unref0 (_tmp1_);
}

int
main (int argc,
      char ** argv)
{
	_vala_main ();
	return 0;
}

