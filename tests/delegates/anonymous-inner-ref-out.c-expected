/* delegates_anonymous_inner_ref_out.c generated by valac, the Vala compiler
 * generated from delegates_anonymous_inner_ref_out.vala, do not modify */

#include <glib.h>

#if !defined(VALA_EXTERN)
#if defined(_WIN32) || defined(__CYGWIN__)
#define VALA_EXTERN __declspec(dllexport) extern
#elif __GNUC__ >= 4
#define VALA_EXTERN __attribute__((visibility("default"))) extern
#else
#define VALA_EXTERN extern
#endif
#endif

typedef void (*__delegate0_) (gint* p0, gpointer user_data);
typedef void (*__delegate1_) (gint* p0, gpointer user_data);
#define _vala_assert(expr, msg) if G_LIKELY (expr) ; else g_assertion_message_expr (G_LOG_DOMAIN, __FILE__, __LINE__, G_STRFUNC, msg);
#define _vala_return_if_fail(expr, msg) if G_LIKELY (expr) ; else { g_return_if_fail_warning (G_LOG_DOMAIN, G_STRFUNC, msg); return; }
#define _vala_return_val_if_fail(expr, msg, val) if G_LIKELY (expr) ; else { g_return_if_fail_warning (G_LOG_DOMAIN, G_STRFUNC, msg); return val; }
#define _vala_warn_if_fail(expr, msg) if G_LIKELY (expr) ; else g_warn_message (G_LOG_DOMAIN, __FILE__, __LINE__, G_STRFUNC, msg);

static void _vala_main (void);
VALA_EXTERN void f (__delegate0_ x,
        gpointer x_target);
VALA_EXTERN void t (gint* a);
static void _t___delegate0_ (gint* p0,
                      gpointer self);
VALA_EXTERN void g (__delegate1_ y,
        gpointer y_target);
VALA_EXTERN void d (gint* a);
static void _d___delegate1_ (gint* p0,
                      gpointer self);

static void
_t___delegate0_ (gint* p0,
                 gpointer self)
{
	t (p0);
}

static void
_d___delegate1_ (gint* p0,
                 gpointer self)
{
	d (p0);
}

static void
_vala_main (void)
{
	f (_t___delegate0_, NULL);
	g (_d___delegate1_, NULL);
}

int
main (int argc,
      char ** argv)
{
	_vala_main ();
	return 0;
}

void
f (__delegate0_ x,
   gpointer x_target)
{
	gint i = 0;
	i = 42;
	x (&i, x_target);
	_vala_assert (i == 7, "i == 7");
}

void
g (__delegate1_ y,
   gpointer y_target)
{
	gint i = 0;
	gint _tmp0_ = 0;
	y (&_tmp0_, y_target);
	i = _tmp0_;
	_vala_assert (i == 42, "i == 42");
}

void
t (gint* a)
{
	*a = 7;
}

void
d (gint* a)
{
	gint _vala_a = 0;
	_vala_a = 42;
	if (a) {
		*a = _vala_a;
	}
}

