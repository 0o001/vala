/* delegates_anonymous_type_param.c generated by valac, the Vala compiler
 * generated from delegates_anonymous_type_param.vala, do not modify */

#include <stdlib.h>
#include <string.h>
#include <glib.h>
#include <glib-object.h>
#include <gobject/gvaluecollector.h>

#if !defined(VALA_EXTERN)
#if defined(_WIN32) || defined(__CYGWIN__)
#define VALA_EXTERN __declspec(dllexport) extern
#elif __GNUC__ >= 4
#define VALA_EXTERN __attribute__((visibility("default"))) extern
#else
#define VALA_EXTERN extern
#endif
#endif

#define TYPE_COMP (comp_get_type ())
#define COMP(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), TYPE_COMP, Comp))
#define COMP_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), TYPE_COMP, CompClass))
#define IS_COMP(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), TYPE_COMP))
#define IS_COMP_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), TYPE_COMP))
#define COMP_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), TYPE_COMP, CompClass))

typedef struct _Comp Comp;
typedef struct _CompClass CompClass;
typedef gchar* (*__delegate0_) (Comp* p0, Comp* p1, gpointer user_data);
#define _g_free0(var) (var = (g_free (var), NULL))
#define _comp_unref0(var) ((var == NULL) ? NULL : (var = (comp_unref (var), NULL)))
typedef struct _CompPrivate CompPrivate;
typedef struct _ParamSpecComp ParamSpecComp;
#define _vala_assert(expr, msg) if G_LIKELY (expr) ; else g_assertion_message_expr (G_LOG_DOMAIN, __FILE__, __LINE__, G_STRFUNC, msg);
#define _vala_return_if_fail(expr, msg) if G_LIKELY (expr) ; else { g_return_if_fail_warning (G_LOG_DOMAIN, G_STRFUNC, msg); return; }
#define _vala_return_val_if_fail(expr, msg, val) if G_LIKELY (expr) ; else { g_return_if_fail_warning (G_LOG_DOMAIN, G_STRFUNC, msg); return val; }
#define _vala_warn_if_fail(expr, msg) if G_LIKELY (expr) ; else g_warn_message (G_LOG_DOMAIN, __FILE__, __LINE__, G_STRFUNC, msg);

struct _Comp {
	GTypeInstance parent_instance;
	volatile int ref_count;
	CompPrivate * priv;
};

struct _CompClass {
	GTypeClass parent_class;
	void (*finalize) (Comp *self);
};

struct _CompPrivate {
	GType a_type;
	GBoxedCopyFunc a_dup_func;
	GDestroyNotify a_destroy_func;
	gpointer _a;
};

struct _ParamSpecComp {
	GParamSpec parent_instance;
};

static gint Comp_private_offset;
static gpointer comp_parent_class = NULL;

static void _vala_main (void);
VALA_EXTERN gpointer comp_ref (gpointer instance);
VALA_EXTERN void comp_unref (gpointer instance);
VALA_EXTERN GParamSpec* param_spec_comp (const gchar* name,
                             const gchar* nick,
                             const gchar* blurb,
                             GType object_type,
                             GParamFlags flags);
VALA_EXTERN void value_set_comp (GValue* value,
                     gpointer v_object);
VALA_EXTERN void value_take_comp (GValue* value,
                      gpointer v_object);
VALA_EXTERN gpointer value_get_comp (const GValue* value);
VALA_EXTERN GType comp_get_type (void) G_GNUC_CONST ;
G_DEFINE_AUTOPTR_CLEANUP_FUNC (Comp, comp_unref)
VALA_EXTERN void f (__delegate0_ abc,
        gpointer abc_target);
VALA_EXTERN gchar* t (Comp* a,
          Comp* b);
static gchar* _t___delegate0_ (Comp* p0,
                        Comp* p1,
                        gpointer self);
VALA_EXTERN gconstpointer comp_get_a (Comp* self);
VALA_EXTERN Comp* comp_new (GType a_type,
                GBoxedCopyFunc a_dup_func,
                GDestroyNotify a_destroy_func,
                gconstpointer a);
VALA_EXTERN Comp* comp_construct (GType object_type,
                      GType a_type,
                      GBoxedCopyFunc a_dup_func,
                      GDestroyNotify a_destroy_func,
                      gconstpointer a);
static void comp_set_a (Comp* self,
                 gconstpointer value);
static void comp_finalize (Comp * obj);
static GType comp_get_type_once (void);

static gchar*
_t___delegate0_ (Comp* p0,
                 Comp* p1,
                 gpointer self)
{
	gchar* result;
	result = t (p0, p1);
	return result;
}

static void
_vala_main (void)
{
	f (_t___delegate0_, NULL);
}

int
main (int argc,
      char ** argv)
{
	_vala_main ();
	return 0;
}

gchar*
t (Comp* a,
   Comp* b)
{
	gconstpointer _tmp0_;
	gconstpointer _tmp1_;
	gconstpointer _tmp2_;
	gconstpointer _tmp3_;
	gchar* _tmp4_;
	gchar* result;
	g_return_val_if_fail (IS_COMP (a), NULL);
	g_return_val_if_fail (IS_COMP (b), NULL);
	_tmp0_ = comp_get_a (a);
	_tmp1_ = _tmp0_;
	_tmp2_ = comp_get_a (b);
	_tmp3_ = _tmp2_;
	_tmp4_ = g_strconcat ((const gchar*) _tmp1_, (const gchar*) _tmp3_, NULL);
	result = _tmp4_;
	return result;
}

void
f (__delegate0_ abc,
   gpointer abc_target)
{
	Comp* _tmp0_;
	Comp* _tmp1_;
	Comp* _tmp2_;
	Comp* _tmp3_;
	gchar* _tmp4_;
	gchar* _tmp5_;
	_tmp0_ = comp_new (G_TYPE_STRING, (GBoxedCopyFunc) g_strdup, (GDestroyNotify) g_free, "x");
	_tmp1_ = _tmp0_;
	_tmp2_ = comp_new (G_TYPE_STRING, (GBoxedCopyFunc) g_strdup, (GDestroyNotify) g_free, "y");
	_tmp3_ = _tmp2_;
	_tmp4_ = abc (_tmp1_, _tmp3_, abc_target);
	_tmp5_ = _tmp4_;
	_vala_assert (g_strcmp0 (_tmp5_, "xy") == 0, "abc(new Comp<string> (\"x\"), new Comp<string> (\"y\")) == \"xy\"");
	_g_free0 (_tmp5_);
	_comp_unref0 (_tmp3_);
	_comp_unref0 (_tmp1_);
}

static inline gpointer
comp_get_instance_private (Comp* self)
{
	return G_STRUCT_MEMBER_P (self, Comp_private_offset);
}

Comp*
comp_construct (GType object_type,
                GType a_type,
                GBoxedCopyFunc a_dup_func,
                GDestroyNotify a_destroy_func,
                gconstpointer a)
{
	Comp* self = NULL;
	self = (Comp*) g_type_create_instance (object_type);
	self->priv->a_type = a_type;
	self->priv->a_dup_func = a_dup_func;
	self->priv->a_destroy_func = a_destroy_func;
	comp_set_a (self, a);
	return self;
}

Comp*
comp_new (GType a_type,
          GBoxedCopyFunc a_dup_func,
          GDestroyNotify a_destroy_func,
          gconstpointer a)
{
	return comp_construct (TYPE_COMP, a_type, a_dup_func, a_destroy_func, a);
}

gconstpointer
comp_get_a (Comp* self)
{
	gconstpointer result;
	gconstpointer _tmp0_;
	g_return_val_if_fail (IS_COMP (self), NULL);
	_tmp0_ = self->priv->_a;
	result = _tmp0_;
	return result;
}

static void
comp_set_a (Comp* self,
            gconstpointer value)
{
	gpointer _tmp0_;
	g_return_if_fail (IS_COMP (self));
	_tmp0_ = ((value != NULL) && (self->priv->a_dup_func != NULL)) ? self->priv->a_dup_func ((gpointer) value) : ((gpointer) value);
	((self->priv->_a == NULL) || (self->priv->a_destroy_func == NULL)) ? NULL : (self->priv->_a = (self->priv->a_destroy_func (self->priv->_a), NULL));
	self->priv->_a = _tmp0_;
}

static void
value_comp_init (GValue* value)
{
	value->data[0].v_pointer = NULL;
}

static void
value_comp_free_value (GValue* value)
{
	if (value->data[0].v_pointer) {
		comp_unref (value->data[0].v_pointer);
	}
}

static void
value_comp_copy_value (const GValue* src_value,
                       GValue* dest_value)
{
	if (src_value->data[0].v_pointer) {
		dest_value->data[0].v_pointer = comp_ref (src_value->data[0].v_pointer);
	} else {
		dest_value->data[0].v_pointer = NULL;
	}
}

static gpointer
value_comp_peek_pointer (const GValue* value)
{
	return value->data[0].v_pointer;
}

static gchar*
value_comp_collect_value (GValue* value,
                          guint n_collect_values,
                          GTypeCValue* collect_values,
                          guint collect_flags)
{
	if (collect_values[0].v_pointer) {
		Comp * object;
		object = collect_values[0].v_pointer;
		if (object->parent_instance.g_class == NULL) {
			return g_strconcat ("invalid unclassed object pointer for value type `", G_VALUE_TYPE_NAME (value), "'", NULL);
		} else if (!g_value_type_compatible (G_TYPE_FROM_INSTANCE (object), G_VALUE_TYPE (value))) {
			return g_strconcat ("invalid object type `", g_type_name (G_TYPE_FROM_INSTANCE (object)), "' for value type `", G_VALUE_TYPE_NAME (value), "'", NULL);
		}
		value->data[0].v_pointer = comp_ref (object);
	} else {
		value->data[0].v_pointer = NULL;
	}
	return NULL;
}

static gchar*
value_comp_lcopy_value (const GValue* value,
                        guint n_collect_values,
                        GTypeCValue* collect_values,
                        guint collect_flags)
{
	Comp ** object_p;
	object_p = collect_values[0].v_pointer;
	if (!object_p) {
		return g_strdup_printf ("value location for `%s' passed as NULL", G_VALUE_TYPE_NAME (value));
	}
	if (!value->data[0].v_pointer) {
		*object_p = NULL;
	} else if (collect_flags & G_VALUE_NOCOPY_CONTENTS) {
		*object_p = value->data[0].v_pointer;
	} else {
		*object_p = comp_ref (value->data[0].v_pointer);
	}
	return NULL;
}

GParamSpec*
param_spec_comp (const gchar* name,
                 const gchar* nick,
                 const gchar* blurb,
                 GType object_type,
                 GParamFlags flags)
{
	ParamSpecComp* spec;
	g_return_val_if_fail (g_type_is_a (object_type, TYPE_COMP), NULL);
	spec = g_param_spec_internal (G_TYPE_PARAM_OBJECT, name, nick, blurb, flags);
	G_PARAM_SPEC (spec)->value_type = object_type;
	return G_PARAM_SPEC (spec);
}

gpointer
value_get_comp (const GValue* value)
{
	g_return_val_if_fail (G_TYPE_CHECK_VALUE_TYPE (value, TYPE_COMP), NULL);
	return value->data[0].v_pointer;
}

void
value_set_comp (GValue* value,
                gpointer v_object)
{
	Comp * old;
	g_return_if_fail (G_TYPE_CHECK_VALUE_TYPE (value, TYPE_COMP));
	old = value->data[0].v_pointer;
	if (v_object) {
		g_return_if_fail (G_TYPE_CHECK_INSTANCE_TYPE (v_object, TYPE_COMP));
		g_return_if_fail (g_value_type_compatible (G_TYPE_FROM_INSTANCE (v_object), G_VALUE_TYPE (value)));
		value->data[0].v_pointer = v_object;
		comp_ref (value->data[0].v_pointer);
	} else {
		value->data[0].v_pointer = NULL;
	}
	if (old) {
		comp_unref (old);
	}
}

void
value_take_comp (GValue* value,
                 gpointer v_object)
{
	Comp * old;
	g_return_if_fail (G_TYPE_CHECK_VALUE_TYPE (value, TYPE_COMP));
	old = value->data[0].v_pointer;
	if (v_object) {
		g_return_if_fail (G_TYPE_CHECK_INSTANCE_TYPE (v_object, TYPE_COMP));
		g_return_if_fail (g_value_type_compatible (G_TYPE_FROM_INSTANCE (v_object), G_VALUE_TYPE (value)));
		value->data[0].v_pointer = v_object;
	} else {
		value->data[0].v_pointer = NULL;
	}
	if (old) {
		comp_unref (old);
	}
}

static void
comp_class_init (CompClass * klass,
                 gpointer klass_data)
{
	comp_parent_class = g_type_class_peek_parent (klass);
	((CompClass *) klass)->finalize = comp_finalize;
	g_type_class_adjust_private_offset (klass, &Comp_private_offset);
}

static void
comp_instance_init (Comp * self,
                    gpointer klass)
{
	self->priv = comp_get_instance_private (self);
	self->ref_count = 1;
}

static void
comp_finalize (Comp * obj)
{
	Comp * self;
	self = G_TYPE_CHECK_INSTANCE_CAST (obj, TYPE_COMP, Comp);
	g_signal_handlers_destroy (self);
	((self->priv->_a == NULL) || (self->priv->a_destroy_func == NULL)) ? NULL : (self->priv->_a = (self->priv->a_destroy_func (self->priv->_a), NULL));
}

static GType
comp_get_type_once (void)
{
	static const GTypeValueTable g_define_type_value_table = { value_comp_init, value_comp_free_value, value_comp_copy_value, value_comp_peek_pointer, "p", value_comp_collect_value, "p", value_comp_lcopy_value };
	static const GTypeInfo g_define_type_info = { sizeof (CompClass), (GBaseInitFunc) NULL, (GBaseFinalizeFunc) NULL, (GClassInitFunc) comp_class_init, (GClassFinalizeFunc) NULL, NULL, sizeof (Comp), 0, (GInstanceInitFunc) comp_instance_init, &g_define_type_value_table };
	static const GTypeFundamentalInfo g_define_type_fundamental_info = { (G_TYPE_FLAG_CLASSED | G_TYPE_FLAG_INSTANTIATABLE | G_TYPE_FLAG_DERIVABLE | G_TYPE_FLAG_DEEP_DERIVABLE) };
	GType comp_type_id;
	comp_type_id = g_type_register_fundamental (g_type_fundamental_next (), "Comp", &g_define_type_info, &g_define_type_fundamental_info, 0);
	Comp_private_offset = g_type_add_instance_private (comp_type_id, sizeof (CompPrivate));
	return comp_type_id;
}

GType
comp_get_type (void)
{
	static volatile gsize comp_type_id__once = 0;
	if (g_once_init_enter (&comp_type_id__once)) {
		GType comp_type_id;
		comp_type_id = comp_get_type_once ();
		g_once_init_leave (&comp_type_id__once, comp_type_id);
	}
	return comp_type_id__once;
}

gpointer
comp_ref (gpointer instance)
{
	Comp * self;
	self = instance;
	g_atomic_int_inc (&self->ref_count);
	return instance;
}

void
comp_unref (gpointer instance)
{
	Comp * self;
	self = instance;
	if (g_atomic_int_dec_and_test (&self->ref_count)) {
		COMP_GET_CLASS (self)->finalize (self);
		g_type_free_instance ((GTypeInstance *) self);
	}
}

