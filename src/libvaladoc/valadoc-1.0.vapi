/* valadoc-1.0.vapi generated by valac, do not modify. */

[CCode (cprefix = "Valadoc", lower_case_cprefix = "valadoc_")]
namespace Valadoc {
	[CCode (cprefix = "ValadocDiagrams", lower_case_cprefix = "valadoc_diagrams_")]
	namespace Diagrams {
		[CCode (cheader_filename = "valadoc-1.0.h")]
		public static void write_class_diagram (Valadoc.Class cl, string path);
		[CCode (cheader_filename = "valadoc-1.0.h")]
		public static void write_interface_diagram (Valadoc.Interface iface, string path);
		[CCode (cheader_filename = "valadoc-1.0.h")]
		public static void write_struct_diagram (Valadoc.Struct stru, string path);
	}
	[CCode (cprefix = "ValadocHtml", lower_case_cprefix = "valadoc_html_")]
	namespace Html {
		[CCode (ref_function = "valadoc_html_attribute_ref", unref_function = "valadoc_html_attribute_unref", cheader_filename = "valadoc-1.0.h")]
		public class Attribute {
			public Attribute (string name, string val);
			public string to_string (string path);
		}
		[CCode (cheader_filename = "valadoc-1.0.h")]
		public abstract class BlockElement : Valadoc.Html.Element {
			public BlockElement ();
			public override string to_string (uint depth, string path);
		}
		[CCode (cheader_filename = "valadoc-1.0.h")]
		public class Body : Valadoc.Html.BlockElement {
			public Body ();
		}
		[CCode (cheader_filename = "valadoc-1.0.h")]
		public class Div : Valadoc.Html.BlockElement {
			public Div ();
		}
		[CCode (ref_function = "valadoc_html_document_ref", unref_function = "valadoc_html_document_unref", cheader_filename = "valadoc-1.0.h")]
		public class Document {
			public Document ();
			public void set_root (Valadoc.Html.Html root);
			public string to_string (string path);
		}
		[CCode (cheader_filename = "valadoc-1.0.h")]
		public abstract class Element : Valadoc.Html.Entry {
			protected Gee.ArrayList<Valadoc.Html.Attribute> attributes;
			protected Gee.ArrayList<Valadoc.Html.Entry> children;
			protected weak string tag;
			public Element ();
			public void add_attribute (Valadoc.Html.Attribute att);
			public void add_attributes (Gee.Collection<Valadoc.Html.Attribute> attributes);
			public void add_child (Valadoc.Html.Entry el);
			public void add_childs (Gee.Collection<Valadoc.Html.Entry> elements);
			protected string attributes_to_string (string path);
			protected string children_to_string (uint depth, string path);
		}
		[CCode (ref_function = "valadoc_html_entry_ref", unref_function = "valadoc_html_entry_unref", cheader_filename = "valadoc-1.0.h")]
		public abstract class Entry {
			public Entry ();
			public abstract string to_string (uint depth, string path);
		}
		[CCode (cheader_filename = "valadoc-1.0.h")]
		public class Head : Valadoc.Html.BlockElement {
			public Head ();
		}
		[CCode (cheader_filename = "valadoc-1.0.h")]
		public class Headline : Valadoc.Html.BlockElement {
			public Headline (int lvl);
		}
		[CCode (cheader_filename = "valadoc-1.0.h")]
		public class Html : Valadoc.Html.BlockElement {
			public Html ();
		}
		[CCode (cheader_filename = "valadoc-1.0.h")]
		public class HyperLink : Valadoc.Html.InlineElement {
			public HyperLink (string path, Valadoc.Html.Entry desc);
			public HyperLink.from_list (string path, Gee.Collection<Valadoc.Html.Entry> descs);
		}
		[CCode (cheader_filename = "valadoc-1.0.h")]
		public class Image : Valadoc.Html.InlineElement {
			public Image (string path);
		}
		[CCode (cheader_filename = "valadoc-1.0.h")]
		public abstract class InlineElement : Valadoc.Html.Element {
			public InlineElement ();
			public override string to_string (uint depth, string path);
		}
		[CCode (cheader_filename = "valadoc-1.0.h")]
		public class Italic : Valadoc.Html.InlineElement {
			public Italic ();
		}
		[CCode (cheader_filename = "valadoc-1.0.h")]
		public class Link : Valadoc.Html.BlockElement {
			public Link (string lang, string src, string type);
		}
		[CCode (cheader_filename = "valadoc-1.0.h")]
		public class Script : Valadoc.Html.BlockElement {
			public Script (string lang, string src, string type);
		}
		[CCode (cheader_filename = "valadoc-1.0.h")]
		public class Span : Valadoc.Html.InlineElement {
			public Span ();
			public Span.from_list (Gee.Collection<Valadoc.Html.Entry> list);
		}
		[CCode (cheader_filename = "valadoc-1.0.h")]
		public class String : Valadoc.Html.Entry {
			public String (string str);
			public override string to_string (uint depth, string path);
		}
		[CCode (cheader_filename = "valadoc-1.0.h")]
		public class Title : Valadoc.Html.BlockElement {
			public Title (string title);
		}
	}
	[CCode (cheader_filename = "valadoc-1.0.h")]
	public class Array : Valadoc.Basic {
		public Array (Valadoc.Settings settings, Vala.ArrayType vtyperef, Valadoc.Basic parent, Valadoc.Tree head);
		public void set_type_references ();
		public void write (Valadoc.Langlet langlet, void* ptr, Valadoc.DocumentedElement parent);
		public Valadoc.Basic data_type { get; set; }
	}
	[CCode (cheader_filename = "valadoc-1.0.h")]
	public abstract class Basic : GLib.Object {
		public Basic ();
		public Valadoc.Tree head { get; set; }
		public Valadoc.Basic parent { get; set; }
		public Valadoc.Settings settings { get; set; }
		protected Vala.Symbol vsymbol { get; set; }
	}
	[CCode (cheader_filename = "valadoc-1.0.h")]
	public abstract class BoldDocElement : Valadoc.HighlightedDocElement {
		public BoldDocElement ();
	}
	[CCode (cheader_filename = "valadoc-1.0.h")]
	public abstract class CenterDocElement : Valadoc.ContentPositionDocElement {
		public CenterDocElement ();
	}
	[CCode (cheader_filename = "valadoc-1.0.h")]
	public class Class : Valadoc.DocumentedElement, Valadoc.SymbolAccessibility, Valadoc.Visitable, Valadoc.ClassHandler, Valadoc.StructHandler, Valadoc.SignalHandler, Valadoc.MethodHandler, Valadoc.EnumHandler, Valadoc.PropertyHandler, Valadoc.ConstructionMethodHandler, Valadoc.FieldHandler, Valadoc.DelegateHandler, Valadoc.ConstantHandler, Valadoc.TemplateParameterListHandler {
		public Class (Valadoc.Settings settings, Vala.Class vclass, Valadoc.ClassHandler parent, Valadoc.Tree head);
		public string? get_cname ();
		public Gee.Collection<Valadoc.Interface> get_implemented_interface_list ();
		public void visit (Valadoc.Doclet doclet);
		public void write (Valadoc.Langlet langlet, void* ptr);
		protected Valadoc.Class? base_type { get; set; }
		public bool is_abstract { get; }
	}
	[CCode (cheader_filename = "valadoc-1.0.h")]
	public abstract class CodeConstantDocElement : Valadoc.DocElement {
		public CodeConstantDocElement ();
		public abstract bool parse (string constant);
	}
	[CCode (cheader_filename = "valadoc-1.0.h")]
	public class Constant : Valadoc.DocumentedElement, Valadoc.SymbolAccessibility, Valadoc.Visitable, Valadoc.ReturnTypeHandler {
		public Constant (Valadoc.Settings settings, Vala.Constant vconst, Valadoc.ConstantHandler parent, Valadoc.Tree head);
		public string get_cname ();
		public bool is_vconstant (Vala.Constant vconst);
		public void visit (Valadoc.Doclet doclet, Valadoc.ConstantHandler? parent);
		public void write (Valadoc.Langlet langlet, void* ptr, Valadoc.ConstantHandler parent);
	}
	[CCode (cheader_filename = "valadoc-1.0.h")]
	public abstract class ContentPositionDocElement : Valadoc.DocElement {
		public ContentPositionDocElement ();
		public abstract bool parse (Gee.ArrayList<Valadoc.DocElement> content);
	}
	[CCode (cheader_filename = "valadoc-1.0.h")]
	public class Delegate : Valadoc.DocumentedElement, Valadoc.SymbolAccessibility, Valadoc.Visitable, Valadoc.ParameterListHandler, Valadoc.ReturnTypeHandler, Valadoc.TemplateParameterListHandler, Valadoc.ExceptionHandler {
		public Delegate (Valadoc.Settings settings, Vala.Delegate vdelegate, Valadoc.DelegateHandler parent, Valadoc.Tree head);
		public string? get_cname ();
		public void visit (Valadoc.Doclet doclet);
		public void write (Valadoc.Langlet langlet, void* ptr);
		public bool is_static { get; }
	}
	[CCode (cheader_filename = "valadoc-1.0.h")]
	public abstract class DocElement : GLib.Object {
		public DocElement ();
		public abstract bool write (void* res, int max, int index);
	}
	[CCode (cheader_filename = "valadoc-1.0.h")]
	public abstract class Doclet : GLib.Object {
		public Doclet ();
		public abstract void initialisation (Valadoc.Settings settings, Valadoc.Tree tree);
		public abstract void visit_class (Valadoc.Class cl);
		public abstract void visit_constant (Valadoc.Constant constant, Valadoc.ConstantHandler parent);
		public abstract void visit_delegate (Valadoc.Delegate del);
		public abstract void visit_enum (Valadoc.Enum en);
		public abstract void visit_enum_value (Valadoc.EnumValue enval);
		public abstract void visit_error_code (Valadoc.ErrorCode errcode);
		public abstract void visit_error_domain (Valadoc.ErrorDomain errdom);
		public abstract void visit_field (Valadoc.Field field, Valadoc.FieldHandler parent);
		public abstract void visit_interface (Valadoc.Interface iface);
		public abstract void visit_method (Valadoc.Method m, Valadoc.MethodHandler parent);
		public abstract void visit_namespace (Valadoc.Namespace ns);
		public abstract void visit_package (Valadoc.Package pkg);
		public abstract void visit_property (Valadoc.Property prop);
		public abstract void visit_signal (Valadoc.Signal sig);
		public abstract void visit_struct (Valadoc.Struct stru);
	}
	[CCode (cheader_filename = "valadoc-1.0.h")]
	public class DocumentationTree : GLib.Object {
		public DocumentationTree ();
		public void add_brief (Gee.ArrayList<Valadoc.DocElement> content);
		public void add_description (Gee.ArrayList<Valadoc.DocElement> content);
		public void add_taglet (Valadoc.MainTaglet taglet);
		public void add_taglets (Gee.Collection<Valadoc.MainTaglet> taglets);
		public Gee.ReadOnlyCollection<Valadoc.DocElement> get_brief ();
		public Gee.ReadOnlyCollection<Valadoc.DocElement> get_description ();
		public bool write_brief (void* res);
		public bool write_content (void* res);
	}
	[CCode (cheader_filename = "valadoc-1.0.h")]
	public abstract class DocumentedElement : Valadoc.Basic, Valadoc.Documentation {
		public DocumentedElement ();
		public string? full_name ();
		protected void parse_comment_helper (Valadoc.Parser docparser);
		public Valadoc.DocumentationTree? documentation { get; set; }
		public int line { get; }
		public virtual string? name { owned get; }
		public Valadoc.Namespace? nspace { get; }
		public Valadoc.Package? package { get; }
		protected Vala.Comment vcomment { get; set; }
	}
	[CCode (cheader_filename = "valadoc-1.0.h")]
	public class Enum : Valadoc.DocumentedElement, Valadoc.SymbolAccessibility, Valadoc.Visitable, Valadoc.MethodHandler {
		public Enum (Valadoc.Settings settings, Vala.Enum venum, Valadoc.EnumHandler parent, Valadoc.Tree head);
		public string? get_cname ();
		public Gee.ReadOnlyCollection<Valadoc.EnumValue> get_enum_values ();
		public void visit (Valadoc.Doclet doclet);
		public void visit_enum_values (Valadoc.Doclet doclet);
		public void write (Valadoc.Langlet langlet, void* ptr);
	}
	[CCode (cheader_filename = "valadoc-1.0.h")]
	public class EnumValue : Valadoc.DocumentedElement {
		public EnumValue (Valadoc.Settings settings, Vala.EnumValue venval, Valadoc.Enum parent, Valadoc.Tree head);
		public string get_cname ();
		public bool is_venumvalue (Vala.EnumValue venval);
		public void parse_comment (Valadoc.Parser docparser);
		public void visit (Valadoc.Doclet doclet);
		public void write (Valadoc.Langlet langlet, void* ptr);
	}
	[CCode (cheader_filename = "valadoc-1.0.h")]
	public class ErrorCode : Valadoc.DocumentedElement {
		public ErrorCode (Valadoc.Settings settings, Vala.ErrorCode verrcode, Valadoc.ErrorDomain parent, Valadoc.Tree head);
		public string get_cname ();
		public bool is_verrorcode (Vala.ErrorCode verrcode);
		public void parse_comment (Valadoc.Parser docparser);
		public void visit (Valadoc.Doclet doclet);
		public void write (Valadoc.Langlet langlet, void* ptr);
	}
	[CCode (cheader_filename = "valadoc-1.0.h")]
	public class ErrorDomain : Valadoc.DocumentedElement, Valadoc.SymbolAccessibility, Valadoc.Visitable, Valadoc.MethodHandler {
		public ErrorDomain (Valadoc.Settings settings, Vala.ErrorDomain verrdom, Valadoc.ErrorDomainHandler parent, Valadoc.Tree head);
		public string? get_cname ();
		public Gee.ReadOnlyCollection<Valadoc.ErrorCode> get_error_code_list ();
		public void visit (Valadoc.Doclet doclet);
		public void visit_error_codes (Valadoc.Doclet doclet);
		public void write (Valadoc.Langlet langlet, void* ptr);
	}
	[CCode (cheader_filename = "valadoc-1.0.h")]
	public class ErrorReporter : GLib.Object {
		public ErrorReporter ();
		public void error (string file, long line, long startpos, long endpos, string errline, string msg);
		public void simple_error (string msg);
		public void simple_warning (string msg);
		public void warning (string file, long line, long startpos, long endpos, string errline, string msg);
		public int errors { get; }
		public GLib.FileStream stream { get; set; }
		public Vala.Report? vreporter { get; set; }
		public int warnings { get; }
	}
	[CCode (cheader_filename = "valadoc-1.0.h")]
	public class Field : Valadoc.DocumentedElement, Valadoc.SymbolAccessibility, Valadoc.ReturnTypeHandler, Valadoc.Visitable {
		public Field (Valadoc.Settings settings, Vala.Field vfield, Valadoc.FieldHandler parent, Valadoc.Tree head);
		public string? get_cname ();
		public void visit (Valadoc.Doclet doclet, Valadoc.FieldHandler? parent);
		public void write (Valadoc.Langlet langlet, void* ptr, Valadoc.FieldHandler parent);
		public bool is_static { get; }
		public bool is_volatile { get; }
	}
	[CCode (cheader_filename = "valadoc-1.0.h")]
	public class FormalParameter : Valadoc.Basic, Valadoc.ReturnTypeHandler {
		public FormalParameter (Valadoc.Settings settings, Vala.FormalParameter vformalparam, Valadoc.Basic parent, Valadoc.Tree head);
		public void write (Valadoc.Langlet langlet, void* ptr);
		public bool ellipsis { get; }
		public bool has_default_value { get; }
		public bool is_out { get; }
		public bool is_ref { get; }
		public string? name { owned get; }
	}
	[CCode (cheader_filename = "valadoc-1.0.h")]
	public abstract class HeadlineDocElement : Valadoc.DocElement {
		public HeadlineDocElement ();
		public abstract bool parse (string title, int lvl);
	}
	[CCode (cheader_filename = "valadoc-1.0.h")]
	public abstract class HighlightedDocElement : Valadoc.DocElement {
		public HighlightedDocElement ();
		public abstract bool parse (Gee.ArrayList<Valadoc.DocElement> content);
	}
	[CCode (cheader_filename = "valadoc-1.0.h")]
	public abstract class ImageDocElement : Valadoc.DocElement {
		public ImageDocElement ();
		public abstract bool parse (Valadoc.Settings settings, Valadoc.Documentation pos, owned string path, owned string alt);
	}
	[CCode (cheader_filename = "valadoc-1.0.h")]
	public abstract class InlineTaglet : Valadoc.Taglet {
		public InlineTaglet ();
		public abstract bool parse (Valadoc.Settings settings, Valadoc.Tree tree, Valadoc.Documentation self, string content, ref Valadoc.ErrorLevel errlvl, out string? errmsg);
		public abstract string to_string ();
	}
	[CCode (cheader_filename = "valadoc-1.0.h")]
	public class Interface : Valadoc.DocumentedElement, Valadoc.SymbolAccessibility, Valadoc.Visitable, Valadoc.SignalHandler, Valadoc.PropertyHandler, Valadoc.FieldHandler, Valadoc.TemplateParameterListHandler, Valadoc.MethodHandler, Valadoc.DelegateHandler, Valadoc.EnumHandler, Valadoc.StructHandler, Valadoc.ClassHandler {
		public Interface (Valadoc.Settings settings, Vala.Interface vinterface, Valadoc.InterfaceHandler parent, Valadoc.Tree head);
		public string? get_cname ();
		public Gee.Collection<Valadoc.Interface> get_implemented_interface_list ();
		public void visit (Valadoc.Doclet doclet);
		public void write (Valadoc.Langlet langlet, void* ptr);
		protected Valadoc.Class? base_type { get; set; }
	}
	[CCode (cheader_filename = "valadoc-1.0.h")]
	public abstract class ItalicDocElement : Valadoc.HighlightedDocElement {
		public ItalicDocElement ();
	}
	[CCode (cheader_filename = "valadoc-1.0.h")]
	public abstract class Langlet : GLib.Object {
		public Langlet ();
		public abstract void write_array (Valadoc.Array param, void* ptr, Valadoc.DocumentedElement pos);
		public abstract void write_class (Valadoc.Class cl, void* ptr);
		public abstract void write_constant (Valadoc.Constant constant, Valadoc.ConstantHandler parent, void* ptr);
		public abstract void write_delegate (Valadoc.Delegate del, void* ptr);
		public abstract void write_enum (Valadoc.Enum en, void* ptr);
		public abstract void write_enum_value (Valadoc.EnumValue enval, void* ptr);
		public abstract void write_error_code (Valadoc.ErrorCode errcode, void* ptr);
		public abstract void write_error_domain (Valadoc.ErrorDomain errdom, void* ptr);
		public abstract void write_field (Valadoc.Field field, Valadoc.FieldHandler pos, void* ptr);
		public abstract void write_file (Valadoc.Package file, void* ptr);
		public abstract void write_formal_parameter (Valadoc.FormalParameter param, void* ptr);
		public abstract void write_inheritance_list (Valadoc.DocumentedElement dtype, void* ptr);
		public abstract void write_interface (Valadoc.Interface iface, void* ptr);
		public abstract void write_method (void* ptr, Valadoc.Method m, Valadoc.MethodHandler pos);
		public abstract void write_namespace (Valadoc.Namespace ns, void* ptr);
		public abstract void write_parameter_list (Valadoc.ParameterListHandler thandler, void* ptr);
		public abstract void write_pointer (Valadoc.Pointer param, void* ptr, Valadoc.DocumentedElement pos);
		public abstract void write_property (Valadoc.Property prop, void* ptr);
		public abstract void write_property_accessor (Valadoc.PropertyAccessor propac, void* ptr);
		public abstract void write_signal (Valadoc.Signal sig, void* ptr);
		public abstract void write_struct (Valadoc.Struct stru, void* ptr);
		public abstract void write_template_parameters (Valadoc.TemplateParameterListHandler thandler, void* ptr);
		public abstract void write_type_parameter (Valadoc.TypeParameter param, void* ptr);
		public abstract void write_type_reference (Valadoc.TypeReference tref, void* ptr);
	}
	[CCode (cheader_filename = "valadoc-1.0.h")]
	public abstract class LinkDocElement : Valadoc.DocElement {
		public LinkDocElement ();
		public abstract bool parse (Valadoc.Settings settings, Valadoc.Tree tree, Valadoc.Documentation pos, owned string link, owned string desc);
	}
	[CCode (cheader_filename = "valadoc-1.0.h")]
	public abstract class ListDocElement : Valadoc.DocElement {
		public ListDocElement ();
		public abstract bool parse (Valadoc.ListType type, Gee.ArrayList<Valadoc.ListEntryDocElement> entries);
	}
	[CCode (cheader_filename = "valadoc-1.0.h")]
	public abstract class ListEntryDocElement : Valadoc.DocElement {
		public ListEntryDocElement ();
		public abstract bool parse (Valadoc.ListType type, long lvl, Gee.ArrayList<Valadoc.DocElement> content);
	}
	[CCode (cheader_filename = "valadoc-1.0.h")]
	public abstract class MainTaglet : Valadoc.Taglet {
		public MainTaglet ();
		protected string? get_data_type (Valadoc.DocumentedElement me);
		public abstract bool parse (Valadoc.Settings settings, Valadoc.Tree tree, Valadoc.DocumentedElement me, Gee.Collection<Valadoc.DocElement> content, ref Valadoc.ErrorLevel errlvl, out string errmsg);
		public abstract bool write_block_end (void* res);
		public abstract bool write_block_start (void* res);
		public virtual int order { get; }
	}
	[CCode (cheader_filename = "valadoc-1.0.h")]
	public class Method : Valadoc.DocumentedElement, Valadoc.ParameterListHandler, Valadoc.ExceptionHandler, Valadoc.TemplateParameterListHandler, Valadoc.SymbolAccessibility, Valadoc.ReturnTypeHandler, Valadoc.Visitable {
		public Method (Valadoc.Settings settings, Vala.Method vmethod, Valadoc.MethodHandler parent, Valadoc.Tree head);
		public string? get_cname ();
		public void visit (Valadoc.Doclet doclet, Valadoc.MethodHandler in_type);
		public void write (Valadoc.Langlet langlet, void* ptr, Valadoc.MethodHandler parent);
		public Valadoc.Method? base_method { get; set; }
		public bool is_abstract { get; }
		public bool is_constructor { get; }
		public bool is_inline { get; }
		public bool is_override { get; }
		public bool is_static { get; }
		public bool is_virtual { get; }
		public bool is_yields { get; }
		public override string? name { owned get; }
	}
	[CCode (cheader_filename = "valadoc-1.0.h")]
	public class ModuleLoader : GLib.Object {
		public GLib.Type bold;
		public GLib.Type center;
		public Valadoc.Doclet doclet;
		public GLib.Type headline;
		public GLib.Type image;
		public GLib.Type italic;
		public GLib.Type link;
		public GLib.Type list;
		public GLib.Type list_element;
		public GLib.Type notification;
		public GLib.Type paragraph;
		public GLib.Type right;
		public GLib.Type source;
		public GLib.Type source_inline;
		public GLib.Type string;
		public GLib.Type table;
		public GLib.Type table_cell;
		public Gee.HashMap<global::string,GLib.Type> taglets;
		public GLib.Type underline;
		public ModuleLoader ();
		public bool load (global::string path);
	}
	[CCode (cheader_filename = "valadoc-1.0.h")]
	public class Namespace : Valadoc.DocumentedElement, Valadoc.MethodHandler, Valadoc.FieldHandler, Valadoc.NamespaceHandler, Valadoc.ErrorDomainHandler, Valadoc.EnumHandler, Valadoc.ClassHandler, Valadoc.StructHandler, Valadoc.InterfaceHandler, Valadoc.DelegateHandler, Valadoc.ConstantHandler {
		public Namespace (Valadoc.Settings settings, Vala.Namespace vnspace, Valadoc.NamespaceHandler parent, Valadoc.Tree head);
		public void visit (Valadoc.Doclet doclet);
		public void write (Valadoc.Langlet langlet, void* ptr);
		public Vala.Namespace vnspace { get; set; }
	}
	[CCode (cheader_filename = "valadoc-1.0.h")]
	public abstract class NotificationDocElement : Valadoc.DocElement {
		public NotificationDocElement ();
		public abstract bool parse (Gee.ArrayList<Valadoc.DocElement> content);
	}
	[CCode (cheader_filename = "valadoc-1.0.h")]
	public class Package : Valadoc.DocumentedElement, Valadoc.NamespaceHandler {
		public Package (Valadoc.Settings settings, Vala.SourceFile vfile, Valadoc.Tree head, bool is_package = false);
		public Gee.ReadOnlyCollection<Valadoc.Package> get_dependency_list ();
		public Gee.ReadOnlyCollection<Valadoc.Package> get_full_dependency_list ();
		public bool is_visitor_accessible ();
		public void visit (Valadoc.Doclet doclet);
		public Package.with_name (Valadoc.Settings settings, Vala.SourceFile vfile, string name, Valadoc.Tree head, bool is_package = false);
		public void write (Valadoc.Langlet langlet, void* ptr);
		public bool is_package { get; set; }
		public override string? name { owned get; }
	}
	[CCode (cheader_filename = "valadoc-1.0.h")]
	public abstract class ParagraphDocElement : Valadoc.DocElement {
		public ParagraphDocElement ();
		public abstract bool parse (Gee.ArrayList<Valadoc.DocElement> paragraph);
	}
	[CCode (cheader_filename = "valadoc-1.0.h")]
	public class Parser : GLib.Object {
		public Parser (Valadoc.Settings settings, Valadoc.ErrorReporter reporter, Valadoc.Tree tree, Valadoc.ModuleLoader modules);
		public static bool is_documentation (string cmnt);
		public bool is_inherit_doc (Valadoc.DocumentedElement self);
		public Valadoc.DocumentationTree? parse (Valadoc.DocumentedElement self);
		public unowned Valadoc.WikiPage parse_wikipage (Valadoc.WikiPage wikipage);
	}
	[CCode (cheader_filename = "valadoc-1.0.h")]
	public class Pointer : Valadoc.Basic {
		public Pointer (Valadoc.Settings settings, Vala.PointerType vtyperef, Valadoc.Basic parent, Valadoc.Tree head);
		public void set_type_references ();
		public void write (Valadoc.Langlet langlet, void* ptr, Valadoc.DocumentedElement parent);
		public Valadoc.Basic data_type { get; set; }
	}
	[CCode (cheader_filename = "valadoc-1.0.h")]
	public class Property : Valadoc.DocumentedElement, Valadoc.SymbolAccessibility, Valadoc.ReturnTypeHandler, Valadoc.Visitable {
		public Property (Valadoc.Settings settings, Vala.Property vproperty, Valadoc.PropertyHandler parent, Valadoc.Tree head);
		public bool equals (Valadoc.Property p);
		public string? get_cname ();
		public bool is_vproperty (Vala.Property vprop);
		public void parse_comment (Valadoc.Parser docparser);
		public void visit (Valadoc.Doclet doclet);
		public void write (Valadoc.Langlet langlet, void* ptr);
		public Valadoc.Property base_property { get; set; }
		public Valadoc.PropertyAccessor getter { get; set; }
		public bool is_abstract { get; }
		public bool is_override { get; }
		public bool is_virtual { get; }
		public Valadoc.PropertyAccessor setter { get; set; }
	}
	[CCode (cheader_filename = "valadoc-1.0.h")]
	public class PropertyAccessor : GLib.Object {
		public PropertyAccessor (Valadoc.Settings settings, Vala.PropertyAccessor vpropacc, Valadoc.Property parent, Valadoc.Tree head);
		public void write (Valadoc.Langlet langlet, void* ptr);
		public Valadoc.Tree head { get; set; }
		public bool is_construct { get; }
		public bool is_get { get; }
		public bool is_internal { get; }
		public bool is_owned { get; }
		public bool is_private { get; }
		public bool is_protected { get; }
		public bool is_public { get; }
		public bool is_set { get; }
		public Valadoc.Property parent { get; set; }
		public Valadoc.Settings settings { get; set; }
		public Valadoc.Tree tree { get; set; }
	}
	[CCode (cheader_filename = "valadoc-1.0.h")]
	public abstract class RightAlignedDocElement : Valadoc.ContentPositionDocElement {
		public RightAlignedDocElement ();
	}
	[CCode (cheader_filename = "valadoc-1.0.h")]
	public class Settings : GLib.Object {
		public bool _internal;
		public bool _private;
		public bool _protected;
		public bool add_inherited;
		public string? basedir;
		public string[] defines;
		public bool deprecated;
		public string? directory;
		public bool disable_dbus_transformation;
		public bool enable_checking;
		public bool experimental;
		public bool non_null_experimental;
		public string path;
		public string pkg_name;
		public string pkg_version;
		public string? profile;
		public string[] vapi_directories;
		public bool verbose;
		public string wiki_directory;
		public bool with_deps;
		public Settings ();
	}
	[CCode (cheader_filename = "valadoc-1.0.h")]
	public class Signal : Valadoc.DocumentedElement, Valadoc.ParameterListHandler, Valadoc.SymbolAccessibility, Valadoc.ReturnTypeHandler, Valadoc.Visitable {
		public Signal (Valadoc.Settings settings, Vala.Signal vsignal, Valadoc.SignalHandler parent, Valadoc.Tree head);
		public string? get_cname ();
		public void visit (Valadoc.Doclet doclet);
		public void write (Valadoc.Langlet langlet, void* ptr);
		public bool is_virtual { get; }
	}
	[CCode (cheader_filename = "valadoc-1.0.h")]
	public abstract class SourceCodeDocElement : Valadoc.DocElement {
		public SourceCodeDocElement ();
		public abstract bool parse (string src, Valadoc.Language lang);
	}
	[CCode (cheader_filename = "valadoc-1.0.h")]
	public abstract class StringTaglet : Valadoc.Taglet {
		public StringTaglet ();
		public abstract bool parse (string content);
		public string content { get; set; }
	}
	[CCode (cheader_filename = "valadoc-1.0.h")]
	public class Struct : Valadoc.DocumentedElement, Valadoc.SymbolAccessibility, Valadoc.Visitable, Valadoc.MethodHandler, Valadoc.ConstructionMethodHandler, Valadoc.FieldHandler, Valadoc.ConstantHandler, Valadoc.TemplateParameterListHandler {
		public Struct (Valadoc.Settings settings, Vala.Struct vstruct, Valadoc.StructHandler parent, Valadoc.Tree head);
		public string? get_cname ();
		public void visit (Valadoc.Doclet doclet);
		public void write (Valadoc.Langlet langlet, void* ptr);
		protected Valadoc.Struct? base_type { get; set; }
	}
	[CCode (cheader_filename = "valadoc-1.0.h")]
	public abstract class TableCellDocElement : Valadoc.DocElement {
		public TableCellDocElement ();
		public abstract void parse (Valadoc.TextPosition pos, Valadoc.TextVerticalPosition hpos, int size, int dsize, Gee.ArrayList<Valadoc.DocElement> content);
	}
	[CCode (cheader_filename = "valadoc-1.0.h")]
	public abstract class TableDocElement : Valadoc.DocElement {
		public TableDocElement ();
		public abstract void parse (Gee.ArrayList<Gee.ArrayList<Valadoc.TableCellDocElement>> cells);
	}
	[CCode (cheader_filename = "valadoc-1.0.h")]
	public abstract class Taglet : Valadoc.DocElement {
		public Taglet ();
	}
	[CCode (cheader_filename = "valadoc-1.0.h")]
	public class Tree : Vala.CodeVisitor {
		public Tree (Valadoc.ErrorReporter reporter, Valadoc.Settings settings);
		public void add_depencies (string[] packages);
		public void add_documented_file (string[] sources);
		public bool create_tree ();
		public Gee.ReadOnlyCollection<Valadoc.Package> get_package_list ();
		public void parse_comments (Valadoc.Parser docparser);
		public Valadoc.DocumentedElement? search_symbol_str (Valadoc.DocumentedElement? element, string symname);
		public void visit (Valadoc.Doclet doclet);
		public override void visit_class (Vala.Class vcl);
		public override void visit_constant (Vala.Constant vc);
		public override void visit_delegate (Vala.Delegate vd);
		public override void visit_enum (Vala.Enum venum);
		public override void visit_error_domain (Vala.ErrorDomain verrdom);
		public override void visit_field (Vala.Field vf);
		public override void visit_interface (Vala.Interface viface);
		public override void visit_method (Vala.Method vm);
		public override void visit_namespace (Vala.Namespace vns);
		public override void visit_struct (Vala.Struct vstru);
		public Valadoc.WikiPageTree? wikitree { get; set; }
	}
	[CCode (cheader_filename = "valadoc-1.0.h")]
	public class TypeParameter : Valadoc.Basic, Valadoc.ReturnTypeHandler {
		public TypeParameter (Valadoc.Settings settings, Vala.TypeParameter vtypeparam, Valadoc.Basic parent, Valadoc.Tree head);
		public bool is_vtypeparam (Vala.TypeParameter vtypeparam);
		public void write (Valadoc.Langlet langlet, void* ptr);
		public string? name { owned get; }
	}
	[CCode (cheader_filename = "valadoc-1.0.h")]
	public class TypeReference : Valadoc.Basic {
		public TypeReference (Valadoc.Settings settings, Vala.DataType? vtyperef, Valadoc.Basic parent, Valadoc.Tree head);
		public Gee.ReadOnlyCollection<Valadoc.TypeReference> get_type_arguments ();
		public void write (Valadoc.Langlet langlet, void* ptr);
		public Valadoc.Basic? data_type { get; set; }
		public bool is_dynamic { get; }
		public bool is_nullable { get; }
		public bool is_owned { get; }
		public bool is_unowned { get; }
		public bool is_weak { get; }
		public bool pass_ownership { get; }
		public string type_name { owned get; }
	}
	[CCode (cheader_filename = "valadoc-1.0.h")]
	public abstract class UnderlinedDocElement : Valadoc.HighlightedDocElement {
		public UnderlinedDocElement ();
	}
	[CCode (cheader_filename = "valadoc-1.0.h")]
	public class WikiPage : GLib.Object, Valadoc.Documentation {
		public WikiPage (string name, string path);
		public void add_content (Gee.ArrayList<Valadoc.DocElement> content);
		public bool parse (Valadoc.Parser docparser);
		public void read () throws GLib.FileError;
		public bool write (void* res);
		public string documentation_str { get; set; }
		public string name { get; set; }
		public string path { get; set; }
	}
	[CCode (cheader_filename = "valadoc-1.0.h")]
	public class WikiPageTree : GLib.Object {
		public WikiPageTree (Valadoc.ErrorReporter reporter, Valadoc.Settings settings);
		public void create_tree (Valadoc.Parser docparser) throws GLib.FileError;
		public Gee.Collection<Valadoc.WikiPage> get_pages ();
		public Valadoc.WikiPage? search (string name);
	}
	[CCode (cheader_filename = "valadoc-1.0.h")]
	public interface ClassHandler : Valadoc.Basic {
		public void add_classes (Gee.Collection<Vala.Class> vclasses);
		protected Valadoc.Class? find_vclass (Vala.Class vcl);
		public Gee.ReadOnlyCollection<Valadoc.Class> get_class_list ();
		protected void parse_class_comments (Valadoc.Parser docparser);
		protected Valadoc.DocumentedElement? search_class (string[] @params, int pos);
		protected Valadoc.DocumentedElement? search_class_vala (Gee.ArrayList<Vala.Symbol> @params, int pos);
		protected void set_class_type_references ();
		public void visit_classes (Valadoc.Doclet doclet);
		protected abstract Gee.ArrayList<Valadoc.Class> classes { get; set; }
	}
	[CCode (cheader_filename = "valadoc-1.0.h")]
	public interface ConstantHandler : Valadoc.Basic {
		public Gee.ReadOnlyCollection<Valadoc.Constant> get_constant_list ();
		protected Valadoc.DocumentedElement? search_constant_vala (Gee.ArrayList<Vala.Symbol> @params, int pos);
		public void visit_constants (Valadoc.Doclet doclet);
		protected abstract Gee.ArrayList<Valadoc.Constant> constants { get; set; }
	}
	[CCode (cheader_filename = "valadoc-1.0.h")]
	public interface ConstructionMethodHandler : Valadoc.Basic, Valadoc.MethodHandler {
		protected void add_construction_method (Vala.CreationMethod vm);
		protected void add_methods_and_construction_methods (Gee.Collection<Vala.Method> vmethods);
		public Gee.ReadOnlyCollection<Valadoc.Method> get_construction_method_list ();
		protected void parse_construction_method_comments (Valadoc.Parser docparser);
		protected Valadoc.DocumentedElement? search_construction_method (string[] @params, int pos);
		protected Valadoc.DocumentedElement? search_construction_method_vala (Gee.ArrayList<Vala.Symbol> @params, int pos);
		protected void set_construction_method_references ();
		public void visit_construction_methods (Valadoc.Doclet doclet);
		protected abstract Gee.ArrayList<Valadoc.Method> construction_methods { get; set; }
	}
	[CCode (cheader_filename = "valadoc-1.0.h")]
	public interface DelegateHandler : Valadoc.Basic {
		public void add_delegate (Vala.Delegate vdel);
		public void add_delegates (Gee.Collection<Vala.Delegate> vdels);
		public Gee.Collection<Valadoc.Delegate> get_delegate_list ();
		public void parse_delegate_comments (Valadoc.Parser docparser);
		protected Valadoc.DocumentedElement? search_delegate (string[] @params, int pos);
		protected Valadoc.DocumentedElement? search_delegate_vala (Gee.ArrayList<Vala.Symbol> @params, int pos);
		public void set_delegate_type_references ();
		public void visit_delegates (Valadoc.Doclet doclet);
		protected abstract Gee.ArrayList<Valadoc.Delegate> delegates { get; set; }
	}
	[CCode (cheader_filename = "valadoc-1.0.h")]
	public interface Documentation : GLib.Object {
		public abstract string? get_filename ();
	}
	[CCode (cheader_filename = "valadoc-1.0.h")]
	public interface EnumHandler : Valadoc.Basic {
		public void add_enum (Vala.Enum venum);
		public void add_enums (Gee.Collection<Vala.Enum> venums);
		public Gee.Collection<Valadoc.Enum> get_enum_list ();
		protected void parse_enum_comments (Valadoc.Parser docparser);
		protected Valadoc.DocumentedElement? search_enum (string[] @params, int pos);
		protected Valadoc.DocumentedElement? search_enum_vala (Gee.ArrayList<Vala.Symbol> @params, int pos);
		protected void set_enum_type_references ();
		public void visit_enums (Valadoc.Doclet doclet);
		protected abstract Gee.ArrayList<Valadoc.Enum> enums { get; set; }
	}
	[CCode (cheader_filename = "valadoc-1.0.h")]
	public interface ErrorDomainHandler : Valadoc.Basic {
		public void add_error_domain (Vala.ErrorDomain verrdom);
		public void add_error_domains (Gee.Collection<Vala.ErrorDomain> verrdoms);
		public Gee.Collection<Valadoc.ErrorDomain> get_error_domain_list ();
		protected void parse_errordomain_comments (Valadoc.Parser docparser);
		protected Valadoc.DocumentedElement? search_error_domain (string[] @params, int pos);
		protected Valadoc.DocumentedElement? search_error_domain_vala (Gee.ArrayList<Vala.Symbol> @params, int pos);
		protected void set_errordomain_type_referenes ();
		public void visit_error_domains (Valadoc.Doclet doclet);
		protected abstract Gee.ArrayList<Valadoc.ErrorDomain> errdoms { get; set; }
	}
	[CCode (cheader_filename = "valadoc-1.0.h")]
	public interface ExceptionHandler : Valadoc.Basic {
		public void add_exception_list (Gee.Collection<Vala.DataType> vexceptions);
		public Gee.ReadOnlyCollection<Valadoc.DocumentedElement> get_error_domains ();
		protected abstract Gee.ArrayList<Valadoc.DocumentedElement> err_domains { get; set; }
	}
	[CCode (cheader_filename = "valadoc-1.0.h")]
	public interface FieldHandler : Valadoc.Basic {
		public Gee.ReadOnlyCollection<Valadoc.Field> get_field_list ();
		protected Valadoc.DocumentedElement? search_field_vala (Gee.ArrayList<Vala.Symbol> @params, int pos);
		public void visit_fields (Valadoc.Doclet doclet);
		protected abstract Gee.ArrayList<Valadoc.Field> fields { get; set; }
	}
	[CCode (cheader_filename = "valadoc-1.0.h")]
	public interface InterfaceHandler : Valadoc.Basic {
		protected void add_interfaces (Gee.Collection<Vala.Interface> vifaces);
		public Gee.Collection<Valadoc.Interface> get_interface_list ();
		protected void parse_interface_comments (Valadoc.Parser docparser);
		protected Valadoc.DocumentedElement? search_interface (string[] @params, int pos);
		protected Valadoc.DocumentedElement? search_interface_vala (Gee.ArrayList<Vala.Symbol> @params, int pos);
		protected void set_interface_type_references ();
		public void visit_interfaces (Valadoc.Doclet doclet);
		protected abstract Gee.ArrayList<Valadoc.Interface> interfaces { get; set; }
	}
	[CCode (cheader_filename = "valadoc-1.0.h")]
	public interface MethodHandler : Valadoc.Basic {
		protected void add_method (Vala.Method vmethod);
		protected void add_methods (Gee.Collection<Vala.Method> vmethods);
		public Gee.ReadOnlyCollection<Valadoc.Method> get_method_list ();
		protected Valadoc.DocumentedElement? search_method_vala (Gee.ArrayList<Vala.Symbol> @params, int pos);
		public void visit_methods (Valadoc.Doclet doclet);
		protected abstract Gee.ArrayList<Valadoc.Method> methods { get; set; }
	}
	[CCode (cheader_filename = "valadoc-1.0.h")]
	public interface NamespaceHandler : Valadoc.Basic {
		protected Valadoc.Namespace get_namespace (Vala.Symbol node);
		public Gee.ReadOnlyCollection<Valadoc.Namespace> get_namespace_list ();
		public void visit_namespaces (Valadoc.Doclet doclet);
		public abstract Gee.ArrayList<Valadoc.Namespace> namespaces { get; set; }
	}
	[CCode (cheader_filename = "valadoc-1.0.h")]
	public interface ParameterListHandler : Valadoc.Basic {
		protected void add_parameter_list (Gee.Collection<Vala.FormalParameter> vparams);
		public Gee.ReadOnlyCollection<Valadoc.FormalParameter> get_parameter_list ();
		protected abstract Gee.ArrayList<Valadoc.FormalParameter> param_list { get; set; }
	}
	[CCode (cheader_filename = "valadoc-1.0.h")]
	public interface PropertyHandler : Valadoc.Basic {
		protected void add_properties (Gee.Collection<Vala.Property> vproperties);
		public Gee.ReadOnlyCollection<Valadoc.Property> get_property_list ();
		protected bool is_overwritten_property (Valadoc.Property prop);
		protected void parse_property_comments (Valadoc.Parser docparser);
		protected Valadoc.DocumentedElement? search_property (string[] @params, int pos);
		protected Valadoc.DocumentedElement? search_property_vala (Gee.ArrayList<Vala.Symbol> @params, int pos);
		protected void set_property_type_references ();
		public void visit_properties (Valadoc.Doclet doclet);
		protected abstract Gee.ArrayList<Valadoc.Property> properties { get; set; }
	}
	[CCode (cheader_filename = "valadoc-1.0.h")]
	public interface ReturnTypeHandler : Valadoc.Basic {
		public abstract Valadoc.TypeReference? type_reference { get; set; }
	}
	[CCode (cheader_filename = "valadoc-1.0.h")]
	public interface SignalHandler : Valadoc.Basic {
		public Gee.ReadOnlyCollection<Valadoc.Signal> get_signal_list ();
		protected Valadoc.DocumentedElement? search_signal (string[] @params, int pos);
		protected Valadoc.DocumentedElement? search_signal_vala (Gee.ArrayList<Vala.Symbol> @params, int pos);
		public void visit_signals (Valadoc.Doclet doclet);
		protected abstract Gee.ArrayList<Valadoc.Signal> signals { get; set; }
	}
	[CCode (cheader_filename = "valadoc-1.0.h")]
	public interface StructHandler : Valadoc.Basic {
		public void add_struct (Vala.Struct vstru);
		public void add_structs (Gee.Collection<Vala.Struct> vstructs);
		public Gee.Collection<Valadoc.Struct> get_struct_list ();
		protected void parse_struct_comments (Valadoc.Parser docparser);
		protected Valadoc.DocumentedElement? search_struct (string[] @params, int pos);
		protected Valadoc.DocumentedElement? search_struct_vala (Gee.ArrayList<Vala.Symbol> @params, int pos);
		protected void set_struct_type_references ();
		public void visit_structs (Valadoc.Doclet doclet);
		protected abstract Gee.ArrayList<Valadoc.Struct> structs { get; set; }
	}
	[CCode (cheader_filename = "valadoc-1.0.h")]
	public interface SymbolAccessibility : Valadoc.Basic {
		public bool is_internal { get; }
		public bool is_private { get; }
		public bool is_protected { get; }
		public bool is_public { get; }
	}
	[CCode (cheader_filename = "valadoc-1.0.h")]
	public interface TemplateParameterListHandler : Valadoc.Basic {
		public Valadoc.TypeParameter? find_vtemplateparameter (Vala.GenericType vttype);
		public Gee.ReadOnlyCollection<Valadoc.TypeParameter> get_template_param_list ();
		protected abstract Gee.ArrayList<Valadoc.TypeParameter> template_param_lst { get; set; }
	}
	[CCode (cheader_filename = "valadoc-1.0.h")]
	public interface Visitable : Valadoc.Basic, Valadoc.SymbolAccessibility {
		protected bool is_type_visitor_accessible (Valadoc.Basic element);
		public bool is_visitor_accessible ();
	}
	[CCode (cprefix = "VALADOC_ERROR_LEVEL_", cheader_filename = "valadoc-1.0.h")]
	public enum ErrorLevel {
		ASSUMPTION,
		WARNING,
		ERROR
	}
	[CCode (cprefix = "VALADOC_IMAGE_DOC_ELEMENT_POSITION_", cheader_filename = "valadoc-1.0.h")]
	public enum ImageDocElementPosition {
		NEUTRAL,
		MIDDLE,
		RIGHT,
		LEFT
	}
	[CCode (cprefix = "VALADOC_LANGUAGE_", cheader_filename = "valadoc-1.0.h")]
	public enum Language {
		GENIE,
		VALA,
		C
	}
	[CCode (cprefix = "VALADOC_LIST_TYPE_", cheader_filename = "valadoc-1.0.h")]
	public enum ListType {
		UNSORTED,
		SORTED
	}
	[CCode (cprefix = "VALADOC_TEXT_POSITION_", cheader_filename = "valadoc-1.0.h")]
	public enum TextPosition {
		LEFT,
		RIGHT,
		CENTER
	}
	[CCode (cprefix = "VALADOC_TEXT_VERTICAL_POSITION_", cheader_filename = "valadoc-1.0.h")]
	public enum TextVerticalPosition {
		TOP,
		MIDDLE,
		BOTTOM
	}
	[CCode (cheader_filename = "valadoc-1.0.h", has_target = false)]
	public delegate GLib.Type DocletRegisterFunction ();
	[CCode (cheader_filename = "valadoc-1.0.h", has_target = false)]
	public delegate void TagletRegisterFunction (Valadoc.ModuleLoader loader);
	[CCode (cheader_filename = "valadoc-1.0.h")]
	public static bool copy_directory (string src, string dest);
	[CCode (cheader_filename = "valadoc-1.0.h")]
	public static bool copy_file (string src, string dest);
	[CCode (cheader_filename = "valadoc-1.0.h")]
	public static string realpath (string name);
}
[CCode (cheader_filename = "valadoc-1.0.h")]
public static Valadoc.Class glib_error;
