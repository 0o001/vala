/* valadoc-1.0.vapi generated by valac, do not modify. */

[CCode (cprefix = "Valadoc", lower_case_cprefix = "valadoc_")]
namespace Valadoc {
	[CCode (cprefix = "ValadocApi", lower_case_cprefix = "valadoc_api_")]
	namespace Api {
		[CCode (cheader_filename = "valadoc-1.0.h")]
		public abstract class Item : GLib.Object {
			public Item ();
			protected virtual void process_comments (Valadoc.Settings settings, Valadoc.DocumentationParser parser);
			protected virtual void resolve_type_references (Valadoc.Tree root);
			public Valadoc.Api.Item parent { get; set; }
		}
		[CCode (cheader_filename = "valadoc-1.0.h")]
		public abstract class MemberNode : Valadoc.Api.SymbolNode {
			public MemberNode (Vala.Member symbol, Valadoc.Api.Node parent);
			protected override void process_comments (Valadoc.Settings settings, Valadoc.DocumentationParser parser);
		}
		[CCode (cheader_filename = "valadoc-1.0.h")]
		public abstract class Node : Valadoc.Api.Item, Valadoc.Visitable, Valadoc.Documentation {
			public Node (Valadoc.Api.Node? parent);
			public abstract void accept (Valadoc.Doclet doclet);
			public void accept_children (Valadoc.Api.NodeType[] types, Valadoc.Doclet doclet);
			public void accept_children_by_type (Valadoc.Api.NodeType type, Valadoc.Doclet doclet);
			protected void add_child (Valadoc.Api.SymbolNode child);
			public Valadoc.Api.Node? find_by_name (string name);
			public Valadoc.Api.Node? find_by_symbol (Vala.Symbol symbol);
			public string? full_name ();
			public Gee.List<Valadoc.Api.Node> get_children_by_type (Valadoc.Api.NodeType type, bool filtered = true);
			public virtual string? get_filename ();
			public abstract bool is_visitor_accessible (Valadoc.Settings settings);
			protected override void process_comments (Valadoc.Settings settings, Valadoc.DocumentationParser parser);
			protected override void resolve_type_references (Valadoc.Tree root);
			public Valadoc.Content.Comment? documentation { get; set; }
			public abstract string? name { owned get; }
			public abstract Valadoc.Api.NodeType node_type { get; }
			public Valadoc.Namespace? nspace { get; }
			public Valadoc.Package? package { get; }
		}
		[CCode (cheader_filename = "valadoc-1.0.h")]
		public abstract class SymbolNode : Valadoc.Api.Node, Valadoc.SymbolAccessibility {
			public SymbolNode (Vala.Symbol symbol, Valadoc.Api.Node parent);
			public override string? get_filename ();
			public override bool is_visitor_accessible (Valadoc.Settings settings);
			public override string? name { owned get; }
			protected Vala.Symbol symbol { get; set; }
		}
		[CCode (cheader_filename = "valadoc-1.0.h")]
		public abstract class TypeSymbolNode : Valadoc.Api.SymbolNode {
			public TypeSymbolNode (Vala.TypeSymbol symbol, Valadoc.Api.Node parent);
			protected override void process_comments (Valadoc.Settings settings, Valadoc.DocumentationParser parser);
		}
		[CCode (cprefix = "VALADOC_API_NODE_TYPE_", cheader_filename = "valadoc-1.0.h")]
		public enum NodeType {
			CLASS,
			CONSTANT,
			CREATION_METHOD,
			DELEGATE,
			ENUM,
			ENUM_VALUE,
			ERROR_CODE,
			ERROR_DOMAIN,
			FIELD,
			FORMAL_PARAMETER,
			INTERFACE,
			METHOD,
			NAMESPACE,
			PACKAGE,
			PROPERTY,
			PROPERTY_ACCESSOR,
			SIGNAL,
			STRUCT,
			TYPE_PARAMETER
		}
	}
	[CCode (cprefix = "ValadocContent", lower_case_cprefix = "valadoc_content_")]
	namespace Content {
		[CCode (cheader_filename = "valadoc-1.0.h")]
		public abstract class BlockContent : Valadoc.Content.ContentElement {
			public override void accept_children (Valadoc.Content.ContentVisitor visitor);
			public override void check (Valadoc.Tree api_root, Valadoc.Api.Node? container, Valadoc.ErrorReporter reporter);
			public override void configure (Valadoc.Settings settings, Valadoc.ResourceLocator locator);
			public Gee.List<Valadoc.Content.Block> content { get; }
		}
		[CCode (cheader_filename = "valadoc-1.0.h")]
		public class Comment : Valadoc.Content.BlockContent {
			public override void accept (Valadoc.Content.ContentVisitor visitor);
			public override void accept_children (Valadoc.Content.ContentVisitor visitor);
			public override void check (Valadoc.Tree api_root, Valadoc.Api.Node? container, Valadoc.ErrorReporter reporter);
			public override void configure (Valadoc.Settings settings, Valadoc.ResourceLocator locator);
			public Gee.List<Valadoc.Content.Taglet> find_taglets (Valadoc.Api.Node? container, GLib.Type taglet_type);
			public Gee.List<Valadoc.Content.Taglet> taglets { get; }
		}
		[CCode (cheader_filename = "valadoc-1.0.h")]
		public abstract class ContentElement : GLib.Object {
			public ContentElement ();
			public abstract void accept (Valadoc.Content.ContentVisitor visitor);
			public virtual void accept_children (Valadoc.Content.ContentVisitor visitor);
			public abstract void check (Valadoc.Tree api_root, Valadoc.Api.Node? container, Valadoc.ErrorReporter reporter);
			public virtual void configure (Valadoc.Settings settings, Valadoc.ResourceLocator locator);
		}
		[CCode (cheader_filename = "valadoc-1.0.h")]
		public class ContentFactory : GLib.Object {
			public ContentFactory (Valadoc.Settings settings, Valadoc.ResourceLocator locator, Valadoc.ModuleLoader modules);
			public Valadoc.Content.Comment create_comment ();
			public Valadoc.Content.Embedded create_embedded ();
			public Valadoc.Content.Headline create_headline ();
			public Valadoc.Content.Link create_link ();
			public Valadoc.Content.List create_list ();
			public Valadoc.Content.ListItem create_list_item ();
			public Valadoc.Content.Page create_page ();
			public Valadoc.Content.Paragraph create_paragraph ();
			public Valadoc.Content.Run create_run (Valadoc.Content.Run.Style style);
			public Valadoc.Content.SourceCode create_source_code ();
			public Valadoc.Content.Table create_table ();
			public Valadoc.Content.TableCell create_table_cell ();
			public Valadoc.Content.TableRow create_table_row ();
			public Valadoc.Content.Taglet create_taglet (string name);
			public Valadoc.Content.Text create_text (string? text = null);
			public Valadoc.Content.ContentElement set_style_attributes (Valadoc.Content.StyleAttributes element, Valadoc.Content.VerticalAlign? valign, Valadoc.Content.HorizontalAlign? halign, string? style);
		}
		[CCode (cheader_filename = "valadoc-1.0.h")]
		public abstract class ContentRenderer : Valadoc.Content.ContentVisitor {
			public ContentRenderer ();
			public abstract void render (Valadoc.Content.ContentElement element);
			public abstract void render_children (Valadoc.Content.ContentElement element);
		}
		[CCode (cheader_filename = "valadoc-1.0.h")]
		public abstract class ContentVisitor : GLib.Object {
			public ContentVisitor ();
			public virtual void visit_comment (Valadoc.Content.Comment element);
			public virtual void visit_embedded (Valadoc.Content.Embedded element);
			public virtual void visit_headline (Valadoc.Content.Headline element);
			public virtual void visit_link (Valadoc.Content.Link element);
			public virtual void visit_list (Valadoc.Content.List element);
			public virtual void visit_list_item (Valadoc.Content.ListItem element);
			public virtual void visit_page (Valadoc.Content.Page element);
			public virtual void visit_paragraph (Valadoc.Content.Paragraph element);
			public virtual void visit_run (Valadoc.Content.Run element);
			public virtual void visit_source_code (Valadoc.Content.SourceCode element);
			public virtual void visit_symbol_link (Valadoc.Content.SymbolLink element);
			public virtual void visit_table (Valadoc.Content.Table element);
			public virtual void visit_table_cell (Valadoc.Content.TableCell element);
			public virtual void visit_table_row (Valadoc.Content.TableRow element);
			public virtual void visit_taglet (Valadoc.Content.Taglet element);
			public virtual void visit_text (Valadoc.Content.Text element);
		}
		[CCode (cheader_filename = "valadoc-1.0.h")]
		public class Embedded : Valadoc.Content.ContentElement, Valadoc.Content.Inline, Valadoc.Content.StyleAttributes {
			public override void accept (Valadoc.Content.ContentVisitor visitor);
			public override void check (Valadoc.Tree api_root, Valadoc.Api.Node? container, Valadoc.ErrorReporter reporter);
			public override void configure (Valadoc.Settings settings, Valadoc.ResourceLocator locator);
			public string caption { get; set; }
			public string url { get; set; }
		}
		[CCode (cheader_filename = "valadoc-1.0.h")]
		public class Headline : Valadoc.Content.Block, Valadoc.Content.InlineContent {
			public override void accept (Valadoc.Content.ContentVisitor visitor);
			public override void check (Valadoc.Tree api_root, Valadoc.Api.Node? container, Valadoc.ErrorReporter reporter);
			public int level { get; set; }
		}
		[CCode (cheader_filename = "valadoc-1.0.h")]
		public abstract class InlineContent : Valadoc.Content.ContentElement {
			public override void accept_children (Valadoc.Content.ContentVisitor visitor);
			public override void check (Valadoc.Tree api_root, Valadoc.Api.Node? container, Valadoc.ErrorReporter reporter);
			public Gee.List<Valadoc.Content.Inline> content { get; }
		}
		[CCode (cheader_filename = "valadoc-1.0.h")]
		public abstract class InlineTaglet : Valadoc.Content.ContentElement, Valadoc.Content.Taglet, Valadoc.Content.Inline {
			protected Valadoc.ResourceLocator locator;
			protected Valadoc.Settings settings;
			public InlineTaglet ();
			public override void accept (Valadoc.Content.ContentVisitor visitor);
			public override void check (Valadoc.Tree api_root, Valadoc.Api.Node? container, Valadoc.ErrorReporter reporter);
			public override void configure (Valadoc.Settings settings, Valadoc.ResourceLocator locator);
			public abstract Valadoc.Rule? get_parser_rule (Valadoc.Rule run_rule);
			public abstract Valadoc.Content.ContentElement produce_content ();
		}
		[CCode (cheader_filename = "valadoc-1.0.h")]
		public class Link : Valadoc.Content.ContentElement, Valadoc.Content.Inline {
			public override void accept (Valadoc.Content.ContentVisitor visitor);
			public override void check (Valadoc.Tree api_root, Valadoc.Api.Node? container, Valadoc.ErrorReporter reporter);
			public override void configure (Valadoc.Settings settings, Valadoc.ResourceLocator locator);
			public string label { get; set; }
			public string url { get; set; }
		}
		[CCode (cheader_filename = "valadoc-1.0.h")]
		public class List : Valadoc.Content.ContentElement, Valadoc.Content.Block {
			public override void accept (Valadoc.Content.ContentVisitor visitor);
			public override void check (Valadoc.Tree api_root, Valadoc.Api.Node? container, Valadoc.ErrorReporter reporter);
			public Gee.List<Valadoc.Content.ListItem> items { get; }
		}
		[CCode (cheader_filename = "valadoc-1.0.h")]
		public class ListItem : Valadoc.Content.InlineContent {
			[CCode (cprefix = "VALADOC_CONTENT_LIST_ITEM_BULLET_", cheader_filename = "valadoc-1.0.h")]
			public enum Bullet {
				NONE,
				UNORDERED,
				ORDERED,
				ORDERED_LATIN,
				ORDERED_CAPITAL,
				ORDERED_NUMBER,
				ORDERED_LOWER_CASE
			}
			public override void accept (Valadoc.Content.ContentVisitor visitor);
			public override void check (Valadoc.Tree api_root, Valadoc.Api.Node? container, Valadoc.ErrorReporter reporter);
			public Valadoc.Content.ListItem.Bullet bullet { get; set; }
			public int level { get; set; }
		}
		[CCode (cheader_filename = "valadoc-1.0.h")]
		public class Page : Valadoc.Content.BlockContent {
			public override void accept (Valadoc.Content.ContentVisitor visitor);
		}
		[CCode (cheader_filename = "valadoc-1.0.h")]
		public class Paragraph : Valadoc.Content.InlineContent, Valadoc.Content.Block, Valadoc.Content.StyleAttributes {
			public override void accept (Valadoc.Content.ContentVisitor visitor);
			public override void check (Valadoc.Tree api_root, Valadoc.Api.Node? container, Valadoc.ErrorReporter reporter);
		}
		[CCode (cheader_filename = "valadoc-1.0.h")]
		public class Run : Valadoc.Content.InlineContent, Valadoc.Content.Inline {
			[CCode (cprefix = "VALADOC_CONTENT_RUN_STYLE_", cheader_filename = "valadoc-1.0.h")]
			public enum Style {
				NONE,
				BOLD,
				ITALIC,
				UNDERLINED,
				MONOSPACED,
				STROKE,
				LANG_KEYWORD,
				LANG_LITERAL,
				LANG_TYPE
			}
			public override void accept (Valadoc.Content.ContentVisitor visitor);
			public override void check (Valadoc.Tree api_root, Valadoc.Api.Node? container, Valadoc.ErrorReporter reporter);
			public Valadoc.Content.Run.Style style { get; set; }
		}
		[CCode (cheader_filename = "valadoc-1.0.h")]
		public class SourceCode : Valadoc.Content.ContentElement, Valadoc.Content.Block {
			[CCode (cprefix = "VALADOC_CONTENT_SOURCE_CODE_LANGUAGE_", cheader_filename = "valadoc-1.0.h")]
			public enum Language {
				GENIE,
				VALA,
				C
			}
			public override void accept (Valadoc.Content.ContentVisitor visitor);
			public override void check (Valadoc.Tree api_root, Valadoc.Api.Node? container, Valadoc.ErrorReporter reporter);
			public string code { get; set; }
			public Valadoc.Content.SourceCode.Language language { get; set; }
		}
		[CCode (cheader_filename = "valadoc-1.0.h")]
		public class SymbolLink : Valadoc.Content.ContentElement, Valadoc.Content.Inline {
			public override void accept (Valadoc.Content.ContentVisitor visitor);
			public override void check (Valadoc.Tree api_root, Valadoc.Api.Node? container, Valadoc.ErrorReporter reporter);
			public override void configure (Valadoc.Settings settings, Valadoc.ResourceLocator locator);
			public string label { get; set; }
			public Valadoc.Api.Node symbol { get; set; }
		}
		[CCode (cheader_filename = "valadoc-1.0.h")]
		public class Table : Valadoc.Content.ContentElement, Valadoc.Content.Block {
			public override void accept (Valadoc.Content.ContentVisitor visitor);
			public override void accept_children (Valadoc.Content.ContentVisitor visitor);
			public override void check (Valadoc.Tree api_root, Valadoc.Api.Node? container, Valadoc.ErrorReporter reporter);
			public Gee.List<Valadoc.Content.TableRow> rows { get; }
		}
		[CCode (cheader_filename = "valadoc-1.0.h")]
		public class TableCell : Valadoc.Content.InlineContent, Valadoc.Content.StyleAttributes {
			public override void accept (Valadoc.Content.ContentVisitor visitor);
			public override void check (Valadoc.Tree api_root, Valadoc.Api.Node? container, Valadoc.ErrorReporter reporter);
			public int colspan { get; set; }
			public int rowspan { get; set; }
		}
		[CCode (cheader_filename = "valadoc-1.0.h")]
		public class TableRow : Valadoc.Content.ContentElement {
			public override void accept (Valadoc.Content.ContentVisitor visitor);
			public override void accept_children (Valadoc.Content.ContentVisitor visitor);
			public override void check (Valadoc.Tree api_root, Valadoc.Api.Node? container, Valadoc.ErrorReporter reporter);
			public Gee.List<Valadoc.Content.TableCell> cells { get; }
		}
		[CCode (cheader_filename = "valadoc-1.0.h")]
		public class Text : Valadoc.Content.ContentElement, Valadoc.Content.Inline {
			public override void accept (Valadoc.Content.ContentVisitor visitor);
			public override void check (Valadoc.Tree api_root, Valadoc.Api.Node? container, Valadoc.ErrorReporter reporter);
			public string content { get; set; }
		}
		[CCode (cheader_filename = "valadoc-1.0.h")]
		public interface Block : Valadoc.Content.ContentElement {
		}
		[CCode (cheader_filename = "valadoc-1.0.h")]
		public interface Inline : Valadoc.Content.ContentElement {
		}
		[CCode (cheader_filename = "valadoc-1.0.h")]
		public interface StyleAttributes : Valadoc.Content.ContentElement {
			public abstract Valadoc.Content.HorizontalAlign? horizontal_align { get; set; }
			public abstract string? style { get; set; }
			public abstract Valadoc.Content.VerticalAlign? vertical_align { get; set; }
		}
		[CCode (cheader_filename = "valadoc-1.0.h")]
		public interface Taglet : Valadoc.Content.ContentElement {
			public abstract Valadoc.Rule? get_parser_rule (Valadoc.Rule run_rule);
		}
		[CCode (cprefix = "VALADOC_CONTENT_HORIZONTAL_ALIGN_", cheader_filename = "valadoc-1.0.h")]
		public enum HorizontalAlign {
			LEFT,
			RIGHT,
			CENTER
		}
		[CCode (cprefix = "VALADOC_CONTENT_VERTICAL_ALIGN_", cheader_filename = "valadoc-1.0.h")]
		public enum VerticalAlign {
			TOP,
			MIDDLE,
			BOTTOM
		}
	}
	[CCode (cprefix = "ValadocDiagrams", lower_case_cprefix = "valadoc_diagrams_")]
	namespace Diagrams {
		[CCode (cheader_filename = "valadoc-1.0.h")]
		public static void write_class_diagram (Valadoc.Class cl, string path);
		[CCode (cheader_filename = "valadoc-1.0.h")]
		public static void write_interface_diagram (Valadoc.Interface iface, string path);
		[CCode (cheader_filename = "valadoc-1.0.h")]
		public static void write_struct_diagram (Valadoc.Struct stru, string path);
	}
	[CCode (cprefix = "ValadocTaglets", lower_case_cprefix = "valadoc_taglets_")]
	namespace Taglets {
		[CCode (cheader_filename = "valadoc-1.0.h")]
		public class Deprecated : Valadoc.Content.InlineContent, Valadoc.Content.Taglet, Valadoc.Content.Block {
			public Deprecated ();
			public override void accept (Valadoc.Content.ContentVisitor visitor);
			public override void check (Valadoc.Tree api_root, Valadoc.Api.Node? container, Valadoc.ErrorReporter reporter);
		}
		[CCode (cheader_filename = "valadoc-1.0.h")]
		public class InheritDoc : Valadoc.Content.InlineTaglet {
			public InheritDoc ();
			public override void check (Valadoc.Tree api_root, Valadoc.Api.Node? container, Valadoc.ErrorReporter reporter);
			public override Valadoc.Rule? get_parser_rule (Valadoc.Rule run_rule);
			public override Valadoc.Content.ContentElement produce_content ();
		}
		[CCode (cheader_filename = "valadoc-1.0.h")]
		public class Link : Valadoc.Content.InlineTaglet {
			public Link ();
			public override void check (Valadoc.Tree api_root, Valadoc.Api.Node? container, Valadoc.ErrorReporter reporter);
			public override Valadoc.Rule? get_parser_rule (Valadoc.Rule run_rule);
			public override Valadoc.Content.ContentElement produce_content ();
			public string symbol_name { get; set; }
		}
		[CCode (cheader_filename = "valadoc-1.0.h")]
		public class Param : Valadoc.Content.InlineContent, Valadoc.Content.Taglet, Valadoc.Content.Block {
			public Param ();
			public override void accept (Valadoc.Content.ContentVisitor visitor);
			public override void check (Valadoc.Tree api_root, Valadoc.Api.Node? container, Valadoc.ErrorReporter reporter);
			public string parameter_name { get; set; }
		}
		[CCode (cheader_filename = "valadoc-1.0.h")]
		public class Return : Valadoc.Content.InlineContent, Valadoc.Content.Taglet, Valadoc.Content.Block {
			public Return ();
			public override void accept (Valadoc.Content.ContentVisitor visitor);
			public override void check (Valadoc.Tree api_root, Valadoc.Api.Node? container, Valadoc.ErrorReporter reporter);
		}
		[CCode (cheader_filename = "valadoc-1.0.h")]
		public class See : Valadoc.Content.ContentElement, Valadoc.Content.Taglet, Valadoc.Content.Block {
			public See ();
			public override void accept (Valadoc.Content.ContentVisitor visitor);
			public override void check (Valadoc.Tree api_root, Valadoc.Api.Node? container, Valadoc.ErrorReporter reporter);
			public Valadoc.Api.Node symbol { get; set; }
			public string symbol_name { get; set; }
		}
		[CCode (cheader_filename = "valadoc-1.0.h")]
		public class Since : Valadoc.Content.ContentElement, Valadoc.Content.Taglet, Valadoc.Content.Block {
			public string version;
			public Since ();
			public override void accept (Valadoc.Content.ContentVisitor visitor);
			public override void check (Valadoc.Tree api_root, Valadoc.Api.Node? container, Valadoc.ErrorReporter reporter);
		}
		[CCode (cheader_filename = "valadoc-1.0.h")]
		public class Throws : Valadoc.Content.InlineContent, Valadoc.Content.Taglet, Valadoc.Content.Block {
			public Throws ();
			public override void accept (Valadoc.Content.ContentVisitor visitor);
			public override void check (Valadoc.Tree api_root, Valadoc.Api.Node? container, Valadoc.ErrorReporter reporter);
			public Valadoc.Api.Node error_domain { get; set; }
			public string error_domain_name { get; set; }
		}
		[CCode (cheader_filename = "valadoc-1.0.h")]
		public static void init (Valadoc.ModuleLoader loader);
	}
	[CCode (cheader_filename = "valadoc-1.0.h")]
	public class Array : Valadoc.Api.Item {
		public Array (Vala.ArrayType vtyperef, Valadoc.Api.Item parent);
		protected override void resolve_type_references (Valadoc.Tree root);
		public void write (Valadoc.Langlet langlet, void* ptr, Valadoc.Api.Node parent);
		public Valadoc.Api.Item data_type { get; set; }
	}
	[CCode (cheader_filename = "valadoc-1.0.h")]
	public class Class : Valadoc.Api.TypeSymbolNode, Valadoc.ClassHandler, Valadoc.StructHandler, Valadoc.SignalHandler, Valadoc.MethodHandler, Valadoc.EnumHandler, Valadoc.PropertyHandler, Valadoc.ConstructionMethodHandler, Valadoc.FieldHandler, Valadoc.DelegateHandler, Valadoc.ConstantHandler, Valadoc.TemplateParameterListHandler {
		public Class (Vala.Class symbol, Valadoc.Api.Node parent);
		public override void accept (Valadoc.Doclet doclet);
		public string? get_cname ();
		public Gee.Collection<Valadoc.Interface> get_implemented_interface_list ();
		protected override void resolve_type_references (Valadoc.Tree root);
		public void visit (Valadoc.Doclet doclet);
		public void write (Valadoc.Langlet langlet, void* ptr);
		protected Valadoc.Class? base_type { get; set; }
		public bool is_abstract { get; }
		public override Valadoc.Api.NodeType node_type { get; }
	}
	[CCode (cheader_filename = "valadoc-1.0.h")]
	public class CommentScanner : Valadoc.WikiScanner {
		public CommentScanner (Valadoc.Settings settings);
		protected override void accept (unichar c) throws Valadoc.ParserError;
		public override int get_line_start_column ();
		public override void reset ();
	}
	[CCode (cheader_filename = "valadoc-1.0.h")]
	public class Constant : Valadoc.Api.MemberNode, Valadoc.ReturnTypeHandler {
		public Constant (Vala.Constant symbol, Valadoc.Api.Node parent);
		public override void accept (Valadoc.Doclet doclet);
		public string get_cname ();
		public bool is_vconstant (Vala.Constant vconst);
		protected override void resolve_type_references (Valadoc.Tree root);
		public void visit (Valadoc.Doclet doclet, Valadoc.ConstantHandler? parent);
		public void write (Valadoc.Langlet langlet, void* ptr, Valadoc.ConstantHandler parent);
		public override Valadoc.Api.NodeType node_type { get; }
	}
	[CCode (cheader_filename = "valadoc-1.0.h")]
	public class Delegate : Valadoc.Api.TypeSymbolNode, Valadoc.ParameterListHandler, Valadoc.ReturnTypeHandler, Valadoc.TemplateParameterListHandler, Valadoc.ExceptionHandler {
		public Delegate (Vala.Delegate symbol, Valadoc.Api.Node parent);
		public override void accept (Valadoc.Doclet doclet);
		public string? get_cname ();
		protected override void resolve_type_references (Valadoc.Tree root);
		public void visit (Valadoc.Doclet doclet);
		public void write (Valadoc.Langlet langlet, void* ptr);
		public bool is_static { get; }
		public override Valadoc.Api.NodeType node_type { get; }
	}
	[CCode (cheader_filename = "valadoc-1.0.h")]
	public abstract class Doclet : GLib.Object {
		public Doclet ();
		public abstract void initialisation (Valadoc.Settings settings, Valadoc.Tree tree);
		public abstract void visit_class (Valadoc.Class cl);
		public abstract void visit_constant (Valadoc.Constant constant, Valadoc.ConstantHandler parent);
		public abstract void visit_delegate (Valadoc.Delegate del);
		public abstract void visit_enum (Valadoc.Enum en);
		public abstract void visit_enum_value (Valadoc.EnumValue enval);
		public abstract void visit_error_code (Valadoc.ErrorCode errcode);
		public abstract void visit_error_domain (Valadoc.ErrorDomain errdom);
		public abstract void visit_field (Valadoc.Field field, Valadoc.FieldHandler parent);
		public abstract void visit_interface (Valadoc.Interface iface);
		public abstract void visit_method (Valadoc.Method m, Valadoc.MethodHandler parent);
		public abstract void visit_namespace (Valadoc.Namespace ns);
		public abstract void visit_package (Valadoc.Package pkg);
		public abstract void visit_property (Valadoc.Property prop);
		public abstract void visit_signal (Valadoc.Signal sig);
		public abstract void visit_struct (Valadoc.Struct stru);
	}
	[CCode (cheader_filename = "valadoc-1.0.h")]
	public class DocumentationParser : GLib.Object, Valadoc.ResourceLocator {
		public DocumentationParser (Valadoc.Settings settings, Valadoc.ErrorReporter reporter, Valadoc.Tree tree, Valadoc.ModuleLoader modules);
		public Valadoc.Content.Comment? parse (Valadoc.Api.Node element, Vala.Comment source_comment);
		public Valadoc.Content.Page? parse_wikipage (Valadoc.WikiPage page);
	}
	[CCode (cheader_filename = "valadoc-1.0.h")]
	public class Enum : Valadoc.Api.TypeSymbolNode, Valadoc.MethodHandler {
		public Enum (Vala.Enum symbol, Valadoc.Api.Node parent);
		public override void accept (Valadoc.Doclet doclet);
		public string? get_cname ();
		public Gee.Collection<Valadoc.EnumValue> get_enum_values ();
		public void visit (Valadoc.Doclet doclet);
		public void visit_enum_values (Valadoc.Doclet doclet);
		public void write (Valadoc.Langlet langlet, void* ptr);
		public override Valadoc.Api.NodeType node_type { get; }
	}
	[CCode (cheader_filename = "valadoc-1.0.h")]
	public class EnumValue : Valadoc.Api.SymbolNode {
		public EnumValue (Vala.EnumValue symbol, Valadoc.Api.Node parent);
		public override void accept (Valadoc.Doclet doclet);
		public string get_cname ();
		public bool is_venumvalue (Vala.EnumValue venval);
		protected override void process_comments (Valadoc.Settings settings, Valadoc.DocumentationParser parser);
		public void visit (Valadoc.Doclet doclet);
		public void write (Valadoc.Langlet langlet, void* ptr);
		public override Valadoc.Api.NodeType node_type { get; }
	}
	[CCode (cheader_filename = "valadoc-1.0.h")]
	public class ErrorCode : Valadoc.Api.TypeSymbolNode {
		public ErrorCode (Vala.ErrorCode symbol, Valadoc.Api.Node parent);
		public override void accept (Valadoc.Doclet doclet);
		public string get_cname ();
		public bool is_verrorcode (Vala.ErrorCode verrcode);
		public void visit (Valadoc.Doclet doclet);
		public void write (Valadoc.Langlet langlet, void* ptr);
		public override Valadoc.Api.NodeType node_type { get; }
	}
	[CCode (cheader_filename = "valadoc-1.0.h")]
	public class ErrorDomain : Valadoc.Api.TypeSymbolNode, Valadoc.MethodHandler {
		public ErrorDomain (Vala.ErrorDomain symbol, Valadoc.Api.Node parent);
		public override void accept (Valadoc.Doclet doclet);
		public string? get_cname ();
		public Gee.Collection<Valadoc.ErrorCode> get_error_code_list ();
		public void visit (Valadoc.Doclet doclet);
		public void visit_error_codes (Valadoc.Doclet doclet);
		public void write (Valadoc.Langlet langlet, void* ptr);
		public override Valadoc.Api.NodeType node_type { get; }
	}
	[CCode (cheader_filename = "valadoc-1.0.h")]
	public class ErrorReporter : GLib.Object {
		public ErrorReporter ();
		public void error (string file, long line, long startpos, long endpos, string errline, string msg);
		public void simple_error (string msg);
		public void simple_warning (string msg);
		public void warning (string file, long line, long startpos, long endpos, string errline, string msg);
		public int errors { get; }
		public GLib.FileStream stream { get; set; }
		public Vala.Report? vreporter { get; set; }
		public int warnings { get; }
	}
	[CCode (cheader_filename = "valadoc-1.0.h")]
	public class Field : Valadoc.Api.MemberNode, Valadoc.ReturnTypeHandler {
		public Field (Vala.Field symbol, Valadoc.Api.Node parent);
		public override void accept (Valadoc.Doclet doclet);
		public string? get_cname ();
		protected override void resolve_type_references (Valadoc.Tree root);
		public void visit (Valadoc.Doclet doclet, Valadoc.FieldHandler? parent);
		public void write (Valadoc.Langlet langlet, void* ptr, Valadoc.FieldHandler parent);
		public bool is_static { get; }
		public bool is_volatile { get; }
		public override Valadoc.Api.NodeType node_type { get; }
	}
	[CCode (cheader_filename = "valadoc-1.0.h")]
	public class FormalParameter : Valadoc.Api.SymbolNode, Valadoc.ReturnTypeHandler {
		public FormalParameter (Vala.FormalParameter symbol, Valadoc.Api.Node parent);
		public override void accept (Valadoc.Doclet doclet);
		protected override void resolve_type_references (Valadoc.Tree root);
		public void write (Valadoc.Langlet langlet, void* ptr);
		public bool ellipsis { get; }
		public bool has_default_value { get; }
		public bool is_out { get; }
		public bool is_ref { get; }
		public override Valadoc.Api.NodeType node_type { get; }
	}
	[CCode (cheader_filename = "valadoc-1.0.h")]
	public class Interface : Valadoc.Api.TypeSymbolNode, Valadoc.SignalHandler, Valadoc.PropertyHandler, Valadoc.FieldHandler, Valadoc.ConstantHandler, Valadoc.TemplateParameterListHandler, Valadoc.MethodHandler, Valadoc.DelegateHandler, Valadoc.EnumHandler, Valadoc.StructHandler, Valadoc.ClassHandler {
		public Interface (Vala.Interface symbol, Valadoc.Api.Node parent);
		public override void accept (Valadoc.Doclet doclet);
		public string? get_cname ();
		public Gee.Collection<Valadoc.Interface> get_implemented_interface_list ();
		protected override void resolve_type_references (Valadoc.Tree root);
		public void visit (Valadoc.Doclet doclet);
		public void write (Valadoc.Langlet langlet, void* ptr);
		protected Valadoc.Class? base_type { get; set; }
		public override Valadoc.Api.NodeType node_type { get; }
	}
	[CCode (cheader_filename = "valadoc-1.0.h")]
	public abstract class Langlet : GLib.Object {
		public Langlet ();
		public abstract void write_array (Valadoc.Array param, void* ptr, Valadoc.Api.Node pos);
		public abstract void write_class (Valadoc.Class cl, void* ptr);
		public abstract void write_constant (Valadoc.Constant constant, Valadoc.ConstantHandler parent, void* ptr);
		public abstract void write_delegate (Valadoc.Delegate del, void* ptr);
		public abstract void write_enum (Valadoc.Enum en, void* ptr);
		public abstract void write_enum_value (Valadoc.EnumValue enval, void* ptr);
		public abstract void write_error_code (Valadoc.ErrorCode errcode, void* ptr);
		public abstract void write_error_domain (Valadoc.ErrorDomain errdom, void* ptr);
		public abstract void write_field (Valadoc.Field field, Valadoc.FieldHandler pos, void* ptr);
		public abstract void write_file (Valadoc.Package file, void* ptr);
		public abstract void write_formal_parameter (Valadoc.FormalParameter param, void* ptr);
		public abstract void write_inheritance_list (Valadoc.Api.Node dtype, void* ptr);
		public abstract void write_interface (Valadoc.Interface iface, void* ptr);
		public abstract void write_method (void* ptr, Valadoc.Method m, Valadoc.MethodHandler pos);
		public abstract void write_namespace (Valadoc.Namespace ns, void* ptr);
		public abstract void write_parameter_list (Valadoc.ParameterListHandler thandler, void* ptr);
		public abstract void write_pointer (Valadoc.Pointer param, void* ptr, Valadoc.Api.Node pos);
		public abstract void write_property (Valadoc.Property prop, void* ptr);
		public abstract void write_property_accessor (Valadoc.PropertyAccessor propac, void* ptr);
		public abstract void write_signal (Valadoc.Signal sig, void* ptr);
		public abstract void write_struct (Valadoc.Struct stru, void* ptr);
		public abstract void write_template_parameters (Valadoc.TemplateParameterListHandler thandler, void* ptr);
		public abstract void write_type_parameter (Valadoc.TypeParameter param, void* ptr);
		public abstract void write_type_reference (Valadoc.TypeReference tref, void* ptr);
	}
	[CCode (cheader_filename = "valadoc-1.0.h")]
	public class Method : Valadoc.Api.MemberNode, Valadoc.ParameterListHandler, Valadoc.ExceptionHandler, Valadoc.TemplateParameterListHandler, Valadoc.ReturnTypeHandler {
		public Method (Vala.Method symbol, Valadoc.Api.Node parent);
		public override void accept (Valadoc.Doclet doclet);
		public string? get_cname ();
		protected override void resolve_type_references (Valadoc.Tree root);
		public void visit (Valadoc.Doclet doclet, Valadoc.MethodHandler in_type);
		public void write (Valadoc.Langlet langlet, void* ptr, Valadoc.MethodHandler parent);
		public Valadoc.Method? base_method { get; set; }
		public bool is_abstract { get; }
		public bool is_constructor { get; }
		public bool is_inline { get; }
		public bool is_override { get; }
		public bool is_static { get; }
		public bool is_virtual { get; }
		public bool is_yields { get; }
		public override string? name { owned get; }
		public override Valadoc.Api.NodeType node_type { get; }
	}
	[CCode (cheader_filename = "valadoc-1.0.h")]
	public class ModuleLoader : GLib.Object {
		public Valadoc.Doclet doclet;
		public Gee.HashMap<string,GLib.Type> taglets;
		public ModuleLoader ();
		public Valadoc.Content.Taglet create_taglet (string keyword);
		public bool load (string path);
	}
	[CCode (cheader_filename = "valadoc-1.0.h")]
	public class Namespace : Valadoc.Api.SymbolNode, Valadoc.MethodHandler, Valadoc.FieldHandler, Valadoc.NamespaceHandler, Valadoc.ErrorDomainHandler, Valadoc.EnumHandler, Valadoc.ClassHandler, Valadoc.StructHandler, Valadoc.InterfaceHandler, Valadoc.DelegateHandler, Valadoc.ConstantHandler {
		public Namespace (Vala.Namespace symbol, Valadoc.NamespaceHandler parent);
		public override void accept (Valadoc.Doclet doclet);
		protected override void process_comments (Valadoc.Settings settings, Valadoc.DocumentationParser parser);
		public void visit (Valadoc.Doclet doclet);
		public void write (Valadoc.Langlet langlet, void* ptr);
		public override Valadoc.Api.NodeType node_type { get; }
		public Vala.Namespace vnspace { get; set; }
	}
	[CCode (cheader_filename = "valadoc-1.0.h")]
	public class Package : Valadoc.Api.Node, Valadoc.NamespaceHandler {
		public Package (Vala.SourceFile vfile, string name, bool is_package = false);
		public override void accept (Valadoc.Doclet doclet);
		public Gee.Collection<Valadoc.Package> get_dependency_list ();
		public Gee.Collection<Valadoc.Package> get_full_dependency_list ();
		public override bool is_visitor_accessible (Valadoc.Settings settings);
		public void visit (Valadoc.Doclet doclet);
		public void write (Valadoc.Langlet langlet, void* ptr);
		public bool is_package { get; set; }
		public override string? name { owned get; }
		public override Valadoc.Api.NodeType node_type { get; }
	}
	[CCode (ref_function = "valadoc_parser_ref", unref_function = "valadoc_parser_unref", cheader_filename = "valadoc-1.0.h")]
	public class Parser : Valadoc.ParserCallback {
		public Parser (Valadoc.Settings settings, Valadoc.Scanner scanner, Valadoc.ErrorReporter reporter);
		public void accept_token (Valadoc.Token token) throws Valadoc.ParserError;
		public void parse (string content, string filename, int first_line, int first_column) throws Valadoc.ParserError;
		public void set_root_rule (Valadoc.Rule root_rule);
	}
	[CCode (cheader_filename = "valadoc-1.0.h")]
	public class Pointer : Valadoc.Api.Item {
		public Pointer (Vala.PointerType vtyperef, Valadoc.Api.Item parent);
		protected override void resolve_type_references (Valadoc.Tree root);
		public void write (Valadoc.Langlet langlet, void* ptr, Valadoc.Api.Node parent);
		public Valadoc.Api.Item data_type { get; set; }
	}
	[CCode (cheader_filename = "valadoc-1.0.h")]
	public class Property : Valadoc.Api.MemberNode, Valadoc.ReturnTypeHandler {
		public Property (Vala.Property symbol, Valadoc.Api.Node parent);
		public override void accept (Valadoc.Doclet doclet);
		public bool equals (Valadoc.Property p);
		public string? get_cname ();
		public bool is_vproperty (Vala.Property vprop);
		protected override void resolve_type_references (Valadoc.Tree root);
		public void visit (Valadoc.Doclet doclet);
		public void write (Valadoc.Langlet langlet, void* ptr);
		public Valadoc.Property base_property { get; set; }
		public Valadoc.PropertyAccessor getter { get; set; }
		public bool is_abstract { get; }
		public bool is_override { get; }
		public bool is_virtual { get; }
		public override Valadoc.Api.NodeType node_type { get; }
		public Valadoc.PropertyAccessor setter { get; set; }
	}
	[CCode (cheader_filename = "valadoc-1.0.h")]
	public class PropertyAccessor : Valadoc.Api.SymbolNode {
		public PropertyAccessor (Vala.PropertyAccessor symbol, Valadoc.Property parent);
		public override void accept (Valadoc.Doclet doclet);
		public void write (Valadoc.Langlet langlet, void* ptr);
		public bool is_construct { get; }
		public bool is_get { get; }
		public bool is_owned { get; }
		public bool is_set { get; }
		public override Valadoc.Api.NodeType node_type { get; }
	}
	[CCode (cheader_filename = "valadoc-1.0.h")]
	public abstract class Rule : GLib.Object {
		[CCode (cprefix = "VALADOC_RULE_FORWARD_", cheader_filename = "valadoc-1.0.h")]
		public enum Forward {
			NONE,
			PARENT,
			CHILD
		}
		[CCode (cheader_filename = "valadoc-1.0.h")]
		public delegate void Action ();
		protected Rule ();
		public abstract bool accept_token (Valadoc.Token token, Valadoc.ParserCallback parser, Valadoc.Rule.Forward forward) throws Valadoc.ParserError;
		protected void do_reduce (Valadoc.ParserCallback parser) throws Valadoc.ParserError;
		protected void do_start (Valadoc.ParserCallback parser) throws Valadoc.ParserError;
		protected bool has_start_token (GLib.Object? scheme_element, Valadoc.Token token);
		public abstract bool is_optional ();
		protected bool is_optional_rule (GLib.Object? scheme_element);
		public static Valadoc.Rule many (GLib.Object?[] scheme);
		public static Valadoc.Rule one_of (GLib.Object?[] scheme);
		public static Valadoc.Rule option (GLib.Object?[] scheme);
		public static Valadoc.Rule seq (GLib.Object?[] scheme);
		public Valadoc.Rule set_name (string name);
		public Valadoc.Rule set_reduce (Valadoc.Rule.Action action);
		public Valadoc.Rule set_start (Valadoc.Rule.Action action);
		public abstract bool starts_with_token (Valadoc.Token token);
		public abstract string to_string (GLib.Object? state);
		protected bool try_to_apply (GLib.Object? scheme_element, Valadoc.Token token, Valadoc.ParserCallback parser, out bool handled) throws Valadoc.ParserError;
		public abstract bool would_accept_token (Valadoc.Token token, GLib.Object? state);
		public abstract bool would_reduce (Valadoc.Token token, GLib.Object? state);
		public string name { get; }
	}
	[CCode (cheader_filename = "valadoc-1.0.h")]
	public class Settings : GLib.Object {
		public bool _internal;
		public bool _private;
		public bool _protected;
		public bool add_inherited;
		public string? basedir;
		public string[] defines;
		public bool deprecated;
		public string? directory;
		public bool disable_dbus_transformation;
		public bool enable_checking;
		public bool experimental;
		public bool non_null_experimental;
		public string path;
		public string pkg_name;
		public string pkg_version;
		public string? profile;
		public string[] vapi_directories;
		public bool verbose;
		public string wiki_directory;
		public bool with_deps;
		public Settings ();
	}
	[CCode (cheader_filename = "valadoc-1.0.h")]
	public class Signal : Valadoc.Api.MemberNode, Valadoc.ParameterListHandler, Valadoc.ReturnTypeHandler {
		public Signal (Vala.Signal symbol, Valadoc.Api.Node parent);
		public override void accept (Valadoc.Doclet doclet);
		public string? get_cname ();
		protected override void resolve_type_references (Valadoc.Tree root);
		public void visit (Valadoc.Doclet doclet);
		public void write (Valadoc.Langlet langlet, void* ptr);
		public bool is_virtual { get; }
		public override Valadoc.Api.NodeType node_type { get; }
	}
	[CCode (cheader_filename = "valadoc-1.0.h")]
	public class Struct : Valadoc.Api.TypeSymbolNode, Valadoc.MethodHandler, Valadoc.ConstructionMethodHandler, Valadoc.FieldHandler, Valadoc.ConstantHandler, Valadoc.TemplateParameterListHandler {
		public Struct (Vala.Struct symbol, Valadoc.Api.Node parent);
		public override void accept (Valadoc.Doclet doclet);
		public string? get_cname ();
		protected override void resolve_type_references (Valadoc.Tree root);
		public void visit (Valadoc.Doclet doclet);
		public void write (Valadoc.Langlet langlet, void* ptr);
		protected Valadoc.Struct? base_type { get; set; }
		public override Valadoc.Api.NodeType node_type { get; }
	}
	[CCode (cheader_filename = "valadoc-1.0.h")]
	public class StubRule : Valadoc.Rule {
		public StubRule ();
		public override bool accept_token (Valadoc.Token token, Valadoc.ParserCallback parser, Valadoc.Rule.Forward forward) throws Valadoc.ParserError;
		public override bool is_optional ();
		public Valadoc.Rule set_rule (Valadoc.Rule rule);
		public override bool starts_with_token (Valadoc.Token token);
		public override string to_string (GLib.Object? state);
		public override bool would_accept_token (Valadoc.Token token, GLib.Object? state);
		public override bool would_reduce (Valadoc.Token token, GLib.Object? state);
	}
	[CCode (cheader_filename = "valadoc-1.0.h")]
	public class Token : GLib.Object {
		public Token ();
		public Token.from_type (Valadoc.TokenType type, Valadoc.SourceLocation begin, Valadoc.SourceLocation end);
		public Token.from_word (string word, Valadoc.SourceLocation begin, Valadoc.SourceLocation end);
		public int to_int ();
		public string to_pretty_string ();
		public string to_string ();
		public Valadoc.SourceLocation begin { get; }
		public Valadoc.SourceLocation end { get; }
		public bool is_number { get; }
		public bool is_word { get; }
		public Valadoc.TokenType? token_type { get; }
		public string? word { get; }
	}
	[CCode (cheader_filename = "valadoc-1.0.h")]
	public class TokenType : GLib.Object {
		[CCode (cheader_filename = "valadoc-1.0.h")]
		public delegate void Action (Valadoc.Token token);
		public static Valadoc.TokenType ALIGN_BOTTOM;
		public static Valadoc.TokenType ALIGN_CENTER;
		public static Valadoc.TokenType ALIGN_RIGHT;
		public static Valadoc.TokenType ALIGN_TOP;
		public static Valadoc.TokenType ANY;
		public static Valadoc.TokenType ANY_NUMBER;
		public static Valadoc.TokenType ANY_WORD;
		public static Valadoc.TokenType AROBASE;
		public static Valadoc.TokenType BACK_QUOTE;
		public static Valadoc.TokenType CLOSED_BRACE;
		public static Valadoc.TokenType DOUBLE_CLOSED_BRACE;
		public static Valadoc.TokenType DOUBLE_CLOSED_BRACKET;
		public static Valadoc.TokenType DOUBLE_OPEN_BRACE;
		public static Valadoc.TokenType DOUBLE_OPEN_BRACKET;
		public static Valadoc.TokenType DOUBLE_PIPE;
		public static Valadoc.TokenType EOF;
		public static Valadoc.TokenType EOL;
		public static Valadoc.TokenType EQUAL_1;
		public static Valadoc.TokenType EQUAL_2;
		public static Valadoc.TokenType EQUAL_3;
		public static Valadoc.TokenType EQUAL_4;
		public static Valadoc.TokenType EQUAL_5;
		public static Valadoc.TokenType GREATER_THAN;
		public static Valadoc.TokenType LESS_THAN;
		public static Valadoc.TokenType MINUS;
		public static Valadoc.TokenType OPEN_BRACE;
		public static Valadoc.TokenType PIPE;
		public static Valadoc.TokenType SHARP;
		public static Valadoc.TokenType SINGLE_QUOTE_2;
		public static Valadoc.TokenType SLASH_2;
		public static Valadoc.TokenType SPACE;
		public static Valadoc.TokenType STAR;
		public static Valadoc.TokenType TAB;
		public static Valadoc.TokenType TRIPLE_CLOSED_BRACE;
		public static Valadoc.TokenType TRIPLE_OPEN_BRACE;
		public static Valadoc.TokenType UNDERSCORE_2;
		public Valadoc.TokenType action (Valadoc.TokenType.Action action);
		public static Valadoc.TokenType any ();
		public static Valadoc.TokenType any_number ();
		public static Valadoc.TokenType any_word ();
		public void do_action (Valadoc.Token matched_token) throws Valadoc.ParserError;
		public bool matches (Valadoc.Token token);
		public static Valadoc.TokenType str (string str);
		public string to_pretty_string ();
		public string to_string ();
	}
	[CCode (ref_function = "valadoc_tree_ref", unref_function = "valadoc_tree_unref", cheader_filename = "valadoc-1.0.h")]
	public class Tree {
		public Tree (Valadoc.ErrorReporter reporter, Valadoc.Settings settings);
		public void add_depencies (string[] packages);
		public void add_documented_file (string[] sources);
		public bool create_tree ();
		public Gee.Collection<Valadoc.Package> get_package_list ();
		public void parse_comments (Valadoc.DocumentationParser docparser);
		public Valadoc.Api.Node? search_symbol_str (Valadoc.Api.Node? element, string symname);
		public void visit (Valadoc.Doclet doclet);
		public Valadoc.WikiPageTree? wikitree { get; set; }
	}
	[CCode (cheader_filename = "valadoc-1.0.h")]
	public class TypeParameter : Valadoc.Api.SymbolNode, Valadoc.ReturnTypeHandler {
		public TypeParameter (Vala.TypeParameter symbol, Valadoc.Api.Node parent);
		public override void accept (Valadoc.Doclet doclet);
		public void write (Valadoc.Langlet langlet, void* ptr);
		public override Valadoc.Api.NodeType node_type { get; }
	}
	[CCode (cheader_filename = "valadoc-1.0.h")]
	public class TypeReference : Valadoc.Api.Item {
		public TypeReference (Vala.DataType? vtyperef, Valadoc.Api.Item parent);
		public Gee.Collection<Valadoc.TypeReference> get_type_arguments ();
		protected override void resolve_type_references (Valadoc.Tree root);
		public void write (Valadoc.Langlet langlet, void* ptr);
		public Valadoc.Api.Item? data_type { get; set; }
		public bool is_dynamic { get; }
		public bool is_nullable { get; }
		public bool is_owned { get; }
		public bool is_unowned { get; }
		public bool is_weak { get; }
		public bool pass_ownership { get; }
		public string type_name { owned get; }
	}
	[CCode (cheader_filename = "valadoc-1.0.h")]
	public class WikiPage : GLib.Object, Valadoc.Documentation {
		public WikiPage (string name, string path);
		public bool parse (Valadoc.DocumentationParser docparser);
		public void read () throws GLib.FileError;
		public Valadoc.Content.Page documentation { get; set; }
		public string documentation_str { get; set; }
		public string name { get; set; }
		public string path { get; set; }
	}
	[CCode (cheader_filename = "valadoc-1.0.h")]
	public class WikiPageTree : GLib.Object {
		public WikiPageTree (Valadoc.ErrorReporter reporter, Valadoc.Settings settings);
		public void create_tree (Valadoc.DocumentationParser docparser) throws GLib.FileError;
		public Gee.Collection<Valadoc.WikiPage> get_pages ();
		public Valadoc.WikiPage? search (string name);
	}
	[CCode (cheader_filename = "valadoc-1.0.h")]
	public class WikiScanner : GLib.Object, Valadoc.Scanner {
		public WikiScanner (Valadoc.Settings settings);
		protected virtual void accept (unichar c) throws Valadoc.ParserError;
		public int get_line ();
		public virtual string get_line_content ();
		public virtual int get_line_start_column ();
		protected unichar get_next_char (int offset = 1);
		public virtual void reset ();
		public void set_code_escape_mode (bool escape_mode);
		public void set_url_escape_mode (bool escape_mode);
		public virtual void stop ();
	}
	[CCode (cheader_filename = "valadoc-1.0.h")]
	public interface ClassHandler : Valadoc.Api.Node {
		protected Valadoc.Class? find_vclass (Vala.Class vcl);
		public Gee.Collection<Valadoc.Class> get_class_list ();
		public void visit_classes (Valadoc.Doclet doclet);
	}
	[CCode (cheader_filename = "valadoc-1.0.h")]
	public interface ConstantHandler : Valadoc.Api.Node {
		public Gee.Collection<Valadoc.Constant> get_constant_list ();
		public void visit_constants (Valadoc.Doclet doclet);
	}
	[CCode (cheader_filename = "valadoc-1.0.h")]
	public interface ConstructionMethodHandler : Valadoc.Api.Node {
		public Gee.Collection<Valadoc.Method> get_construction_method_list ();
		public void visit_construction_methods (Valadoc.Doclet doclet);
	}
	[CCode (cheader_filename = "valadoc-1.0.h")]
	public interface DelegateHandler : Valadoc.Api.Node {
		public Gee.Collection<Valadoc.Delegate> get_delegate_list ();
		public void visit_delegates (Valadoc.Doclet doclet);
	}
	[CCode (cheader_filename = "valadoc-1.0.h")]
	public interface Documentation : GLib.Object {
		public abstract string? get_filename ();
	}
	[CCode (cheader_filename = "valadoc-1.0.h")]
	public interface EnumHandler : Valadoc.Api.Node {
		public Gee.Collection<Valadoc.Enum> get_enum_list ();
		public void visit_enums (Valadoc.Doclet doclet);
	}
	[CCode (cheader_filename = "valadoc-1.0.h")]
	public interface ErrorDomainHandler : Valadoc.Api.Node {
		public Gee.Collection<Valadoc.ErrorDomain> get_error_domain_list ();
		public void visit_error_domains (Valadoc.Doclet doclet);
	}
	[CCode (cheader_filename = "valadoc-1.0.h")]
	public interface ExceptionHandler : Valadoc.Api.Node {
		public void add_exception_list (Valadoc.Tree root, Vala.Collection<Vala.DataType> vexceptions);
		public Gee.Collection<Valadoc.Api.Node> get_error_domains ();
	}
	[CCode (cheader_filename = "valadoc-1.0.h")]
	public interface FieldHandler : Valadoc.Api.Node {
		public Gee.Collection<Valadoc.Field> get_field_list ();
		public void visit_fields (Valadoc.Doclet doclet);
	}
	[CCode (cheader_filename = "valadoc-1.0.h")]
	public interface InterfaceHandler : Valadoc.Api.Node {
		public Gee.Collection<Valadoc.Interface> get_interface_list ();
		public void visit_interfaces (Valadoc.Doclet doclet);
	}
	[CCode (cheader_filename = "valadoc-1.0.h")]
	public interface MethodHandler : Valadoc.Api.Node {
		public Gee.Collection<Valadoc.Method> get_method_list ();
		public void visit_methods (Valadoc.Doclet doclet);
	}
	[CCode (cheader_filename = "valadoc-1.0.h")]
	public interface NamespaceHandler : Valadoc.Api.Node {
		protected Valadoc.Namespace get_namespace (Vala.Symbol node);
		public Gee.Collection<Valadoc.Namespace> get_namespace_list (bool filtered = true);
		public void visit_namespaces (Valadoc.Doclet doclet);
	}
	[CCode (cheader_filename = "valadoc-1.0.h")]
	public interface ParameterListHandler : Valadoc.Api.Node {
		public Gee.List<Valadoc.FormalParameter> get_parameter_list ();
		public Gee.List<Valadoc.FormalParameter> param_list { owned get; }
	}
	[CCode (cheader_filename = "valadoc-1.0.h")]
	public interface ParserCallback {
		public abstract void error (string message, Valadoc.Token? token = null) throws Valadoc.ParserError;
		public abstract GLib.Object? get_rule_state ();
		public abstract void push_rule (Valadoc.Rule rule);
		public abstract void reduce ();
		public abstract void set_rule_state (GLib.Object state);
		public abstract void warning (string message, Valadoc.Token? token = null);
		public abstract bool would_parent_accept_token (Valadoc.Token token);
		public abstract bool would_parent_reduce_to_rule (Valadoc.Token token, Valadoc.Rule rule);
	}
	[CCode (cheader_filename = "valadoc-1.0.h")]
	public interface PropertyHandler : Valadoc.Api.Node {
		public Gee.Collection<Valadoc.Property> get_property_list ();
		protected bool is_overwritten_property (Valadoc.Property prop);
		public void visit_properties (Valadoc.Doclet doclet);
	}
	[CCode (cheader_filename = "valadoc-1.0.h")]
	public interface ResourceLocator : GLib.Object {
		public abstract string resolve (string path);
	}
	[CCode (cheader_filename = "valadoc-1.0.h")]
	public interface ReturnTypeHandler : Valadoc.Api.Item {
		public abstract Valadoc.TypeReference? type_reference { get; set; }
	}
	[CCode (cheader_filename = "valadoc-1.0.h")]
	public interface Scanner : GLib.Object {
		public abstract void end () throws Valadoc.ParserError;
		public abstract string get_line_content ();
		public abstract void reset ();
		public abstract void scan (string content) throws Valadoc.ParserError;
		public abstract void set_parser (Valadoc.Parser parser);
		public abstract void stop ();
	}
	[CCode (cheader_filename = "valadoc-1.0.h")]
	public interface SignalHandler : Valadoc.Api.Node {
		public Gee.Collection<Valadoc.Signal> get_signal_list ();
		public void visit_signals (Valadoc.Doclet doclet);
	}
	[CCode (cheader_filename = "valadoc-1.0.h")]
	public interface StructHandler : Valadoc.Api.Node {
		public Gee.Collection<Valadoc.Struct> get_struct_list ();
		public void visit_structs (Valadoc.Doclet doclet);
	}
	[CCode (cheader_filename = "valadoc-1.0.h")]
	public interface SymbolAccessibility {
		public abstract bool is_internal { get; }
		public abstract bool is_private { get; }
		public abstract bool is_protected { get; }
		public abstract bool is_public { get; }
	}
	[CCode (cheader_filename = "valadoc-1.0.h")]
	public interface TemplateParameterListHandler : Valadoc.Api.Node {
		public Gee.Collection<Valadoc.TypeParameter> get_template_param_list ();
	}
	[CCode (cheader_filename = "valadoc-1.0.h")]
	public interface Visitable : Valadoc.Api.Item {
		public abstract bool is_visitor_accessible (Valadoc.Settings settings);
	}
	[CCode (type_id = "VALADOC_TYPE_SOURCE_LOCATION", cheader_filename = "valadoc-1.0.h")]
	public struct SourceLocation {
		public int line;
		public int column;
		public SourceLocation (int _line, int _column);
	}
	[CCode (cprefix = "VALADOC_ERROR_LEVEL_", cheader_filename = "valadoc-1.0.h")]
	public enum ErrorLevel {
		ASSUMPTION,
		WARNING,
		ERROR
	}
	[CCode (cprefix = "VALADOC_PARSER_ERROR_", cheader_filename = "valadoc-1.0.h")]
	public errordomain ParserError {
		INTERNAL_ERROR,
		UNEXPECTED_TOKEN,
	}
	[CCode (cheader_filename = "valadoc-1.0.h", has_target = false)]
	public delegate GLib.Type DocletRegisterFunction ();
	[CCode (cheader_filename = "valadoc-1.0.h", has_target = false)]
	public delegate void TagletRegisterFunction (Valadoc.ModuleLoader loader);
	[CCode (cheader_filename = "valadoc-1.0.h")]
	public static bool copy_directory (string src, string dest);
	[CCode (cheader_filename = "valadoc-1.0.h")]
	public static bool copy_file (string src, string dest);
	[CCode (cheader_filename = "valadoc-1.0.h")]
	public static string realpath (string name);
}
[CCode (cheader_filename = "valadoc-1.0.h")]
public static Valadoc.Class glib_error;
