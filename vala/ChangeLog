2006-04-30  Jürg Billeter  <j@bitron.ch>

	* valac/scanner.l: support AT, CONST, VALA_FALSE, VALA_NULL, OUT, REF,
	  THIS, VALA_TRUE, USING, VAR, LITERAL_CHARACTER
	* valac/parser.y: add character, boolean, and null literals, using
	  directive, @ type qualifier, constants, ref and out variables,
	  array element access, this access, struct and array initializer,
	  var type
	* valac/context.h: add ValaEnum, ValaConstant, and ValaEnumValue structs
	* valac/context.c: support constants, struct members, enums, var type,
	  using directives
	* valac/generator.h: save pointer to current class
	* valac/generator.c: support constants, boolean and null literals,
	  array element access, using directives, this access, enums, private
	  static fields, ref and out variables, struct and array initializer,
	  boolean, character, and null literal, var type

2006-04-27  Raffaele Sandrini  <rasa@gmx.ch>

	* tests/test-008.vala:
	* tests/test-009.vala: add
	* valac/parser.y:
	* valac/scanner.l:
	* valac/context.c:
	* valac/generator.c:
	* valac/context.h: add field and property support (property parse only
	  yet)
	* AUTHORS: add myself

2006-04-26  Jürg Billeter  <j@bitron.ch>

	* valac/scanner.l: support OVERRIDE, VIRTUAL
	* valac/parser.y: add virtual methods
	* valac/context.h: support virtual methods, improve init and class_init
	* valac/context.c: set symbol in ValaMethod struct
	* valac/generator.c: support virtual methods
	* tests/test-007.vala: test virtual method declaration and invocation

2006-04-26  Jürg Billeter  <j@bitron.ch>

	* valac/scanner.l: support OPEN_BRACKET, CLOSE_BRACKET, OP_INC, OP_DEC,
	  OP_EQ, OP_NE, OP_LE, OP_GE, OP_LT, OP_GT, MINUS, STAR, DIV, ELSE, FOR,
	  IF
	* valac/parser.y: add array type references, equality expressions,
	  relational expressions, multiplicative expressions, postfix
	  operations, object creation, if conditionals, for loops
	* valac/context.h: add ValaNamedArgument struct, support if and for
	  statements
	* valac/context.c: resolve types in object creation expressions of
	  variable initializers
	* valac/generator.c: support array type references, init and class_init
	  methods, more operations, object creation, for loops, if conditionals,
	  call g_type_init in main
	* tests/test-006.vala: test instance method invocation, object creation,
	  for loop, if conditional, multiplicative expression

2006-04-25  Jürg Billeter  <j@bitron.ch>

	* valac/parser.y: save cname in class, save location of statements and
	  expressions
	* valac/context.h: add ValaStruct struct
	* valac/context.c: support symbols from methods and structs, add int
	  and string fundamental types, resolve types in local variable
	  declarations
	* valac/generator.h: save pointer to current method block
	* valac/generator.c: add special handling for main method, basic support
	  for method invocations, literals, member access, simple names,
	  additive expressions, return statments, blocks
	* tests/test-005.vala: test static method invocation, literal integer,
	  simple name, additive expression, return statement, block, main method

2006-04-24  Jürg Billeter  <j@bitron.ch>

	* valac/scanner.l: support single-line comments, ASSIGN, PLUS, RETURN,
	  LITERAL_INTEGER, LITERAL_STRING
	* valac/parser.y: add basic statements and expressions
	* valac/context.h: add ValaStatement, ValaVariableDeclaration,
	  ValaVariableDeclarator, and ValaExpression structs
	* valac/context.c: remove unreachable line

2006-04-24  Jürg Billeter  <j@bitron.ch>

	* valac/scanner.l: set token location, support OPEN_PARENS,
	  CLOSE_PARENS, SEMICOLON, PUBLIC, STATIC
	* valac/parser.y: save symbol location, output exact error location,
	  support method declarations
	* valac/context.h: add ValaLocation, ValaMethod, and ValaFormalParameter
	  structs, add location to ValaClass and ValaTypeReference structs
	* valac/context.c: output error location, support method declarations
	* valac/generator.c: support method declarations
	* valac/driver.c: add comment
	* tests/test-004.vala: test method declaration

2006-04-22  Jürg Billeter  <j@bitron.ch>

	* valac/scanner.l: support DOT, COLON, and COMMA
	* valac/parser.y: save lower and upper case cnames in namespace and
	  class objects, support base classes
	* valac/context.h: add ValaSymbol and ValaTypeReference structs, add
	  cnames to ValaNamespace and ValaClass structs
	* valac/context.c: add symbol handling, type resolving, set cnames in
	  root namespace
	* valac/generator.c: remove cname generation, support base classes
	* valac/driver.c: add symbols and resolve types
	* tests/test-003.vala: test base class
