2006-05-16  Jürg Billeter  <j@bitron.ch>

	* vala/scanner.l: fix multi-line comments
	* vala/valacodegenerator.vala: basic statement and expression handling
	* vala/valacodevisitor.vala: support variable declaration
	* vala/valasymbolbuilder.vala: adapt to visitor changes
	* vala/valaclass.vala: remove members already available in Struct
	* vala/valacodenode.vala: add ccodenode field
	* vala/valadeclarationstatement.vala: visit declaration
	* vala/valaexpressionstatement.vala: visit code containers after child
	  elements
	* vala/valalocalvariabledeclaration.vala: add accept method
	* vala/valamethod.vala: add begin and end visit events
	* vala/valanamespace.vala: add lower_case_cprefix
	* vala/valastruct.vala: define get_upper_case_cname method
	* vala/valatype.vala: declare get_upper_case_cname method
	* vala/valatypereference.vala: add get_upper_case_cname method
	* vala/valavariabledeclarator.vala: add accept method
	* ccode/valaccodewriter.vala: formatting fixes
	* ccode/valaccodeassignment.vala
	* ccode/valaccodebinaryexpression.vala
	* ccode/valaccodeblock.vala: use CCodeStatement
	* ccode/valaccodeconstant.vala
	* ccode/valaccodedeclarationstatement.vala
	* ccode/valaccodeemptystatement.vala
	* ccode/valaccodeexpression.vala
	* ccode/valaccodeexpressionstatement.vala
	* ccode/valaccodeforstatement.vala
	* ccode/valaccodefunction.vala: formatting fixes
	* ccode/valaccodefunctioncall.vala
	* ccode/valaccodeidentifier.vala
	* ccode/valaccodeifstatement.vala
	* ccode/valaccodereturnstatement.vala
	* ccode/valaccodestatement.vala
	* ccode/valaccodestruct.vala: formatting fixes
	* ccode/valaccodevariabledeclarator.vala
	* bindings/GLib.vala: extend string types
	* valac/context.c: resolve types in named argument list in object
	  creation expression

2006-05-16  Jürg Billeter  <j@bitron.ch>

	* vala/parser.y: fix unary expressions
	* vala/valacodegenerator.vala: add visit_block method
	* vala/valacodevisitor.vala: add visit methods for statements,
	  expressions, and literals
	* vala/valaassignment.vala: add accept method
	* vala/valabinaryexpression.vala: add accept method
	* vala/valablock.vala: add accept method
	* vala/valabooleanliteral.vala: add accept method
	* vala/valacastexpression.vala: add accept method
	* vala/valacharacterliteral.vala: add accept method
	* vala/valaconditionalexpression.vala: add accept method
	* vala/valaconstant.vala: visit code containers after child elements
	* vala/valadeclarationstatement.vala: add accept method
	* vala/valaemptystatement.vala: add accept method
	* vala/valaexpressionstatement.vala: add accept method
	* vala/valafield.vala: visit code containers after child elements
	* vala/valaforeachstatement.vala: add accept method
	* vala/valaformalparameter.vala: add accept method
	* vala/valaforstatement.vala: add accept method
	* vala/valaifstatement.vala: add accept method
	* vala/valaintegerliteral.vala: add accept method
	* vala/valainvocationexpression.vala: add accept method
	* vala/valaliteralexpression.vala: add accept method
	* vala/valamemberaccess.vala: add accept method
	* vala/valamethod.vala: add accept method
	* vala/valanullliteral.vala: add accept method
	* vala/valaobjectcreationexpression.vala: add accept method
	* vala/valaparenthesizedexpression.vala: add accept method
	* vala/valapostfixexpression.vala: add accept method
	* vala/valareturnstatement.vala: add accept method
	* vala/valasimplename.vala: add accept method
	* vala/valastringliteral.vala: add accept method
	* vala/valaunaryexpression.vala: fix constructor, add accept method
	* vala/valawhilestatement.vala: add accept method
	* ccode/valaccodefunction.vala: renamed from CCodeMethod

2006-05-16  Jürg Billeter  <j@bitron.ch>

	* vala/parser.y: support logical AND and OR expressions, conditional
	  expressions, assignments, constants, method parameters, and properties
	* vala/valacodevisitor.vala: add constant and property visits
	* vala/valaassignment.vala
	* vala/valabinaryexpression.vala: add bitwise xor, AND, and OR
	* vala/valaconditionalexpression.vala
	* vala/valaconstant.vala
	* vala/valaformalparameter.vala
	* vala/valainitializerlist.vala
	* vala/valamemberaccess.vala: add source_reference
	* vala/valamethod.vala: add parameters
	* vala/valaproperty.vala
	* vala/vala.h: update

2006-05-16  Jürg Billeter  <j@bitron.ch>

	* vala/parser.y: support member access, multiplicative, additive, shift,
	  equality, relational, and bitwise expressions
	* vala/valabinaryexpression.vala
	* vala/valamemberaccess.vala: add constructor
	* vala/vala.h: update

2006-05-15  Jürg Billeter  <j@bitron.ch>

	* vala/scanner.l: support assign operators
	* vala/parser.y: support assign operators and attributes
	* vala/valaattributeprocessor.vala: visitor to process compiler
	  attributes
	* vala/valacodegenerator.vala: support structs, enums, and methods
	* vala/valacodenode.vala: support attributes
	* vala/valaattribute.vala
	* vala/valamemberaccessibility.vala
	* vala/valamethod.vala
	* vala/valastruct.vala: support CCode (cname) attribute
	* vala/vala.h: update
	* compiler/valacompiler.vala: invoke AttributeProcessor
	* ccode/valaccodeblock.vala
	* ccode/valaccodeenum.vala
	* ccode/valaccodemethod.vala
	* ccode/valaccodemodifiers.vala
	* bindings/GLib.vala: add string cmp method
	* valac/scanner.l: support BITWISE_AND
	* valac/parser.y: support bitwise and
	* valac/context.h: add bitwise and
	* valac/generator.c: support enum dependencies and bitwise and

2006-05-14  Jürg Billeter  <j@bitron.ch>

	* vala/scanner.l: support OPEN_CAST_PARENS, IS, WHILE
	* vala/parser.y: support structs, enums, and fields, cast, postfix,
	  while, ref types, and generic type parameters; fix comments
	* vala/valacodecontext.vala: add root symbol
	* vala/valasourcefile.vala: add using directives, c filenames
	* vala/valacodevisitor.vala: add begin and end visits for some container
	  types, add struct, enum, field, type parameter, namespace reference,
	  and type reference visits
	* vala/valaparser.vala: adapt to visitor changes
	* vala/valasymbolbiulder.vala: visitor to fill symbol table
	* vala/valasymbolresolver.vala: visitor to resolve symbol references
	* vala/valacodegenerator.vala: add beginning of code generation
	* vala/valacodenode.vala: add symbol reference
	* vala/valacastexpression.vala
	* vala/valaclass.vala: derive from struct
	* vala/valaenum.vala
	* vala/valaexpression.vala: add static_type, field_reference, and
	  method_reference fields
	* vala/valafield.vala
	* vala/valamemberaccess.vala
	* vala/valanamespace.vala: add structs, enums, and fields
	* vala/valanamespacereference.vala
	* vala/valapostfixexpression.vala
	* vala/valasourcereference.vala: adapt to comment changes
	* vala/valastringliteral.vala: add eval method
	* vala/valastruct.vala
	* vala/valasymbol.vala
	* vala/valatype.vala
	* vala/valatypeparameter.vala: 
	* vala/valatypereference.vala: add type, type_parameter, is_ref, and
	  is_out fields, add get_cname method
	* vala/valavariabledeclarator.vala: add name and initializer fields
	* vala/valawhilestatement.vala: 
	* vala/vala.h: update
	* compiler/valacompiler.vala: run SymbolBuilder and SymbolResolver
	* ccode/valaccodewriter.vala
	* ccode/valaccodecomment.vala
	* ccode/valaccodefragment.vala
	* ccode/valaccodenode.vala
	* ccode/valaccodestruct.vala
	* bindings/GLib.vala: add/extend ustring, Path, Object, File, HashTable
	* valac/scanner.l: support OPEN_CAST_PARENS, OP_AND, OP_OR, IS, WHILE
	* valac/parser.y: support cast, while, include_filename ccode attribute,
	  AND and OR expressions, IS type checks, unary minus
	* valac/context.h: add while statements, cast and IS expressions, and
	  AND and OR operators
	* valac/context.c: support cast, IS, while; fix if
	* valac/generator.c: support cast, IS, pointer arithmetic, namespace
	  methods, imported include files
	* valac/driver.c: add symbol alias

2006-05-07  Jürg Billeter  <j@bitron.ch>

	* vala/scanner.l: tokenizer for new vala compiler
	* vala/parser.y: parser vor new vala compiler
	* vala/valablock.vala
	* vala/valabooleanliteral.vala
	* vala/valacharacterliteral.vala
	* vala/valaclass.vala: add methods
	* vala/valadeclarationstatement.vala
	* vala/valaemptystatement.vala
	* vala/valaexpression.vala
	* vala/valaexpressionstatement.vala
	* vala/valaforeachstatement.vala
	* vala/valaforstatement.vala
	* vala/valaifstatement.vala
	* vala/valaintegerliteral.vala
	* vala/valainvocationexpression.vala
	* vala/valaliteral.vala
	* vala/valaliteralexpression.vala
	* vala/valalocalvariabledeclaration.vala
	* vala/valamethod.vala
	* vala/valanamedargument.vala
	* vala/valanullliteral.vala
	* vala/valaobjectcreationexpression.vala
	* vala/valaparenthesizedexpression.vala
	* vala/valareturnstatement.vala
	* vala/valasimplename.vala
	* vala/valastatement.vala
	* vala/valastringliteral.vala
	* vala/valatypereference.vala
	* vala/valaunaryexpression.vala
	* vala/valavariabledeclarator.vala
	* vala/valacodevisitor.vala: add visit_method skeleton
	* vala/valacodegenerator.vala: do.
	* vala/vala.h: include generated header files
	* valac/generator.c: support bool and enum properties, support enums

2006-05-06  Jürg Billeter  <j@bitron.ch>

	* vala/valacodecontext.vala
	* vala/valasourcefile.vala
	* vala/valasourcereference.vala: filename, line, and comment container
	* vala/valacodenode.vala: abstract code node
	* vala/valanamespace.vala: namespace node
	* vala/valaclass.vala: class node
	* vala/valacodevisitor.vala: abstract syntax tree visitor
	* vala/valaparser.vala: vala parser
	* vala/valacodegenerator.vala: code generator skeleton
	* compiler/valacompiler.vala: compiler driver
	* bindings/GLib.vala: add bindings for GList and GOptionContext
	* valac/scanner.l: support multi-line comments, ABSTRACT, INTERFACE,
	  READONLY
	* valac/parser.y: replace AT by HASH, support readonly fields
	* valac/context.h: small fixes
	* valac/context.c: small fixes
	* valac/generator.c: fix override methods, basic support for properties

2006-05-03  Jürg Billeter  <j@bitron.ch>

	* valac/scanner.l: support OP_NEG, CONSTRUCT, FOREACH, IN
	* valac/parser.y: add foreach, construct properties; merge modifiers to
	  resolve parser conflicts
	* valac/context.h: merge modifiers
	* valac/context.c: support namespace fields, resolve types in
	  assignments, invocations, and if, for, and foreach statements
	* valac/generator.c: support negation operator, inherited fields in
	  object variables, foreach statements for arrays and GList, fix
	  circular dependencies

2006-05-02  Raffaele Sandrini  <rasa@gmx.ch>

	* tests/test-008.vala: add tests for base fields
	* valac/generator.c: remove klass local variable, add support for
	  base fields.

2006-05-01  Jürg Billeter  <j@bitron.ch>

	* valac/scanner.l: support ENUM, FLAGS, STRUCT
	* valac/parser.y: add structs, generic types, enums, flags, attributes,
	  ref and out parameters
	* valac/context.h: add ValaFlags, ValaFlagsValue, and ValaAnnotation
	  structs
	* valac/context.c: support bool, uint, pointer, generic types
	* valac/generator.h: save pointer to current struct
	* valac/generator.c: support structs, ReturnsModifiedPointer, include
	  files

2006-04-30  Jürg Billeter  <j@bitron.ch>

	* valac/scanner.l: support AT, CONST, VALA_FALSE, VALA_NULL, OUT, REF,
	  THIS, VALA_TRUE, USING, VAR, LITERAL_CHARACTER
	* valac/parser.y: add character, boolean, and null literals, using
	  directive, @ type qualifier, constants, ref and out variables,
	  array element access, this access, struct and array initializer,
	  var type
	* valac/context.h: add ValaEnum, ValaConstant, and ValaEnumValue structs
	* valac/context.c: support constants, struct members, enums, var type,
	  using directives
	* valac/generator.h: save pointer to current class
	* valac/generator.c: support constants, boolean and null literals,
	  array element access, using directives, this access, enums, private
	  static fields, ref and out variables, struct and array initializer,
	  boolean, character, and null literal, var type

2006-04-27  Raffaele Sandrini  <rasa@gmx.ch>

	* tests/test-008.vala:
	* tests/test-009.vala: add
	* valac/parser.y:
	* valac/scanner.l:
	* valac/context.c:
	* valac/generator.c:
	* valac/context.h: add field and property support (property parse only
	  yet)
	* AUTHORS: add myself

2006-04-26  Jürg Billeter  <j@bitron.ch>

	* valac/scanner.l: support OVERRIDE, VIRTUAL
	* valac/parser.y: add virtual methods
	* valac/context.h: support virtual methods, improve init and class_init
	* valac/context.c: set symbol in ValaMethod struct
	* valac/generator.c: support virtual methods
	* tests/test-007.vala: test virtual method declaration and invocation

2006-04-26  Jürg Billeter  <j@bitron.ch>

	* valac/scanner.l: support OPEN_BRACKET, CLOSE_BRACKET, OP_INC, OP_DEC,
	  OP_EQ, OP_NE, OP_LE, OP_GE, OP_LT, OP_GT, MINUS, STAR, DIV, ELSE, FOR,
	  IF
	* valac/parser.y: add array type references, equality expressions,
	  relational expressions, multiplicative expressions, postfix
	  operations, object creation, if conditionals, for loops
	* valac/context.h: add ValaNamedArgument struct, support if and for
	  statements
	* valac/context.c: resolve types in object creation expressions of
	  variable initializers
	* valac/generator.c: support array type references, init and class_init
	  methods, more operations, object creation, for loops, if conditionals,
	  call g_type_init in main
	* tests/test-006.vala: test instance method invocation, object creation,
	  for loop, if conditional, multiplicative expression

2006-04-25  Jürg Billeter  <j@bitron.ch>

	* valac/parser.y: save cname in class, save location of statements and
	  expressions
	* valac/context.h: add ValaStruct struct
	* valac/context.c: support symbols from methods and structs, add int
	  and string fundamental types, resolve types in local variable
	  declarations
	* valac/generator.h: save pointer to current method block
	* valac/generator.c: add special handling for main method, basic support
	  for method invocations, literals, member access, simple names,
	  additive expressions, return statments, blocks
	* tests/test-005.vala: test static method invocation, literal integer,
	  simple name, additive expression, return statement, block, main method

2006-04-24  Jürg Billeter  <j@bitron.ch>

	* valac/scanner.l: support single-line comments, ASSIGN, PLUS, RETURN,
	  LITERAL_INTEGER, LITERAL_STRING
	* valac/parser.y: add basic statements and expressions
	* valac/context.h: add ValaStatement, ValaVariableDeclaration,
	  ValaVariableDeclarator, and ValaExpression structs
	* valac/context.c: remove unreachable line

2006-04-24  Jürg Billeter  <j@bitron.ch>

	* valac/scanner.l: set token location, support OPEN_PARENS,
	  CLOSE_PARENS, SEMICOLON, PUBLIC, STATIC
	* valac/parser.y: save symbol location, output exact error location,
	  support method declarations
	* valac/context.h: add ValaLocation, ValaMethod, and ValaFormalParameter
	  structs, add location to ValaClass and ValaTypeReference structs
	* valac/context.c: output error location, support method declarations
	* valac/generator.c: support method declarations
	* valac/driver.c: add comment
	* tests/test-004.vala: test method declaration

2006-04-22  Jürg Billeter  <j@bitron.ch>

	* valac/scanner.l: support DOT, COLON, and COMMA
	* valac/parser.y: save lower and upper case cnames in namespace and
	  class objects, support base classes
	* valac/context.h: add ValaSymbol and ValaTypeReference structs, add
	  cnames to ValaNamespace and ValaClass structs
	* valac/context.c: add symbol handling, type resolving, set cnames in
	  root namespace
	* valac/generator.c: remove cname generation, support base classes
	* valac/driver.c: add symbols and resolve types
	* tests/test-003.vala: test base class
