/* libsexy.vapi generated by lt-vapigen, do not modify. */

[CCode (cprefix = "Sexy", lower_case_cprefix = "sexy_")]
namespace Sexy {
	[CCode (cheader_filename = "libsexy/sexy.h")]
	public class IconEntry : Gtk.Entry, Atk.Implementor, Gtk.Buildable, Gtk.Editable, Gtk.CellEditable {
		public void add_clear_button ();
		public weak Gtk.Image get_icon (Sexy.IconEntryPosition position);
		public bool get_icon_highlight (Sexy.IconEntryPosition position);
		[CCode (type = "GtkWidget*", has_construct_function = false)]
		public IconEntry ();
		public void set_icon (Sexy.IconEntryPosition position, Gtk.Image? icon);
		public void set_icon_highlight (Sexy.IconEntryPosition position, bool highlight);
		public virtual signal void icon_pressed (int icon_pos, int button);
		public virtual signal void icon_released (int icon_pos, int button);
	}
	[CCode (cheader_filename = "libsexy/sexy.h")]
	public class SpellEntry : Gtk.Entry, Atk.Implementor, Gtk.Buildable, Gtk.Editable, Gtk.CellEditable {
		public void activate_default_languages ();
		public bool activate_language (string lang) throws GLib.Error;
		public void deactivate_language (string lang);
		public weak GLib.SList get_active_languages ();
		public weak string get_language_name (string lang);
		public weak GLib.SList get_languages ();
		public bool is_checked ();
		public bool language_is_active (string lang);
		[CCode (type = "GtkWidget*", has_construct_function = false)]
		public SpellEntry ();
		public bool set_active_languages (GLib.SList langs) throws GLib.Error;
		public void set_checked (bool checked);
		public virtual signal bool word_check (string word);
	}
	[CCode (cheader_filename = "libsexy/sexy.h")]
	public class Tooltip : Gtk.Window, Atk.Implementor, Gtk.Buildable {
		[CCode (type = "GtkWidget*", has_construct_function = false)]
		public Tooltip ();
		public void position_to_rect (Gdk.Rectangle rect, Gdk.Screen screen);
		public void position_to_widget (Gtk.Widget widget);
		[CCode (type = "GtkWidget*", has_construct_function = false)]
		public Tooltip.with_label (string text);
	}
	[CCode (cheader_filename = "libsexy/sexy.h")]
	public class TreeView : Gtk.TreeView, Atk.Implementor, Gtk.Buildable {
		[CCode (type = "GtkWidget*", has_construct_function = false)]
		public TreeView ();
		public void set_tooltip_label_column (uint column);
		public virtual signal weak Gtk.Widget get_tooltip (Gtk.TreePath path, Gtk.TreeViewColumn column);
	}
	[CCode (cheader_filename = "libsexy/sexy.h")]
	public class UrlLabel : Gtk.Label, Atk.Implementor, Gtk.Buildable {
		[CCode (type = "GtkWidget*", has_construct_function = false)]
		public UrlLabel ();
		public void set_markup (string markup);
		public virtual signal void url_activated (string url);
	}
	[CCode (cprefix = "SEXY_ICON_ENTRY_", cheader_filename = "libsexy/sexy.h")]
	public enum IconEntryPosition {
		PRIMARY,
		SECONDARY
	}
	[CCode (cprefix = "SEXY_SPELL_ERROR_", cheader_filename = "libsexy/sexy.h")]
	public enum SpellError {
		BACKEND
	}
	[CCode (cheader_filename = "libsexy/sexy.h")]
	public static GLib.Quark spell_error_quark ();
}
