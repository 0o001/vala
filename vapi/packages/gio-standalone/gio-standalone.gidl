<?xml version="1.0"?>
<api version="1.0">
  <!--

        This file was automatically generated.
        Please DO NOT MODIFY THIS FILE, modify .metadata files instead.

-->
  <namespace name="GLib">
    <enum name="GDirectoryMonitorEvent" type="enum" type-name="GDirectoryMonitorEvent">
      <member name="G_DIRECTORY_MONITOR_EVENT_CHANGED" value=""/>
      <member name="G_DIRECTORY_MONITOR_EVENT_DELETED" value=""/>
      <member name="G_DIRECTORY_MONITOR_EVENT_CREATED" value=""/>
      <member name="G_DIRECTORY_MONITOR_EVENT_ATTRIBUTE_CHANGED" value=""/>
      <member name="G_DIRECTORY_MONITOR_EVENT_UNMOUNTED" value=""/>
    </enum>
    <enum name="GFileAttributeType" type="enum" type-name="GFileAttributeType">
      <member name="G_FILE_ATTRIBUTE_TYPE_INVALID" value="0"/>
      <member name="G_FILE_ATTRIBUTE_TYPE_STRING" value=""/>
      <member name="G_FILE_ATTRIBUTE_TYPE_BYTE_STRING" value=""/>
      <member name="G_FILE_ATTRIBUTE_TYPE_UINT32" value=""/>
      <member name="G_FILE_ATTRIBUTE_TYPE_INT32" value=""/>
      <member name="G_FILE_ATTRIBUTE_TYPE_UINT64" value=""/>
      <member name="G_FILE_ATTRIBUTE_TYPE_INT64" value=""/>
    </enum>
    <enum name="GFileCopyFlags" type="flags" type-name="GFileCopyFlags">
      <member name="G_FILE_COPY_OVERWRITE" value=""/>
      <member name="G_FILE_COPY_BACKUP" value=""/>
    </enum>
    <enum name="GFileFlags" type="flags" type-name="GFileFlags">
      <member name="G_FILE_FLAG_HIDDEN" value=""/>
      <member name="G_FILE_FLAG_SYMLINK" value=""/>
      <member name="G_FILE_FLAG_LOCAL" value=""/>
      <member name="G_FILE_FLAG_VIRTUAL" value=""/>
    </enum>
    <enum name="GFileGetInfoFlags" type="flags" type-name="GFileGetInfoFlags">
      <member name="G_FILE_GET_INFO_NOFOLLOW_SYMLINKS" value=""/>
    </enum>
    <enum name="GFileMonitorEvent" type="enum" type-name="GFileMonitorEvent">
      <member name="G_FILE_MONITOR_EVENT_CHANGED" value=""/>
      <member name="G_FILE_MONITOR_EVENT_DELETED" value=""/>
      <member name="G_FILE_MONITOR_EVENT_CREATED" value=""/>
      <member name="G_FILE_MONITOR_EVENT_ATTRIBUTE_CHANGED" value=""/>
      <member name="G_FILE_MONITOR_EVENT_UNMOUNTED" value=""/>
    </enum>
    <enum name="GFileType" type="enum" type-name="GFileType">
      <member name="G_FILE_TYPE_UNKNOWN" value="0"/>
      <member name="G_FILE_TYPE_REGULAR" value=""/>
      <member name="G_FILE_TYPE_DIRECTORY" value=""/>
      <member name="G_FILE_TYPE_SYMBOLIC_LINK" value=""/>
      <member name="G_FILE_TYPE_SPECIAL" value=""/>
      <member name="G_FILE_TYPE_SHORTCUT" value=""/>
      <member name="G_FILE_TYPE_MOUNTABLE" value=""/>
    </enum>
    <enum name="GIOErrorEnum" type="enum" type-name="GIOErrorEnum">
      <member name="G_IO_ERROR_FAILED" value=""/>
      <member name="G_IO_ERROR_NOT_FOUND" value=""/>
      <member name="G_IO_ERROR_EXISTS" value=""/>
      <member name="G_IO_ERROR_IS_DIRECTORY" value=""/>
      <member name="G_IO_ERROR_NOT_DIRECTORY" value=""/>
      <member name="G_IO_ERROR_NOT_EMPTY" value=""/>
      <member name="G_IO_ERROR_NOT_REGULAR_FILE" value=""/>
      <member name="G_IO_ERROR_NOT_SYMBOLIC_LINK" value=""/>
      <member name="G_IO_ERROR_NOT_MOUNTABLE" value=""/>
      <member name="G_IO_ERROR_FILENAME_TOO_LONG" value=""/>
      <member name="G_IO_ERROR_INVALID_FILENAME" value=""/>
      <member name="G_IO_ERROR_TOO_MANY_LINKS" value=""/>
      <member name="G_IO_ERROR_NO_SPACE" value=""/>
      <member name="G_IO_ERROR_INVALID_ARGUMENT" value=""/>
      <member name="G_IO_ERROR_PERMISSION_DENIED" value=""/>
      <member name="G_IO_ERROR_NOT_SUPPORTED" value=""/>
      <member name="G_IO_ERROR_NOT_MOUNTED" value=""/>
      <member name="G_IO_ERROR_ALREADY_MOUNTED" value=""/>
      <member name="G_IO_ERROR_CLOSED" value=""/>
      <member name="G_IO_ERROR_CANCELLED" value=""/>
      <member name="G_IO_ERROR_PENDING" value=""/>
      <member name="G_IO_ERROR_READ_ONLY" value=""/>
      <member name="G_IO_ERROR_CANT_CREATE_BACKUP" value=""/>
      <member name="G_IO_ERROR_WRONG_MTIME" value=""/>
      <member name="G_IO_ERROR_TIMED_OUT" value=""/>
    </enum>
    <enum name="GPasswordFlags" type="flags" type-name="GPasswordFlags">
      <member name="G_PASSWORD_FLAGS_NEED_PASSWORD" value=""/>
      <member name="G_PASSWORD_FLAGS_NEED_USERNAME" value=""/>
      <member name="G_PASSWORD_FLAGS_NEED_DOMAIN" value=""/>
      <member name="G_PASSWORD_FLAGS_SAVING_SUPPORTED" value=""/>
      <member name="G_PASSWORD_FLAGS_ANON_SUPPORTED" value=""/>
    </enum>
    <enum name="GPasswordSave" type="enum" type-name="GPasswordSave">
      <member name="G_PASSWORD_SAVE_NEVER" value=""/>
      <member name="G_PASSWORD_SAVE_FOR_SESSION" value=""/>
      <member name="G_PASSWORD_SAVE_PERMANENTLY" value=""/>
    </enum>
    <enum name="GUnixMountType" type="enum" type-name="GUnixMountType">
      <member name="G_UNIX_MOUNT_TYPE_UNKNOWN" value=""/>
      <member name="G_UNIX_MOUNT_TYPE_FLOPPY" value=""/>
      <member name="G_UNIX_MOUNT_TYPE_CDROM" value=""/>
      <member name="G_UNIX_MOUNT_TYPE_NFS" value=""/>
      <member name="G_UNIX_MOUNT_TYPE_ZIP" value=""/>
      <member name="G_UNIX_MOUNT_TYPE_JAZ" value=""/>
      <member name="G_UNIX_MOUNT_TYPE_MEMSTICK" value=""/>
      <member name="G_UNIX_MOUNT_TYPE_CF" value=""/>
      <member name="G_UNIX_MOUNT_TYPE_SM" value=""/>
      <member name="G_UNIX_MOUNT_TYPE_SDMMC" value=""/>
      <member name="G_UNIX_MOUNT_TYPE_IPOD" value=""/>
      <member name="G_UNIX_MOUNT_TYPE_CAMERA" value=""/>
      <member name="G_UNIX_MOUNT_TYPE_HD" value=""/>
    </enum>
    <callback name="GAsyncNextFilesCallback" type-name="GAsyncNextFilesCallback">
      <return-type type="void"/>
      <parameters>
        <parameter name="enumerator" type="GFileEnumerator*"/>
        <parameter name="files" type="GList*"/>
        <parameter name="num_files" type="int"/>
        <parameter name="user_data" type="gpointer"/>
        <parameter name="error" type="GError*"/>
      </parameters>
    </callback>
    <callback name="GAsyncReadyCallback" type-name="GAsyncReadyCallback">
      <return-type type="void"/>
      <parameters>
        <parameter name="source_object" type="GObject*"/>
        <parameter name="res" type="GAsyncResult*"/>
        <parameter name="user_data" type="gpointer"/>
      </parameters>
    </callback>
    <callback name="GAsyncStopEnumeratingCallback" type-name="GAsyncStopEnumeratingCallback">
      <return-type type="void"/>
      <parameters>
        <parameter name="enumerator" type="GFileEnumerator*"/>
        <parameter name="result" type="gboolean"/>
        <parameter name="user_data" type="gpointer"/>
        <parameter name="error" type="GError*"/>
      </parameters>
    </callback>
    <callback name="GFDSourceFunc" type-name="GFDSourceFunc">
      <return-type type="gboolean"/>
      <parameters>
        <parameter name="user_data" type="gpointer"/>
        <parameter name="condition" type="GIOCondition"/>
        <parameter name="fd" type="int"/>
      </parameters>
    </callback>
    <callback name="GFileProgressCallback" type-name="GFileProgressCallback">
      <return-type type="void"/>
      <parameters>
        <parameter name="current_num_bytes" type="goffset"/>
        <parameter name="total_num_bytes" type="goffset"/>
        <parameter name="user_data" type="gpointer"/>
      </parameters>
    </callback>
    <callback name="GIODataFunc" type-name="GIODataFunc">
      <return-type type="void"/>
      <parameters>
        <parameter name="user_data" type="gpointer"/>
      </parameters>
    </callback>
    <callback name="GIOJobFunc" type-name="GIOJobFunc">
      <return-type type="void"/>
      <parameters>
        <parameter name="job" type="GIOJob*"/>
        <parameter name="cancellable" type="GCancellable*"/>
        <parameter name="user_data" type="gpointer"/>
      </parameters>
    </callback>
    <callback name="GSimpleAsyncThreadFunc" type-name="GSimpleAsyncThreadFunc">
      <return-type type="void"/>
      <parameters>
        <parameter name="res" type="GSimpleAsyncResult*"/>
        <parameter name="object" type="GObject*"/>
        <parameter name="cancellable" type="GCancellable*"/>
      </parameters>
    </callback>
    <callback name="GUnixMountCallback" type-name="GUnixMountCallback">
      <return-type type="void"/>
      <parameters>
        <parameter name="user_data" type="gpointer"/>
      </parameters>
    </callback>
    <interface get-type="" name="GAppInfo" type-name="GAppInfo">
      <vfunc name="dup">
        <return-type type="GAppInfo*"/>
        <parameters>
          <parameter name="appinfo" type="GAppInfo*"/>
        </parameters>
      </vfunc>
      <vfunc name="equal">
        <return-type type="gboolean"/>
        <parameters>
          <parameter name="appinfo1" type="GAppInfo*"/>
          <parameter name="appinfo2" type="GAppInfo*"/>
        </parameters>
      </vfunc>
      <vfunc name="get_name">
        <return-type type="char*"/>
        <parameters>
          <parameter name="appinfo" type="GAppInfo*"/>
        </parameters>
      </vfunc>
      <vfunc name="get_description">
        <return-type type="char*"/>
        <parameters>
          <parameter name="appinfo" type="GAppInfo*"/>
        </parameters>
      </vfunc>
      <vfunc name="get_icon">
        <return-type type="char*"/>
        <parameters>
          <parameter name="appinfo" type="GAppInfo*"/>
        </parameters>
      </vfunc>
      <vfunc name="launch">
        <return-type type="gboolean"/>
        <parameters>
          <parameter name="appinfo" type="GAppInfo*"/>
          <parameter name="filenames" type="GList*"/>
          <parameter name="envp" type="char**"/>
          <parameter name="error" type="GError**"/>
        </parameters>
      </vfunc>
      <vfunc name="supports_uris">
        <return-type type="gboolean"/>
        <parameters>
          <parameter name="appinfo" type="GAppInfo*"/>
        </parameters>
      </vfunc>
      <vfunc name="launch_uris">
        <return-type type="gboolean"/>
        <parameters>
          <parameter name="appinfo" type="GAppInfo*"/>
          <parameter name="uris" type="GList*"/>
          <parameter name="envp" type="char**"/>
          <parameter name="error" type="GError**"/>
        </parameters>
      </vfunc>
      <vfunc name="should_show">
        <return-type type="gboolean"/>
        <parameters>
          <parameter name="appinfo" type="GAppInfo*"/>
          <parameter name="desktop_env" type="const-char*"/>
        </parameters>
      </vfunc>
      <vfunc name="supports_xdg_startup_notify">
        <return-type type="gboolean"/>
        <parameters>
          <parameter name="appinfo" type="GAppInfo*"/>
        </parameters>
      </vfunc>
      <vfunc name="set_as_default_for_type">
        <return-type type="gboolean"/>
        <parameters>
          <parameter name="appinfo" type="GAppInfo*"/>
          <parameter name="content_type" type="const-char*"/>
          <parameter name="error" type="GError**"/>
        </parameters>
      </vfunc>
      <method name="create_from_commandline" symbol="g_app_info_create_from_commandline">
        <return-type type="GAppInfo*"/>
        <parameters>
          <parameter name="commandline" type="const-char*"/>
          <parameter name="application_name" type="const-char*"/>
          <parameter name="error" type="GError**"/>
        </parameters>
      </method>
      <method name="dup" symbol="g_app_info_dup">
        <return-type type="GAppInfo*"/>
        <parameters>
          <parameter name="appinfo" type="GAppInfo*"/>
        </parameters>
      </method>
      <method name="equal" symbol="g_app_info_equal">
        <return-type type="gboolean"/>
        <parameters>
          <parameter name="appinfo1" type="GAppInfo*"/>
          <parameter name="appinfo2" type="GAppInfo*"/>
        </parameters>
      </method>
      <method name="get_description" symbol="g_app_info_get_description">
        <return-type type="char*"/>
        <parameters>
          <parameter name="appinfo" type="GAppInfo*"/>
        </parameters>
      </method>
      <method name="get_icon" symbol="g_app_info_get_icon">
        <return-type type="char*"/>
        <parameters>
          <parameter name="appinfo" type="GAppInfo*"/>
        </parameters>
      </method>
      <method name="get_name" symbol="g_app_info_get_name">
        <return-type type="char*"/>
        <parameters>
          <parameter name="appinfo" type="GAppInfo*"/>
        </parameters>
      </method>
      <method name="get_type" symbol="g_app_info_get_type">
        <return-type type="GType"/>
      </method>
      <method name="launch" symbol="g_app_info_launch">
        <return-type type="gboolean"/>
        <parameters>
          <parameter name="appinfo" type="GAppInfo*"/>
          <parameter name="filenames" type="GList*"/>
          <parameter name="envp" type="char**"/>
          <parameter name="error" type="GError**"/>
        </parameters>
      </method>
      <method name="launch_uris" symbol="g_app_info_launch_uris">
        <return-type type="gboolean"/>
        <parameters>
          <parameter name="appinfo" type="GAppInfo*"/>
          <parameter name="uris" type="GList*"/>
          <parameter name="envp" type="char**"/>
          <parameter name="error" type="GError**"/>
        </parameters>
      </method>
      <method name="set_as_default_for_type" symbol="g_app_info_set_as_default_for_type">
        <return-type type="gboolean"/>
        <parameters>
          <parameter name="appinfo" type="GAppInfo*"/>
          <parameter name="content_type" type="const-char*"/>
          <parameter name="error" type="GError**"/>
        </parameters>
      </method>
      <method name="should_show" symbol="g_app_info_should_show">
        <return-type type="gboolean"/>
        <parameters>
          <parameter name="appinfo" type="GAppInfo*"/>
          <parameter name="desktop_env" type="const-char*"/>
        </parameters>
      </method>
      <method name="supports_uris" symbol="g_app_info_supports_uris">
        <return-type type="gboolean"/>
        <parameters>
          <parameter name="appinfo" type="GAppInfo*"/>
        </parameters>
      </method>
      <method name="supports_xdg_startup_notify" symbol="g_app_info_supports_xdg_startup_notify">
        <return-type type="gboolean"/>
        <parameters>
          <parameter name="appinfo" type="GAppInfo*"/>
        </parameters>
      </method>
    </interface>
    <interface get-type="" name="GAsyncResult" type-name="GAsyncResult">
      <vfunc name="get_user_data">
        <return-type type="gpointer"/>
        <parameters>
          <parameter name="async_result" type="GAsyncResult*"/>
        </parameters>
      </vfunc>
      <vfunc name="get_source_object">
        <return-type type="GObject*"/>
        <parameters>
          <parameter name="async_result" type="GAsyncResult*"/>
        </parameters>
      </vfunc>
      <method name="get_source_object" symbol="g_async_result_get_source_object">
        <return-type type="GObject*"/>
        <parameters>
          <parameter name="res" type="GAsyncResult*"/>
        </parameters>
      </method>
      <method name="get_type" symbol="g_async_result_get_type">
        <return-type type="GType"/>
      </method>
      <method name="get_user_data" symbol="g_async_result_get_user_data">
        <return-type type="gpointer"/>
        <parameters>
          <parameter name="res" type="GAsyncResult*"/>
        </parameters>
      </method>
    </interface>
    <interface get-type="" name="GDrive" type-name="GDrive">
      <signal name="changed" when="LAST">
        <return-type type="void"/>
        <parameters>
          <parameter name="volume" type="GVolume*"/>
        </parameters>
      </signal>
      <vfunc name="get_name">
        <return-type type="char*"/>
        <parameters>
          <parameter name="drive" type="GDrive*"/>
        </parameters>
      </vfunc>
      <vfunc name="get_icon">
        <return-type type="char*"/>
        <parameters>
          <parameter name="drive" type="GDrive*"/>
        </parameters>
      </vfunc>
      <vfunc name="get_volumes">
        <return-type type="GList*"/>
        <parameters>
          <parameter name="drive" type="GDrive*"/>
        </parameters>
      </vfunc>
      <vfunc name="is_automounted">
        <return-type type="gboolean"/>
        <parameters>
          <parameter name="drive" type="GDrive*"/>
        </parameters>
      </vfunc>
      <vfunc name="can_mount">
        <return-type type="gboolean"/>
        <parameters>
          <parameter name="drive" type="GDrive*"/>
        </parameters>
      </vfunc>
      <vfunc name="can_eject">
        <return-type type="gboolean"/>
        <parameters>
          <parameter name="drive" type="GDrive*"/>
        </parameters>
      </vfunc>
      <vfunc name="mount">
        <return-type type="void"/>
        <parameters>
          <parameter name="drive" type="GDrive*"/>
          <parameter name="mount_operation" type="GMountOperation*"/>
          <parameter name="callback" type="GAsyncReadyCallback"/>
          <parameter name="user_data" type="gpointer"/>
        </parameters>
      </vfunc>
      <vfunc name="mount_finish">
        <return-type type="gboolean"/>
        <parameters>
          <parameter name="drive" type="GDrive*"/>
          <parameter name="result" type="GAsyncResult*"/>
          <parameter name="error" type="GError**"/>
        </parameters>
      </vfunc>
      <vfunc name="eject">
        <return-type type="void"/>
        <parameters>
          <parameter name="drive" type="GDrive*"/>
          <parameter name="callback" type="GAsyncReadyCallback"/>
          <parameter name="user_data" type="gpointer"/>
        </parameters>
      </vfunc>
      <vfunc name="eject_finish">
        <return-type type="gboolean"/>
        <parameters>
          <parameter name="drive" type="GDrive*"/>
          <parameter name="result" type="GAsyncResult*"/>
          <parameter name="error" type="GError**"/>
        </parameters>
      </vfunc>
      <method name="can_eject" symbol="g_drive_can_eject">
        <return-type type="gboolean"/>
        <parameters>
          <parameter name="drive" type="GDrive*"/>
        </parameters>
      </method>
      <method name="can_mount" symbol="g_drive_can_mount">
        <return-type type="gboolean"/>
        <parameters>
          <parameter name="drive" type="GDrive*"/>
        </parameters>
      </method>
      <method name="eject" symbol="g_drive_eject">
        <return-type type="void"/>
        <parameters>
          <parameter name="drive" type="GDrive*"/>
          <parameter name="callback" type="GAsyncReadyCallback"/>
          <parameter name="user_data" type="gpointer"/>
        </parameters>
      </method>
      <method name="eject_finish" symbol="g_drive_eject_finish">
        <return-type type="gboolean"/>
        <parameters>
          <parameter name="drive" type="GDrive*"/>
          <parameter name="result" type="GAsyncResult*"/>
          <parameter name="error" type="GError**"/>
        </parameters>
      </method>
      <method name="get_icon" symbol="g_drive_get_icon">
        <return-type type="char*"/>
        <parameters>
          <parameter name="drive" type="GDrive*"/>
        </parameters>
      </method>
      <method name="get_name" symbol="g_drive_get_name">
        <return-type type="char*"/>
        <parameters>
          <parameter name="drive" type="GDrive*"/>
        </parameters>
      </method>
      <method name="get_platform_id" symbol="g_drive_get_platform_id">
        <return-type type="char*"/>
        <parameters>
          <parameter name="drive" type="GDrive*"/>
        </parameters>
      </method>
      <method name="get_type" symbol="g_drive_get_type">
        <return-type type="GType"/>
      </method>
      <method name="get_volumes" symbol="g_drive_get_volumes">
        <return-type type="GList*"/>
        <parameters>
          <parameter name="drive" type="GDrive*"/>
        </parameters>
      </method>
      <method name="is_automounted" symbol="g_drive_is_automounted">
        <return-type type="gboolean"/>
        <parameters>
          <parameter name="drive" type="GDrive*"/>
        </parameters>
      </method>
      <method name="mount" symbol="g_drive_mount">
        <return-type type="void"/>
        <parameters>
          <parameter name="drive" type="GDrive*"/>
          <parameter name="mount_operation" type="GMountOperation*"/>
          <parameter name="callback" type="GAsyncReadyCallback"/>
          <parameter name="user_data" type="gpointer"/>
        </parameters>
      </method>
      <method name="mount_finish" symbol="g_drive_mount_finish">
        <return-type type="gboolean"/>
        <parameters>
          <parameter name="drive" type="GDrive*"/>
          <parameter name="result" type="GAsyncResult*"/>
          <parameter name="error" type="GError**"/>
        </parameters>
      </method>
    </interface>
    <interface get-type="" name="GFile" type-name="GFile">
      <vfunc name="dup">
        <return-type type="GFile*"/>
        <parameters>
          <parameter name="file" type="GFile*"/>
        </parameters>
      </vfunc>
      <vfunc name="hash">
        <return-type type="guint"/>
        <parameters>
          <parameter name="file" type="GFile*"/>
        </parameters>
      </vfunc>
      <vfunc name="equal">
        <return-type type="gboolean"/>
        <parameters>
          <parameter name="file1" type="GFile*"/>
          <parameter name="file2" type="GFile*"/>
        </parameters>
      </vfunc>
      <vfunc name="is_native">
        <return-type type="gboolean"/>
        <parameters>
          <parameter name="file" type="GFile*"/>
        </parameters>
      </vfunc>
      <vfunc name="get_basename">
        <return-type type="char*"/>
        <parameters>
          <parameter name="file" type="GFile*"/>
        </parameters>
      </vfunc>
      <vfunc name="get_path">
        <return-type type="char*"/>
        <parameters>
          <parameter name="file" type="GFile*"/>
        </parameters>
      </vfunc>
      <vfunc name="get_uri">
        <return-type type="char*"/>
        <parameters>
          <parameter name="file" type="GFile*"/>
        </parameters>
      </vfunc>
      <vfunc name="get_parse_name">
        <return-type type="char*"/>
        <parameters>
          <parameter name="file" type="GFile*"/>
        </parameters>
      </vfunc>
      <vfunc name="get_parent">
        <return-type type="GFile*"/>
        <parameters>
          <parameter name="file" type="GFile*"/>
        </parameters>
      </vfunc>
      <vfunc name="resolve_relative">
        <return-type type="GFile*"/>
        <parameters>
          <parameter name="file" type="GFile*"/>
          <parameter name="relative_path" type="const-char*"/>
        </parameters>
      </vfunc>
      <vfunc name="get_child_for_display_name">
        <return-type type="GFile*"/>
        <parameters>
          <parameter name="file" type="GFile*"/>
          <parameter name="display_name" type="const-char*"/>
          <parameter name="error" type="GError**"/>
        </parameters>
      </vfunc>
      <vfunc name="enumerate_children">
        <return-type type="GFileEnumerator*"/>
        <parameters>
          <parameter name="file" type="GFile*"/>
          <parameter name="attributes" type="const-char*"/>
          <parameter name="flags" type="GFileGetInfoFlags"/>
          <parameter name="cancellable" type="GCancellable*"/>
          <parameter name="error" type="GError**"/>
        </parameters>
      </vfunc>
      <vfunc name="get_info">
        <return-type type="GFileInfo*"/>
        <parameters>
          <parameter name="file" type="GFile*"/>
          <parameter name="attributes" type="const-char*"/>
          <parameter name="flags" type="GFileGetInfoFlags"/>
          <parameter name="cancellable" type="GCancellable*"/>
          <parameter name="error" type="GError**"/>
        </parameters>
      </vfunc>
      <vfunc name="get_filesystem_info">
        <return-type type="GFileInfo*"/>
        <parameters>
          <parameter name="file" type="GFile*"/>
          <parameter name="attributes" type="const-char*"/>
          <parameter name="cancellable" type="GCancellable*"/>
          <parameter name="error" type="GError**"/>
        </parameters>
      </vfunc>
      <vfunc name="set_display_name">
        <return-type type="GFile*"/>
        <parameters>
          <parameter name="file" type="GFile*"/>
          <parameter name="display_name" type="const-char*"/>
          <parameter name="cancellable" type="GCancellable*"/>
          <parameter name="error" type="GError**"/>
        </parameters>
      </vfunc>
      <vfunc name="set_attribute">
        <return-type type="gboolean"/>
        <parameters>
          <parameter name="file" type="GFile*"/>
          <parameter name="attribute" type="const-char*"/>
          <parameter name="type" type="GFileAttributeType"/>
          <parameter name="data" type="gconstpointer"/>
          <parameter name="flags" type="GFileGetInfoFlags"/>
          <parameter name="cancellable" type="GCancellable*"/>
          <parameter name="error" type="GError**"/>
        </parameters>
      </vfunc>
      <vfunc name="read">
        <return-type type="GFileInputStream*"/>
        <parameters>
          <parameter name="file" type="GFile*"/>
          <parameter name="cancellable" type="GCancellable*"/>
          <parameter name="error" type="GError**"/>
        </parameters>
      </vfunc>
      <vfunc name="append_to">
        <return-type type="GFileOutputStream*"/>
        <parameters>
          <parameter name="file" type="GFile*"/>
          <parameter name="cancellable" type="GCancellable*"/>
          <parameter name="error" type="GError**"/>
        </parameters>
      </vfunc>
      <vfunc name="create">
        <return-type type="GFileOutputStream*"/>
        <parameters>
          <parameter name="file" type="GFile*"/>
          <parameter name="cancellable" type="GCancellable*"/>
          <parameter name="error" type="GError**"/>
        </parameters>
      </vfunc>
      <vfunc name="replace">
        <return-type type="GFileOutputStream*"/>
        <parameters>
          <parameter name="file" type="GFile*"/>
          <parameter name="mtime" type="time_t"/>
          <parameter name="make_backup" type="gboolean"/>
          <parameter name="cancellable" type="GCancellable*"/>
          <parameter name="error" type="GError**"/>
        </parameters>
      </vfunc>
      <vfunc name="delete_file">
        <return-type type="gboolean"/>
        <parameters>
          <parameter name="file" type="GFile*"/>
          <parameter name="cancellable" type="GCancellable*"/>
          <parameter name="error" type="GError**"/>
        </parameters>
      </vfunc>
      <vfunc name="trash">
        <return-type type="gboolean"/>
        <parameters>
          <parameter name="file" type="GFile*"/>
          <parameter name="cancellable" type="GCancellable*"/>
          <parameter name="error" type="GError**"/>
        </parameters>
      </vfunc>
      <vfunc name="make_directory">
        <return-type type="gboolean"/>
        <parameters>
          <parameter name="file" type="GFile*"/>
          <parameter name="cancellable" type="GCancellable*"/>
          <parameter name="error" type="GError**"/>
        </parameters>
      </vfunc>
      <vfunc name="make_symbolic_link">
        <return-type type="gboolean"/>
        <parameters>
          <parameter name="file" type="GFile*"/>
          <parameter name="symlink_value" type="const-char*"/>
          <parameter name="cancellable" type="GCancellable*"/>
          <parameter name="error" type="GError**"/>
        </parameters>
      </vfunc>
      <vfunc name="copy">
        <return-type type="gboolean"/>
        <parameters>
          <parameter name="source" type="GFile*"/>
          <parameter name="destination" type="GFile*"/>
          <parameter name="flags" type="GFileCopyFlags"/>
          <parameter name="cancellable" type="GCancellable*"/>
          <parameter name="progress_callback" type="GFileProgressCallback"/>
          <parameter name="progress_callback_data" type="gpointer"/>
          <parameter name="error" type="GError**"/>
        </parameters>
      </vfunc>
      <vfunc name="move">
        <return-type type="gboolean"/>
        <parameters>
          <parameter name="source" type="GFile*"/>
          <parameter name="destination" type="GFile*"/>
          <parameter name="flags" type="GFileCopyFlags"/>
          <parameter name="cancellable" type="GCancellable*"/>
          <parameter name="progress_callback" type="GFileProgressCallback"/>
          <parameter name="progress_callback_data" type="gpointer"/>
          <parameter name="error" type="GError**"/>
        </parameters>
      </vfunc>
      <vfunc name="read_async">
        <return-type type="void"/>
        <parameters>
          <parameter name="file" type="GFile*"/>
          <parameter name="io_priority" type="int"/>
          <parameter name="cancellable" type="GCancellable*"/>
          <parameter name="callback" type="GAsyncReadyCallback"/>
          <parameter name="user_data" type="gpointer"/>
        </parameters>
      </vfunc>
      <vfunc name="read_finish">
        <return-type type="GFileInputStream*"/>
        <parameters>
          <parameter name="file" type="GFile*"/>
          <parameter name="res" type="GAsyncResult*"/>
          <parameter name="error" type="GError**"/>
        </parameters>
      </vfunc>
      <vfunc name="mount_mountable">
        <return-type type="void"/>
        <parameters>
          <parameter name="file" type="GFile*"/>
          <parameter name="mount_operation" type="GMountOperation*"/>
          <parameter name="cancellable" type="GCancellable*"/>
          <parameter name="callback" type="GAsyncReadyCallback"/>
          <parameter name="user_data" type="gpointer"/>
        </parameters>
      </vfunc>
      <vfunc name="mount_mountable_finish">
        <return-type type="GFile*"/>
        <parameters>
          <parameter name="file" type="GFile*"/>
          <parameter name="result" type="GAsyncResult*"/>
          <parameter name="error" type="GError**"/>
        </parameters>
      </vfunc>
      <vfunc name="unmount_mountable">
        <return-type type="void"/>
        <parameters>
          <parameter name="file" type="GFile*"/>
          <parameter name="cancellable" type="GCancellable*"/>
          <parameter name="callback" type="GAsyncReadyCallback"/>
          <parameter name="user_data" type="gpointer"/>
        </parameters>
      </vfunc>
      <vfunc name="unmount_mountable_finish">
        <return-type type="gboolean"/>
        <parameters>
          <parameter name="file" type="GFile*"/>
          <parameter name="result" type="GAsyncResult*"/>
          <parameter name="error" type="GError**"/>
        </parameters>
      </vfunc>
      <vfunc name="eject_mountable">
        <return-type type="void"/>
        <parameters>
          <parameter name="file" type="GFile*"/>
          <parameter name="cancellable" type="GCancellable*"/>
          <parameter name="callback" type="GAsyncReadyCallback"/>
          <parameter name="user_data" type="gpointer"/>
        </parameters>
      </vfunc>
      <vfunc name="eject_mountable_finish">
        <return-type type="gboolean"/>
        <parameters>
          <parameter name="file" type="GFile*"/>
          <parameter name="result" type="GAsyncResult*"/>
          <parameter name="error" type="GError**"/>
        </parameters>
      </vfunc>
      <vfunc name="mount_for_location">
        <return-type type="void"/>
        <parameters>
          <parameter name="location" type="GFile*"/>
          <parameter name="mount_operation" type="GMountOperation*"/>
          <parameter name="cancellable" type="GCancellable*"/>
          <parameter name="callback" type="GAsyncReadyCallback"/>
          <parameter name="user_data" type="gpointer"/>
        </parameters>
      </vfunc>
      <vfunc name="mount_for_location_finish">
        <return-type type="gboolean"/>
        <parameters>
          <parameter name="location" type="GFile*"/>
          <parameter name="result" type="GAsyncResult*"/>
          <parameter name="error" type="GError**"/>
        </parameters>
      </vfunc>
      <vfunc name="monitor_dir">
        <return-type type="GDirectoryMonitor*"/>
        <parameters>
          <parameter name="file" type="GFile*"/>
        </parameters>
      </vfunc>
      <vfunc name="monitor_file">
        <return-type type="GFileMonitor*"/>
        <parameters>
          <parameter name="file" type="GFile*"/>
        </parameters>
      </vfunc>
      <method name="append_to" symbol="g_file_append_to">
        <return-type type="GFileOutputStream*"/>
        <parameters>
          <parameter name="file" type="GFile*"/>
          <parameter name="cancellable" type="GCancellable*"/>
          <parameter name="error" type="GError**"/>
        </parameters>
      </method>
      <method name="copy" symbol="g_file_copy">
        <return-type type="gboolean"/>
        <parameters>
          <parameter name="source" type="GFile*"/>
          <parameter name="destination" type="GFile*"/>
          <parameter name="flags" type="GFileCopyFlags"/>
          <parameter name="cancellable" type="GCancellable*"/>
          <parameter name="progress_callback" type="GFileProgressCallback"/>
          <parameter name="progress_callback_data" type="gpointer"/>
          <parameter name="error" type="GError**"/>
        </parameters>
      </method>
      <method name="create" symbol="g_file_create">
        <return-type type="GFileOutputStream*"/>
        <parameters>
          <parameter name="file" type="GFile*"/>
          <parameter name="cancellable" type="GCancellable*"/>
          <parameter name="error" type="GError**"/>
        </parameters>
      </method>
      <method name="delete" symbol="g_file_delete">
        <return-type type="gboolean"/>
        <parameters>
          <parameter name="file" type="GFile*"/>
          <parameter name="cancellable" type="GCancellable*"/>
          <parameter name="error" type="GError**"/>
        </parameters>
      </method>
      <method name="dup" symbol="g_file_dup">
        <return-type type="GFile*"/>
        <parameters>
          <parameter name="file" type="GFile*"/>
        </parameters>
      </method>
      <method name="eject_mountable" symbol="g_file_eject_mountable">
        <return-type type="void"/>
        <parameters>
          <parameter name="file" type="GFile*"/>
          <parameter name="cancellable" type="GCancellable*"/>
          <parameter name="callback" type="GAsyncReadyCallback"/>
          <parameter name="user_data" type="gpointer"/>
        </parameters>
      </method>
      <method name="eject_mountable_finish" symbol="g_file_eject_mountable_finish">
        <return-type type="gboolean"/>
        <parameters>
          <parameter name="file" type="GFile*"/>
          <parameter name="result" type="GAsyncResult*"/>
          <parameter name="error" type="GError**"/>
        </parameters>
      </method>
      <method name="enumerate_children" symbol="g_file_enumerate_children">
        <return-type type="GFileEnumerator*"/>
        <parameters>
          <parameter name="file" type="GFile*"/>
          <parameter name="attributes" type="const-char*"/>
          <parameter name="flags" type="GFileGetInfoFlags"/>
          <parameter name="cancellable" type="GCancellable*"/>
          <parameter name="error" type="GError**"/>
        </parameters>
      </method>
      <method name="equal" symbol="g_file_equal">
        <return-type type="gboolean"/>
        <parameters>
          <parameter name="file1" type="GFile*"/>
          <parameter name="file2" type="GFile*"/>
        </parameters>
      </method>
      <method name="get_basename" symbol="g_file_get_basename">
        <return-type type="char*"/>
        <parameters>
          <parameter name="file" type="GFile*"/>
        </parameters>
      </method>
      <method name="get_child" symbol="g_file_get_child">
        <return-type type="GFile*"/>
        <parameters>
          <parameter name="file" type="GFile*"/>
          <parameter name="name" type="const-char*"/>
        </parameters>
      </method>
      <method name="get_child_for_display_name" symbol="g_file_get_child_for_display_name">
        <return-type type="GFile*"/>
        <parameters>
          <parameter name="file" type="GFile*"/>
          <parameter name="display_name" type="const-char*"/>
          <parameter name="error" type="GError**"/>
        </parameters>
      </method>
      <method name="get_contents_async" symbol="g_file_get_contents_async">
        <return-type type="void"/>
        <parameters>
          <parameter name="file" type="GFile*"/>
          <parameter name="cancellable" type="GCancellable*"/>
          <parameter name="callback" type="GAsyncReadyCallback"/>
          <parameter name="user_data" type="gpointer"/>
        </parameters>
      </method>
      <method name="get_contents_finish" symbol="g_file_get_contents_finish">
        <return-type type="gboolean"/>
        <parameters>
          <parameter name="file" type="GFile*"/>
          <parameter name="res" type="GAsyncResult*"/>
          <parameter name="contents" type="gchar**"/>
          <parameter name="length" type="gsize*"/>
          <parameter name="error" type="GError**"/>
        </parameters>
      </method>
      <method name="get_filesystem_info" symbol="g_file_get_filesystem_info">
        <return-type type="GFileInfo*"/>
        <parameters>
          <parameter name="file" type="GFile*"/>
          <parameter name="attributes" type="const-char*"/>
          <parameter name="cancellable" type="GCancellable*"/>
          <parameter name="error" type="GError**"/>
        </parameters>
      </method>
      <method name="get_for_commandline_arg" symbol="g_file_get_for_commandline_arg">
        <return-type type="GFile*"/>
        <parameters>
          <parameter name="arg" type="const-char*"/>
        </parameters>
      </method>
      <method name="get_for_path" symbol="g_file_get_for_path">
        <return-type type="GFile*"/>
        <parameters>
          <parameter name="path" type="const-char*"/>
        </parameters>
      </method>
      <method name="get_for_uri" symbol="g_file_get_for_uri">
        <return-type type="GFile*"/>
        <parameters>
          <parameter name="uri" type="const-char*"/>
        </parameters>
      </method>
      <method name="get_info" symbol="g_file_get_info">
        <return-type type="GFileInfo*"/>
        <parameters>
          <parameter name="file" type="GFile*"/>
          <parameter name="attributes" type="const-char*"/>
          <parameter name="flags" type="GFileGetInfoFlags"/>
          <parameter name="cancellable" type="GCancellable*"/>
          <parameter name="error" type="GError**"/>
        </parameters>
      </method>
      <method name="get_parent" symbol="g_file_get_parent">
        <return-type type="GFile*"/>
        <parameters>
          <parameter name="file" type="GFile*"/>
        </parameters>
      </method>
      <method name="get_parse_name" symbol="g_file_get_parse_name">
        <return-type type="char*"/>
        <parameters>
          <parameter name="file" type="GFile*"/>
        </parameters>
      </method>
      <method name="get_path" symbol="g_file_get_path">
        <return-type type="char*"/>
        <parameters>
          <parameter name="file" type="GFile*"/>
        </parameters>
      </method>
      <method name="get_type" symbol="g_file_get_type">
        <return-type type="GType"/>
      </method>
      <method name="get_uri" symbol="g_file_get_uri">
        <return-type type="char*"/>
        <parameters>
          <parameter name="file" type="GFile*"/>
        </parameters>
      </method>
      <method name="hash" symbol="g_file_hash">
        <return-type type="guint"/>
        <parameters>
          <parameter name="file" type="gconstpointer"/>
        </parameters>
      </method>
      <method name="is_native" symbol="g_file_is_native">
        <return-type type="gboolean"/>
        <parameters>
          <parameter name="file" type="GFile*"/>
        </parameters>
      </method>
      <method name="make_directory" symbol="g_file_make_directory">
        <return-type type="gboolean"/>
        <parameters>
          <parameter name="file" type="GFile*"/>
          <parameter name="cancellable" type="GCancellable*"/>
          <parameter name="error" type="GError**"/>
        </parameters>
      </method>
      <method name="make_symbolic_link" symbol="g_file_make_symbolic_link">
        <return-type type="gboolean"/>
        <parameters>
          <parameter name="file" type="GFile*"/>
          <parameter name="symlink_value" type="const-char*"/>
          <parameter name="cancellable" type="GCancellable*"/>
          <parameter name="error" type="GError**"/>
        </parameters>
      </method>
      <method name="mount_mountable" symbol="g_file_mount_mountable">
        <return-type type="void"/>
        <parameters>
          <parameter name="file" type="GFile*"/>
          <parameter name="mount_operation" type="GMountOperation*"/>
          <parameter name="cancellable" type="GCancellable*"/>
          <parameter name="callback" type="GAsyncReadyCallback"/>
          <parameter name="user_data" type="gpointer"/>
        </parameters>
      </method>
      <method name="mount_mountable_finish" symbol="g_file_mount_mountable_finish">
        <return-type type="GFile*"/>
        <parameters>
          <parameter name="file" type="GFile*"/>
          <parameter name="result" type="GAsyncResult*"/>
          <parameter name="error" type="GError**"/>
        </parameters>
      </method>
      <method name="move" symbol="g_file_move">
        <return-type type="gboolean"/>
        <parameters>
          <parameter name="source" type="GFile*"/>
          <parameter name="destination" type="GFile*"/>
          <parameter name="flags" type="GFileCopyFlags"/>
          <parameter name="cancellable" type="GCancellable*"/>
          <parameter name="progress_callback" type="GFileProgressCallback"/>
          <parameter name="progress_callback_data" type="gpointer"/>
          <parameter name="error" type="GError**"/>
        </parameters>
      </method>
      <method name="parse_name" symbol="g_file_parse_name">
        <return-type type="GFile*"/>
        <parameters>
          <parameter name="parse_name" type="const-char*"/>
        </parameters>
      </method>
      <method name="read" symbol="g_file_read">
        <return-type type="GFileInputStream*"/>
        <parameters>
          <parameter name="file" type="GFile*"/>
          <parameter name="cancellable" type="GCancellable*"/>
          <parameter name="error" type="GError**"/>
        </parameters>
      </method>
      <method name="read_async" symbol="g_file_read_async">
        <return-type type="void"/>
        <parameters>
          <parameter name="file" type="GFile*"/>
          <parameter name="io_priority" type="int"/>
          <parameter name="cancellable" type="GCancellable*"/>
          <parameter name="callback" type="GAsyncReadyCallback"/>
          <parameter name="user_data" type="gpointer"/>
        </parameters>
      </method>
      <method name="read_finish" symbol="g_file_read_finish">
        <return-type type="GFileInputStream*"/>
        <parameters>
          <parameter name="file" type="GFile*"/>
          <parameter name="res" type="GAsyncResult*"/>
          <parameter name="error" type="GError**"/>
        </parameters>
      </method>
      <method name="replace" symbol="g_file_replace">
        <return-type type="GFileOutputStream*"/>
        <parameters>
          <parameter name="file" type="GFile*"/>
          <parameter name="mtime" type="time_t"/>
          <parameter name="make_backup" type="gboolean"/>
          <parameter name="cancellable" type="GCancellable*"/>
          <parameter name="error" type="GError**"/>
        </parameters>
      </method>
      <method name="resolve_relative" symbol="g_file_resolve_relative">
        <return-type type="GFile*"/>
        <parameters>
          <parameter name="file" type="GFile*"/>
          <parameter name="relative_path" type="const-char*"/>
        </parameters>
      </method>
      <method name="set_attribute" symbol="g_file_set_attribute">
        <return-type type="gboolean"/>
        <parameters>
          <parameter name="file" type="GFile*"/>
          <parameter name="attribute" type="const-char*"/>
          <parameter name="type" type="GFileAttributeType"/>
          <parameter name="value" type="gconstpointer"/>
          <parameter name="flags" type="GFileGetInfoFlags"/>
          <parameter name="cancellable" type="GCancellable*"/>
          <parameter name="error" type="GError**"/>
        </parameters>
      </method>
      <method name="set_attribute_byte_string" symbol="g_file_set_attribute_byte_string">
        <return-type type="gboolean"/>
        <parameters>
          <parameter name="file" type="GFile*"/>
          <parameter name="attribute" type="const-char*"/>
          <parameter name="value" type="const-char*"/>
          <parameter name="flags" type="GFileGetInfoFlags"/>
          <parameter name="cancellable" type="GCancellable*"/>
          <parameter name="error" type="GError**"/>
        </parameters>
      </method>
      <method name="set_attribute_int32" symbol="g_file_set_attribute_int32">
        <return-type type="gboolean"/>
        <parameters>
          <parameter name="file" type="GFile*"/>
          <parameter name="attribute" type="const-char*"/>
          <parameter name="value" type="const-char*"/>
          <parameter name="flags" type="GFileGetInfoFlags"/>
          <parameter name="cancellable" type="GCancellable*"/>
          <parameter name="error" type="GError**"/>
        </parameters>
      </method>
      <method name="set_attribute_int64" symbol="g_file_set_attribute_int64">
        <return-type type="gboolean"/>
        <parameters>
          <parameter name="file" type="GFile*"/>
          <parameter name="attribute" type="const-char*"/>
          <parameter name="value" type="gint64"/>
          <parameter name="flags" type="GFileGetInfoFlags"/>
          <parameter name="cancellable" type="GCancellable*"/>
          <parameter name="error" type="GError**"/>
        </parameters>
      </method>
      <method name="set_attribute_string" symbol="g_file_set_attribute_string">
        <return-type type="gboolean"/>
        <parameters>
          <parameter name="file" type="GFile*"/>
          <parameter name="attribute" type="const-char*"/>
          <parameter name="value" type="const-char*"/>
          <parameter name="flags" type="GFileGetInfoFlags"/>
          <parameter name="cancellable" type="GCancellable*"/>
          <parameter name="error" type="GError**"/>
        </parameters>
      </method>
      <method name="set_attribute_uint32" symbol="g_file_set_attribute_uint32">
        <return-type type="gboolean"/>
        <parameters>
          <parameter name="file" type="GFile*"/>
          <parameter name="attribute" type="const-char*"/>
          <parameter name="value" type="guint32"/>
          <parameter name="flags" type="GFileGetInfoFlags"/>
          <parameter name="cancellable" type="GCancellable*"/>
          <parameter name="error" type="GError**"/>
        </parameters>
      </method>
      <method name="set_attribute_uint64" symbol="g_file_set_attribute_uint64">
        <return-type type="gboolean"/>
        <parameters>
          <parameter name="file" type="GFile*"/>
          <parameter name="attribute" type="const-char*"/>
          <parameter name="value" type="guint64"/>
          <parameter name="flags" type="GFileGetInfoFlags"/>
          <parameter name="cancellable" type="GCancellable*"/>
          <parameter name="error" type="GError**"/>
        </parameters>
      </method>
      <method name="set_display_name" symbol="g_file_set_display_name">
        <return-type type="GFile*"/>
        <parameters>
          <parameter name="file" type="GFile*"/>
          <parameter name="display_name" type="const-char*"/>
          <parameter name="cancellable" type="GCancellable*"/>
          <parameter name="error" type="GError**"/>
        </parameters>
      </method>
      <method name="trash" symbol="g_file_trash">
        <return-type type="gboolean"/>
        <parameters>
          <parameter name="file" type="GFile*"/>
          <parameter name="cancellable" type="GCancellable*"/>
          <parameter name="error" type="GError**"/>
        </parameters>
      </method>
      <method name="unmount_mountable" symbol="g_file_unmount_mountable">
        <return-type type="void"/>
        <parameters>
          <parameter name="file" type="GFile*"/>
          <parameter name="cancellable" type="GCancellable*"/>
          <parameter name="callback" type="GAsyncReadyCallback"/>
          <parameter name="user_data" type="gpointer"/>
        </parameters>
      </method>
      <method name="unmount_mountable_finish" symbol="g_file_unmount_mountable_finish">
        <return-type type="gboolean"/>
        <parameters>
          <parameter name="file" type="GFile*"/>
          <parameter name="result" type="GAsyncResult*"/>
          <parameter name="error" type="GError**"/>
        </parameters>
      </method>
    </interface>
    <interface get-type="" name="GIcon" type-name="GIcon">
      <vfunc name="hash">
        <return-type type="guint"/>
        <parameters>
          <parameter name="icon" type="GIcon*"/>
        </parameters>
      </vfunc>
      <vfunc name="equal">
        <return-type type="gboolean"/>
        <parameters>
          <parameter name="icon1" type="GIcon*"/>
          <parameter name="icon2" type="GIcon*"/>
        </parameters>
      </vfunc>
      <method name="equal" symbol="g_icon_equal">
        <return-type type="gboolean"/>
        <parameters>
          <parameter name="icon1" type="GIcon*"/>
          <parameter name="icon2" type="GIcon*"/>
        </parameters>
      </method>
      <method name="get_type" symbol="g_icon_get_type">
        <return-type type="GType"/>
      </method>
      <method name="hash" symbol="g_icon_hash">
        <return-type type="guint"/>
        <parameters>
          <parameter name="icon" type="gconstpointer"/>
        </parameters>
      </method>
    </interface>
    <interface get-type="" name="GLoadableIcon" type-name="GLoadableIcon">
      <vfunc name="load">
        <return-type type="GInputStream*"/>
        <parameters>
          <parameter name="icon" type="GLoadableIcon*"/>
          <parameter name="size" type="int"/>
          <parameter name="type" type="char**"/>
          <parameter name="cancellable" type="GCancellable*"/>
          <parameter name="error" type="GError**"/>
        </parameters>
      </vfunc>
      <vfunc name="load_async">
        <return-type type="void"/>
        <parameters>
          <parameter name="icon" type="GLoadableIcon*"/>
          <parameter name="size" type="int"/>
          <parameter name="cancellable" type="GCancellable*"/>
          <parameter name="callback" type="GAsyncReadyCallback"/>
          <parameter name="user_data" type="gpointer"/>
        </parameters>
      </vfunc>
      <vfunc name="load_finish">
        <return-type type="GInputStream*"/>
        <parameters>
          <parameter name="icon" type="GLoadableIcon*"/>
          <parameter name="res" type="GAsyncResult*"/>
          <parameter name="type" type="char**"/>
          <parameter name="error" type="GError**"/>
        </parameters>
      </vfunc>
      <method name="get_type" symbol="g_loadable_icon_get_type">
        <return-type type="GType"/>
      </method>
      <method name="load" symbol="g_loadable_icon_load">
        <return-type type="GInputStream*"/>
        <parameters>
          <parameter name="icon" type="GLoadableIcon*"/>
          <parameter name="size" type="int"/>
          <parameter name="type" type="char**"/>
          <parameter name="cancellable" type="GCancellable*"/>
          <parameter name="error" type="GError**"/>
        </parameters>
      </method>
      <method name="load_async" symbol="g_loadable_icon_load_async">
        <return-type type="void"/>
        <parameters>
          <parameter name="icon" type="GLoadableIcon*"/>
          <parameter name="size" type="int"/>
          <parameter name="cancellable" type="GCancellable*"/>
          <parameter name="callback" type="GAsyncReadyCallback"/>
          <parameter name="user_data" type="gpointer"/>
        </parameters>
      </method>
      <method name="load_finish" symbol="g_loadable_icon_load_finish">
        <return-type type="GInputStream*"/>
        <parameters>
          <parameter name="icon" type="GLoadableIcon*"/>
          <parameter name="res" type="GAsyncResult*"/>
          <parameter name="type" type="char**"/>
          <parameter name="error" type="GError**"/>
        </parameters>
      </method>
    </interface>
    <interface get-type="" name="GSeekable" type-name="GSeekable">
      <vfunc name="tell">
        <return-type type="goffset"/>
        <parameters>
          <parameter name="seekable" type="GSeekable*"/>
        </parameters>
      </vfunc>
      <vfunc name="can_seek">
        <return-type type="gboolean"/>
        <parameters>
          <parameter name="seekable" type="GSeekable*"/>
        </parameters>
      </vfunc>
      <vfunc name="seek">
        <return-type type="gboolean"/>
        <parameters>
          <parameter name="seekable" type="GSeekable*"/>
          <parameter name="offset" type="goffset"/>
          <parameter name="type" type="GSeekType"/>
          <parameter name="cancellable" type="GCancellable*"/>
          <parameter name="error" type="GError**"/>
        </parameters>
      </vfunc>
      <vfunc name="can_truncate">
        <return-type type="gboolean"/>
        <parameters>
          <parameter name="seekable" type="GSeekable*"/>
        </parameters>
      </vfunc>
      <vfunc name="truncate">
        <return-type type="gboolean"/>
        <parameters>
          <parameter name="seekable" type="GSeekable*"/>
          <parameter name="offset" type="goffset"/>
          <parameter name="cancellable" type="GCancellable*"/>
          <parameter name="error" type="GError**"/>
        </parameters>
      </vfunc>
      <method name="can_seek" symbol="g_seekable_can_seek">
        <return-type type="gboolean"/>
        <parameters>
          <parameter name="seekable" type="GSeekable*"/>
        </parameters>
      </method>
      <method name="can_truncate" symbol="g_seekable_can_truncate">
        <return-type type="gboolean"/>
        <parameters>
          <parameter name="seekable" type="GSeekable*"/>
        </parameters>
      </method>
      <method name="get_type" symbol="g_seekable_get_type">
        <return-type type="GType"/>
      </method>
      <method name="seek" symbol="g_seekable_seek">
        <return-type type="gboolean"/>
        <parameters>
          <parameter name="seekable" type="GSeekable*"/>
          <parameter name="offset" type="goffset"/>
          <parameter name="type" type="GSeekType"/>
          <parameter name="cancellable" type="GCancellable*"/>
          <parameter name="err" type="GError**"/>
        </parameters>
      </method>
      <method name="tell" symbol="g_seekable_tell">
        <return-type type="goffset"/>
        <parameters>
          <parameter name="seekable" type="GSeekable*"/>
        </parameters>
      </method>
      <method name="truncate" symbol="g_seekable_truncate">
        <return-type type="gboolean"/>
        <parameters>
          <parameter name="seekable" type="GSeekable*"/>
          <parameter name="offset" type="goffset"/>
          <parameter name="cancellable" type="GCancellable*"/>
          <parameter name="err" type="GError**"/>
        </parameters>
      </method>
    </interface>
    <interface get-type="" name="GVfs" type-name="GVfs">
      <vfunc name="get_file_for_path">
        <return-type type="GFile*"/>
        <parameters>
          <parameter name="vfs" type="GVfs*"/>
          <parameter name="path" type="const-char*"/>
        </parameters>
      </vfunc>
      <vfunc name="get_file_for_uri">
        <return-type type="GFile*"/>
        <parameters>
          <parameter name="vfs" type="GVfs*"/>
          <parameter name="uri" type="const-char*"/>
        </parameters>
      </vfunc>
      <vfunc name="parse_name">
        <return-type type="GFile*"/>
        <parameters>
          <parameter name="vfs" type="GVfs*"/>
          <parameter name="parse_name" type="const-char*"/>
        </parameters>
      </vfunc>
      <method name="get" symbol="g_vfs_get">
        <return-type type="GVfs*"/>
      </method>
      <method name="get_file_for_path" symbol="g_vfs_get_file_for_path">
        <return-type type="GFile*"/>
        <parameters>
          <parameter name="vfs" type="GVfs*"/>
          <parameter name="path" type="const-char*"/>
        </parameters>
      </method>
      <method name="get_file_for_uri" symbol="g_vfs_get_file_for_uri">
        <return-type type="GFile*"/>
        <parameters>
          <parameter name="vfs" type="GVfs*"/>
          <parameter name="uri" type="const-char*"/>
        </parameters>
      </method>
      <method name="get_type" symbol="g_vfs_get_type">
        <return-type type="GType"/>
      </method>
      <method name="parse_name" symbol="g_vfs_parse_name">
        <return-type type="GFile*"/>
        <parameters>
          <parameter name="vfs" type="GVfs*"/>
          <parameter name="parse_name" type="const-char*"/>
        </parameters>
      </method>
    </interface>
    <interface get-type="" name="GVolume" type-name="GVolume">
      <signal name="changed" when="LAST">
        <return-type type="void"/>
        <parameters>
          <parameter name="volume" type="GVolume*"/>
        </parameters>
      </signal>
      <vfunc name="get_root">
        <return-type type="GFile*"/>
        <parameters>
          <parameter name="volume" type="GVolume*"/>
        </parameters>
      </vfunc>
      <vfunc name="get_name">
        <return-type type="char*"/>
        <parameters>
          <parameter name="volume" type="GVolume*"/>
        </parameters>
      </vfunc>
      <vfunc name="get_icon">
        <return-type type="char*"/>
        <parameters>
          <parameter name="volume" type="GVolume*"/>
        </parameters>
      </vfunc>
      <vfunc name="get_drive">
        <return-type type="GDrive*"/>
        <parameters>
          <parameter name="volume" type="GVolume*"/>
        </parameters>
      </vfunc>
      <vfunc name="can_unmount">
        <return-type type="gboolean"/>
        <parameters>
          <parameter name="volume" type="GVolume*"/>
        </parameters>
      </vfunc>
      <vfunc name="can_eject">
        <return-type type="gboolean"/>
        <parameters>
          <parameter name="volume" type="GVolume*"/>
        </parameters>
      </vfunc>
      <vfunc name="unmount">
        <return-type type="void"/>
        <parameters>
          <parameter name="volume" type="GVolume*"/>
          <parameter name="callback" type="GAsyncReadyCallback"/>
          <parameter name="user_data" type="gpointer"/>
        </parameters>
      </vfunc>
      <vfunc name="unmount_finish">
        <return-type type="gboolean"/>
        <parameters>
          <parameter name="volume" type="GVolume*"/>
          <parameter name="result" type="GAsyncResult*"/>
          <parameter name="error" type="GError**"/>
        </parameters>
      </vfunc>
      <vfunc name="eject">
        <return-type type="void"/>
        <parameters>
          <parameter name="volume" type="GVolume*"/>
          <parameter name="callback" type="GAsyncReadyCallback"/>
          <parameter name="user_data" type="gpointer"/>
        </parameters>
      </vfunc>
      <vfunc name="eject_finish">
        <return-type type="gboolean"/>
        <parameters>
          <parameter name="volume" type="GVolume*"/>
          <parameter name="result" type="GAsyncResult*"/>
          <parameter name="error" type="GError**"/>
        </parameters>
      </vfunc>
      <vfunc name="get_platform_id">
        <return-type type="char*"/>
        <parameters>
          <parameter name="volume" type="GVolume*"/>
        </parameters>
      </vfunc>
      <method name="can_eject" symbol="g_volume_can_eject">
        <return-type type="gboolean"/>
        <parameters>
          <parameter name="volume" type="GVolume*"/>
        </parameters>
      </method>
      <method name="can_unmount" symbol="g_volume_can_unmount">
        <return-type type="gboolean"/>
        <parameters>
          <parameter name="volume" type="GVolume*"/>
        </parameters>
      </method>
      <method name="eject" symbol="g_volume_eject">
        <return-type type="void"/>
        <parameters>
          <parameter name="volume" type="GVolume*"/>
          <parameter name="callback" type="GAsyncReadyCallback"/>
          <parameter name="user_data" type="gpointer"/>
        </parameters>
      </method>
      <method name="eject_finish" symbol="g_volume_eject_finish">
        <return-type type="gboolean"/>
        <parameters>
          <parameter name="volume" type="GVolume*"/>
          <parameter name="result" type="GAsyncResult*"/>
          <parameter name="error" type="GError**"/>
        </parameters>
      </method>
      <method name="get_drive" symbol="g_volume_get_drive">
        <return-type type="GDrive*"/>
        <parameters>
          <parameter name="volume" type="GVolume*"/>
        </parameters>
      </method>
      <method name="get_icon" symbol="g_volume_get_icon">
        <return-type type="char*"/>
        <parameters>
          <parameter name="volume" type="GVolume*"/>
        </parameters>
      </method>
      <method name="get_name" symbol="g_volume_get_name">
        <return-type type="char*"/>
        <parameters>
          <parameter name="volume" type="GVolume*"/>
        </parameters>
      </method>
      <method name="get_platform_id" symbol="g_volume_get_platform_id">
        <return-type type="char*"/>
        <parameters>
          <parameter name="volume" type="GVolume*"/>
        </parameters>
      </method>
      <method name="get_root" symbol="g_volume_get_root">
        <return-type type="GFile*"/>
        <parameters>
          <parameter name="volume" type="GVolume*"/>
        </parameters>
      </method>
      <method name="get_type" symbol="g_volume_get_type">
        <return-type type="GType"/>
      </method>
      <method name="unmount" symbol="g_volume_unmount">
        <return-type type="void"/>
        <parameters>
          <parameter name="volume" type="GVolume*"/>
          <parameter name="callback" type="GAsyncReadyCallback"/>
          <parameter name="user_data" type="gpointer"/>
        </parameters>
      </method>
      <method name="unmount_finish" symbol="g_volume_unmount_finish">
        <return-type type="gboolean"/>
        <parameters>
          <parameter name="volume" type="GVolume*"/>
          <parameter name="result" type="GAsyncResult*"/>
          <parameter name="error" type="GError**"/>
        </parameters>
      </method>
    </interface>
    <object get-type="" name="GBufferedInputStream" parent="GFilterInputStream" type-name="GBufferedInputStream">
      <field name="priv" type="GBufferedInputStreamPrivate*"/>
      <property construct-only="1" name="buffer-size" readable="1" type="guint" writable="1"/>
      <method name="get_type" symbol="g_buffered_input_stream_get_type">
        <return-type type="GType"/>
      </method>
      <constructor name="new" symbol="g_buffered_input_stream_new">
        <parameters>
          <parameter name="base_stream" type="GInputStream*"/>
        </parameters>
      </constructor>
      <constructor name="new_sized" symbol="g_buffered_input_stream_new_sized">
        <parameters>
          <parameter name="base_stream" type="GInputStream*"/>
          <parameter name="size" type="guint"/>
        </parameters>
      </constructor>
    </object>
    <object get-type="" name="GBufferedOutputStream" parent="GFilterOutputStream" type-name="GBufferedOutputStream">
      <field name="priv" type="GBufferedOutputStreamPrivate*"/>
      <property construct-only="1" name="buffer-size" readable="1" type="guint" writable="1"/>
      <method name="get_type" symbol="g_buffered_output_stream_get_type">
        <return-type type="GType"/>
      </method>
      <constructor name="new" symbol="g_buffered_output_stream_new">
        <parameters>
          <parameter name="base_stream" type="GOutputStream*"/>
        </parameters>
      </constructor>
      <constructor name="new_sized" symbol="g_buffered_output_stream_new_sized">
        <parameters>
          <parameter name="base_stream" type="GOutputStream*"/>
          <parameter name="size" type="guint"/>
        </parameters>
      </constructor>
    </object>
    <object get-type="" name="GCancellable" parent="GObject" type-name="GCancellable">
      <signal name="cancelled" when="LAST">
        <return-type type="void"/>
        <parameters>
          <parameter name="cancellable" type="GCancellable*"/>
        </parameters>
      </signal>
      <method name="cancel" symbol="g_cancellable_cancel">
        <return-type type="void"/>
        <parameters>
          <parameter name="cancellable" type="GCancellable*"/>
        </parameters>
      </method>
      <method name="get_fd" symbol="g_cancellable_get_fd">
        <return-type type="int"/>
        <parameters>
          <parameter name="cancellable" type="GCancellable*"/>
        </parameters>
      </method>
      <method name="get_type" symbol="g_cancellable_get_type">
        <return-type type="GType"/>
      </method>
      <method name="is_cancelled" symbol="g_cancellable_is_cancelled">
        <return-type type="gboolean"/>
        <parameters>
          <parameter name="cancellable" type="GCancellable*"/>
        </parameters>
      </method>
      <constructor name="new" symbol="g_cancellable_new"/>
      <method name="reset" symbol="g_cancellable_reset">
        <return-type type="void"/>
        <parameters>
          <parameter name="cancellable" type="GCancellable*"/>
        </parameters>
      </method>
    </object>
    <object get-type="" name="GDesktopAppInfo" parent="GObject" type-name="GDesktopAppInfo">
      <implements>
        <interface name="GAppInfo"/>
      </implements>
      <method name="get_type" symbol="g_desktop_app_info_get_type">
        <return-type type="GType"/>
      </method>
      <constructor name="new" symbol="g_desktop_app_info_new">
        <parameters>
          <parameter name="desktop_id" type="const-char*"/>
        </parameters>
      </constructor>
    </object>
    <object get-type="" name="GDirectoryMonitor" parent="GObject" type-name="GDirectoryMonitor">
      <field name="priv" type="GDirectoryMonitorPrivate*"/>
      <signal name="changed" when="LAST">
        <return-type type="void"/>
        <parameters>
          <parameter name="monitor" type="GDirectoryMonitor*"/>
          <parameter name="child" type="GFile*"/>
          <parameter name="other_file" type="GFile*"/>
          <parameter name="event_type" type="GDirectoryMonitorEvent"/>
        </parameters>
      </signal>
      <vfunc name="cancel">
        <return-type type="gboolean"/>
        <parameters>
          <parameter name="monitor" type="GDirectoryMonitor*"/>
        </parameters>
      </vfunc>
      <method name="cancel" symbol="g_directory_monitor_cancel">
        <return-type type="gboolean"/>
        <parameters>
          <parameter name="monitor" type="GDirectoryMonitor*"/>
        </parameters>
      </method>
      <method name="emit_event" symbol="g_directory_monitor_emit_event">
        <return-type type="void"/>
        <parameters>
          <parameter name="monitor" type="GDirectoryMonitor*"/>
          <parameter name="child" type="GFile*"/>
          <parameter name="other_file" type="GFile*"/>
          <parameter name="event_type" type="GDirectoryMonitorEvent"/>
        </parameters>
      </method>
      <method name="get_type" symbol="g_directory_monitor_get_type">
        <return-type type="GType"/>
      </method>
      <method name="set_rate_limit" symbol="g_directory_monitor_set_rate_limit">
        <return-type type="void"/>
        <parameters>
          <parameter name="monitor" type="GDirectoryMonitor*"/>
          <parameter name="limit_msecs" type="int"/>
        </parameters>
      </method>
    </object>
    <object get-type="" name="GFileEnumerator" parent="GObject" type-name="GFileEnumerator">
      <field name="priv" type="GFileEnumeratorPrivate*"/>
      <vfunc name="next_file">
        <return-type type="GFileInfo*"/>
        <parameters>
          <parameter name="enumerator" type="GFileEnumerator*"/>
          <parameter name="cancellable" type="GCancellable*"/>
          <parameter name="error" type="GError**"/>
        </parameters>
      </vfunc>
      <vfunc name="stop">
        <return-type type="gboolean"/>
        <parameters>
          <parameter name="enumerator" type="GFileEnumerator*"/>
          <parameter name="cancellable" type="GCancellable*"/>
          <parameter name="error" type="GError**"/>
        </parameters>
      </vfunc>
      <vfunc name="next_files_async">
        <return-type type="void"/>
        <parameters>
          <parameter name="enumerator" type="GFileEnumerator*"/>
          <parameter name="num_files" type="int"/>
          <parameter name="io_priority" type="int"/>
          <parameter name="callback" type="GAsyncNextFilesCallback"/>
          <parameter name="user_data" type="gpointer"/>
          <parameter name="cancellable" type="GCancellable*"/>
        </parameters>
      </vfunc>
      <vfunc name="stop_async">
        <return-type type="void"/>
        <parameters>
          <parameter name="enumerator" type="GFileEnumerator*"/>
          <parameter name="io_priority" type="int"/>
          <parameter name="callback" type="GAsyncStopEnumeratingCallback"/>
          <parameter name="user_data" type="gpointer"/>
          <parameter name="cancellable" type="GCancellable*"/>
        </parameters>
      </vfunc>
      <method name="get_type" symbol="g_file_enumerator_get_type">
        <return-type type="GType"/>
      </method>
      <method name="has_pending" symbol="g_file_enumerator_has_pending">
        <return-type type="gboolean"/>
        <parameters>
          <parameter name="enumerator" type="GFileEnumerator*"/>
        </parameters>
      </method>
      <method name="is_stopped" symbol="g_file_enumerator_is_stopped">
        <return-type type="gboolean"/>
        <parameters>
          <parameter name="enumerator" type="GFileEnumerator*"/>
        </parameters>
      </method>
      <method name="next_file" symbol="g_file_enumerator_next_file">
        <return-type type="GFileInfo*"/>
        <parameters>
          <parameter name="enumerator" type="GFileEnumerator*"/>
          <parameter name="cancellable" type="GCancellable*"/>
          <parameter name="error" type="GError**"/>
        </parameters>
      </method>
      <method name="next_files_async" symbol="g_file_enumerator_next_files_async">
        <return-type type="void"/>
        <parameters>
          <parameter name="enumerator" type="GFileEnumerator*"/>
          <parameter name="num_files" type="int"/>
          <parameter name="io_priority" type="int"/>
          <parameter name="callback" type="GAsyncNextFilesCallback"/>
          <parameter name="user_data" type="gpointer"/>
          <parameter name="cancellable" type="GCancellable*"/>
        </parameters>
      </method>
      <method name="set_pending" symbol="g_file_enumerator_set_pending">
        <return-type type="void"/>
        <parameters>
          <parameter name="enumerator" type="GFileEnumerator*"/>
          <parameter name="pending" type="gboolean"/>
        </parameters>
      </method>
      <method name="stop" symbol="g_file_enumerator_stop">
        <return-type type="gboolean"/>
        <parameters>
          <parameter name="enumerator" type="GFileEnumerator*"/>
          <parameter name="cancellable" type="GCancellable*"/>
          <parameter name="error" type="GError**"/>
        </parameters>
      </method>
      <method name="stop_async" symbol="g_file_enumerator_stop_async">
        <return-type type="void"/>
        <parameters>
          <parameter name="enumerator" type="GFileEnumerator*"/>
          <parameter name="io_priority" type="int"/>
          <parameter name="callback" type="GAsyncStopEnumeratingCallback"/>
          <parameter name="user_data" type="gpointer"/>
          <parameter name="cancellable" type="GCancellable*"/>
        </parameters>
      </method>
    </object>
    <object get-type="" name="GFileIcon" parent="GObject" type-name="GFileIcon">
      <implements>
        <interface name="GIcon"/>
        <interface name="GLoadableIcon"/>
      </implements>
      <method name="get_file" symbol="g_file_icon_get_file">
        <return-type type="GFile*"/>
        <parameters>
          <parameter name="icon" type="GFileIcon*"/>
        </parameters>
      </method>
      <method name="get_type" symbol="g_file_icon_get_type">
        <return-type type="GType"/>
      </method>
      <constructor name="new" symbol="g_file_icon_new">
        <parameters>
          <parameter name="file" type="GFile*"/>
        </parameters>
      </constructor>
    </object>
    <object get-type="" name="GFileInfo" parent="GObject" type-name="GFileInfo">
      <method name="copy" symbol="g_file_info_copy">
        <return-type type="GFileInfo*"/>
        <parameters>
          <parameter name="info" type="GFileInfo*"/>
        </parameters>
      </method>
      <method name="get_attribute_as_string" symbol="g_file_info_get_attribute_as_string">
        <return-type type="char*"/>
        <parameters>
          <parameter name="info" type="GFileInfo*"/>
          <parameter name="attribute" type="const-char*"/>
        </parameters>
      </method>
      <method name="get_attribute_byte_string" symbol="g_file_info_get_attribute_byte_string">
        <return-type type="const-char*"/>
        <parameters>
          <parameter name="info" type="GFileInfo*"/>
          <parameter name="attribute" type="const-char*"/>
        </parameters>
      </method>
      <method name="get_attribute_int32" symbol="g_file_info_get_attribute_int32">
        <return-type type="gint32"/>
        <parameters>
          <parameter name="info" type="GFileInfo*"/>
          <parameter name="attribute" type="const-char*"/>
        </parameters>
      </method>
      <method name="get_attribute_int64" symbol="g_file_info_get_attribute_int64">
        <return-type type="gint64"/>
        <parameters>
          <parameter name="info" type="GFileInfo*"/>
          <parameter name="attribute" type="const-char*"/>
        </parameters>
      </method>
      <method name="get_attribute_string" symbol="g_file_info_get_attribute_string">
        <return-type type="const-char*"/>
        <parameters>
          <parameter name="info" type="GFileInfo*"/>
          <parameter name="attribute" type="const-char*"/>
        </parameters>
      </method>
      <method name="get_attribute_type" symbol="g_file_info_get_attribute_type">
        <return-type type="GFileAttributeType"/>
        <parameters>
          <parameter name="info" type="GFileInfo*"/>
          <parameter name="attribute" type="const-char*"/>
        </parameters>
      </method>
      <method name="get_attribute_uint32" symbol="g_file_info_get_attribute_uint32">
        <return-type type="guint32"/>
        <parameters>
          <parameter name="info" type="GFileInfo*"/>
          <parameter name="attribute" type="const-char*"/>
        </parameters>
      </method>
      <method name="get_attribute_uint64" symbol="g_file_info_get_attribute_uint64">
        <return-type type="guint64"/>
        <parameters>
          <parameter name="info" type="GFileInfo*"/>
          <parameter name="attribute" type="const-char*"/>
        </parameters>
      </method>
      <method name="get_content_type" symbol="g_file_info_get_content_type">
        <return-type type="const-char*"/>
        <parameters>
          <parameter name="info" type="GFileInfo*"/>
        </parameters>
      </method>
      <method name="get_display_name" symbol="g_file_info_get_display_name">
        <return-type type="const-char*"/>
        <parameters>
          <parameter name="info" type="GFileInfo*"/>
        </parameters>
      </method>
      <method name="get_edit_name" symbol="g_file_info_get_edit_name">
        <return-type type="const-char*"/>
        <parameters>
          <parameter name="info" type="GFileInfo*"/>
        </parameters>
      </method>
      <method name="get_file_type" symbol="g_file_info_get_file_type">
        <return-type type="GFileType"/>
        <parameters>
          <parameter name="info" type="GFileInfo*"/>
        </parameters>
      </method>
      <method name="get_flags" symbol="g_file_info_get_flags">
        <return-type type="GFileFlags"/>
        <parameters>
          <parameter name="info" type="GFileInfo*"/>
        </parameters>
      </method>
      <method name="get_icon" symbol="g_file_info_get_icon">
        <return-type type="const-char*"/>
        <parameters>
          <parameter name="info" type="GFileInfo*"/>
        </parameters>
      </method>
      <method name="get_modification_time" symbol="g_file_info_get_modification_time">
        <return-type type="void"/>
        <parameters>
          <parameter name="info" type="GFileInfo*"/>
          <parameter name="result" type="GTimeVal*"/>
        </parameters>
      </method>
      <method name="get_name" symbol="g_file_info_get_name">
        <return-type type="const-char*"/>
        <parameters>
          <parameter name="info" type="GFileInfo*"/>
        </parameters>
      </method>
      <method name="get_size" symbol="g_file_info_get_size">
        <return-type type="goffset"/>
        <parameters>
          <parameter name="info" type="GFileInfo*"/>
        </parameters>
      </method>
      <method name="get_symlink_target" symbol="g_file_info_get_symlink_target">
        <return-type type="const-char*"/>
        <parameters>
          <parameter name="info" type="GFileInfo*"/>
        </parameters>
      </method>
      <method name="get_type" symbol="g_file_info_get_type">
        <return-type type="GType"/>
      </method>
      <method name="has_attribute" symbol="g_file_info_has_attribute">
        <return-type type="gboolean"/>
        <parameters>
          <parameter name="info" type="GFileInfo*"/>
          <parameter name="attribute" type="const-char*"/>
        </parameters>
      </method>
      <method name="list_attributes" symbol="g_file_info_list_attributes">
        <return-type type="char**"/>
        <parameters>
          <parameter name="info" type="GFileInfo*"/>
          <parameter name="name_space" type="const-char*"/>
        </parameters>
      </method>
      <constructor name="new" symbol="g_file_info_new"/>
      <method name="remove_attribute" symbol="g_file_info_remove_attribute">
        <return-type type="void"/>
        <parameters>
          <parameter name="info" type="GFileInfo*"/>
          <parameter name="attribute" type="const-char*"/>
        </parameters>
      </method>
      <method name="set_attribute_byte_string" symbol="g_file_info_set_attribute_byte_string">
        <return-type type="void"/>
        <parameters>
          <parameter name="info" type="GFileInfo*"/>
          <parameter name="attribute" type="const-char*"/>
          <parameter name="value" type="const-char*"/>
        </parameters>
      </method>
      <method name="set_attribute_int32" symbol="g_file_info_set_attribute_int32">
        <return-type type="void"/>
        <parameters>
          <parameter name="info" type="GFileInfo*"/>
          <parameter name="attribute" type="const-char*"/>
          <parameter name="value" type="gint32"/>
        </parameters>
      </method>
      <method name="set_attribute_int64" symbol="g_file_info_set_attribute_int64">
        <return-type type="void"/>
        <parameters>
          <parameter name="info" type="GFileInfo*"/>
          <parameter name="attribute" type="const-char*"/>
          <parameter name="value" type="gint64"/>
        </parameters>
      </method>
      <method name="set_attribute_string" symbol="g_file_info_set_attribute_string">
        <return-type type="void"/>
        <parameters>
          <parameter name="info" type="GFileInfo*"/>
          <parameter name="attribute" type="const-char*"/>
          <parameter name="value" type="const-char*"/>
        </parameters>
      </method>
      <method name="set_attribute_uint32" symbol="g_file_info_set_attribute_uint32">
        <return-type type="void"/>
        <parameters>
          <parameter name="info" type="GFileInfo*"/>
          <parameter name="attribute" type="const-char*"/>
          <parameter name="value" type="guint32"/>
        </parameters>
      </method>
      <method name="set_attribute_uint64" symbol="g_file_info_set_attribute_uint64">
        <return-type type="void"/>
        <parameters>
          <parameter name="info" type="GFileInfo*"/>
          <parameter name="attribute" type="const-char*"/>
          <parameter name="value" type="guint64"/>
        </parameters>
      </method>
      <method name="set_content_type" symbol="g_file_info_set_content_type">
        <return-type type="void"/>
        <parameters>
          <parameter name="info" type="GFileInfo*"/>
          <parameter name="content_type" type="const-char*"/>
        </parameters>
      </method>
      <method name="set_display_name" symbol="g_file_info_set_display_name">
        <return-type type="void"/>
        <parameters>
          <parameter name="info" type="GFileInfo*"/>
          <parameter name="display_name" type="const-char*"/>
        </parameters>
      </method>
      <method name="set_edit_name" symbol="g_file_info_set_edit_name">
        <return-type type="void"/>
        <parameters>
          <parameter name="info" type="GFileInfo*"/>
          <parameter name="edit_name" type="const-char*"/>
        </parameters>
      </method>
      <method name="set_file_type" symbol="g_file_info_set_file_type">
        <return-type type="void"/>
        <parameters>
          <parameter name="info" type="GFileInfo*"/>
          <parameter name="type" type="GFileType"/>
        </parameters>
      </method>
      <method name="set_flags" symbol="g_file_info_set_flags">
        <return-type type="void"/>
        <parameters>
          <parameter name="info" type="GFileInfo*"/>
          <parameter name="flags" type="GFileFlags"/>
        </parameters>
      </method>
      <method name="set_icon" symbol="g_file_info_set_icon">
        <return-type type="void"/>
        <parameters>
          <parameter name="info" type="GFileInfo*"/>
          <parameter name="icon" type="const-char*"/>
        </parameters>
      </method>
      <method name="set_modification_time" symbol="g_file_info_set_modification_time">
        <return-type type="void"/>
        <parameters>
          <parameter name="info" type="GFileInfo*"/>
          <parameter name="mtime" type="GTimeVal*"/>
        </parameters>
      </method>
      <method name="set_name" symbol="g_file_info_set_name">
        <return-type type="void"/>
        <parameters>
          <parameter name="info" type="GFileInfo*"/>
          <parameter name="name" type="const-char*"/>
        </parameters>
      </method>
      <method name="set_size" symbol="g_file_info_set_size">
        <return-type type="void"/>
        <parameters>
          <parameter name="info" type="GFileInfo*"/>
          <parameter name="size" type="goffset"/>
        </parameters>
      </method>
      <method name="set_symlink_target" symbol="g_file_info_set_symlink_target">
        <return-type type="void"/>
        <parameters>
          <parameter name="info" type="GFileInfo*"/>
          <parameter name="symlink_target" type="const-char*"/>
        </parameters>
      </method>
    </object>
    <object get-type="" name="GFileInputStream" parent="GInputStream" type-name="GFileInputStream">
      <field name="priv" type="GFileInputStreamPrivate*"/>
      <vfunc name="tell">
        <return-type type="goffset"/>
        <parameters>
          <parameter name="stream" type="GFileInputStream*"/>
        </parameters>
      </vfunc>
      <vfunc name="can_seek">
        <return-type type="gboolean"/>
        <parameters>
          <parameter name="stream" type="GFileInputStream*"/>
        </parameters>
      </vfunc>
      <vfunc name="seek">
        <return-type type="gboolean"/>
        <parameters>
          <parameter name="stream" type="GFileInputStream*"/>
          <parameter name="offset" type="goffset"/>
          <parameter name="type" type="GSeekType"/>
          <parameter name="cancellable" type="GCancellable*"/>
          <parameter name="error" type="GError**"/>
        </parameters>
      </vfunc>
      <vfunc name="get_file_info">
        <return-type type="GFileInfo*"/>
        <parameters>
          <parameter name="stream" type="GFileInputStream*"/>
          <parameter name="attributes" type="char*"/>
          <parameter name="cancellable" type="GCancellable*"/>
          <parameter name="error" type="GError**"/>
        </parameters>
      </vfunc>
      <implements>
        <interface name="GSeekable"/>
      </implements>
      <method name="get_file_info" symbol="g_file_input_stream_get_file_info">
        <return-type type="GFileInfo*"/>
        <parameters>
          <parameter name="stream" type="GFileInputStream*"/>
          <parameter name="attributes" type="char*"/>
          <parameter name="cancellable" type="GCancellable*"/>
          <parameter name="error" type="GError**"/>
        </parameters>
      </method>
      <method name="get_type" symbol="g_file_input_stream_get_type">
        <return-type type="GType"/>
      </method>
    </object>
    <object get-type="" name="GFileMonitor" parent="GObject" type-name="GFileMonitor">
      <field name="priv" type="GFileMonitorPrivate*"/>
      <signal name="changed" when="LAST">
        <return-type type="void"/>
        <parameters>
          <parameter name="monitor" type="GFileMonitor*"/>
          <parameter name="file" type="GFile*"/>
          <parameter name="other_file" type="GFile*"/>
          <parameter name="event_type" type="GFileMonitorEvent"/>
        </parameters>
      </signal>
      <vfunc name="cancel">
        <return-type type="gboolean"/>
        <parameters>
          <parameter name="monitor" type="GFileMonitor*"/>
        </parameters>
      </vfunc>
      <method name="cancel" symbol="g_file_monitor_cancel">
        <return-type type="gboolean"/>
        <parameters>
          <parameter name="monitor" type="GFileMonitor*"/>
        </parameters>
      </method>
      <method name="directory" symbol="g_file_monitor_directory">
        <return-type type="GDirectoryMonitor*"/>
        <parameters>
          <parameter name="file" type="GFile*"/>
        </parameters>
      </method>
      <method name="emit_event" symbol="g_file_monitor_emit_event">
        <return-type type="void"/>
        <parameters>
          <parameter name="monitor" type="GFileMonitor*"/>
          <parameter name="file" type="GFile*"/>
          <parameter name="other_file" type="GFile*"/>
          <parameter name="event_type" type="GFileMonitorEvent"/>
        </parameters>
      </method>
      <method name="file" symbol="g_file_monitor_file">
        <return-type type="GFileMonitor*"/>
        <parameters>
          <parameter name="file" type="GFile*"/>
        </parameters>
      </method>
      <method name="get_type" symbol="g_file_monitor_get_type">
        <return-type type="GType"/>
      </method>
      <method name="set_rate_limit" symbol="g_file_monitor_set_rate_limit">
        <return-type type="void"/>
        <parameters>
          <parameter name="monitor" type="GFileMonitor*"/>
          <parameter name="limit_msecs" type="int"/>
        </parameters>
      </method>
    </object>
    <object get-type="" name="GFileOutputStream" parent="GOutputStream" type-name="GFileOutputStream">
      <field name="priv" type="GFileOutputStreamPrivate*"/>
      <vfunc name="tell">
        <return-type type="goffset"/>
        <parameters>
          <parameter name="stream" type="GFileOutputStream*"/>
        </parameters>
      </vfunc>
      <vfunc name="can_seek">
        <return-type type="gboolean"/>
        <parameters>
          <parameter name="stream" type="GFileOutputStream*"/>
        </parameters>
      </vfunc>
      <vfunc name="seek">
        <return-type type="gboolean"/>
        <parameters>
          <parameter name="stream" type="GFileOutputStream*"/>
          <parameter name="offset" type="goffset"/>
          <parameter name="type" type="GSeekType"/>
          <parameter name="cancellable" type="GCancellable*"/>
          <parameter name="error" type="GError**"/>
        </parameters>
      </vfunc>
      <vfunc name="get_file_info">
        <return-type type="GFileInfo*"/>
        <parameters>
          <parameter name="stream" type="GFileOutputStream*"/>
          <parameter name="attributes" type="char*"/>
          <parameter name="cancellable" type="GCancellable*"/>
          <parameter name="error" type="GError**"/>
        </parameters>
      </vfunc>
      <method name="get_file_info" symbol="g_file_output_stream_get_file_info">
        <return-type type="GFileInfo*"/>
        <parameters>
          <parameter name="stream" type="GFileOutputStream*"/>
          <parameter name="attributes" type="char*"/>
          <parameter name="cancellable" type="GCancellable*"/>
          <parameter name="error" type="GError**"/>
        </parameters>
      </method>
      <method name="get_final_mtime" symbol="g_file_output_stream_get_final_mtime">
        <return-type type="void"/>
        <parameters>
          <parameter name="stream" type="GFileOutputStream*"/>
          <parameter name="mtime" type="GTimeVal*"/>
        </parameters>
      </method>
      <method name="get_should_get_final_mtime" symbol="g_file_output_stream_get_should_get_final_mtime">
        <return-type type="gboolean"/>
        <parameters>
          <parameter name="stream" type="GFileOutputStream*"/>
        </parameters>
      </method>
      <method name="get_type" symbol="g_file_output_stream_get_type">
        <return-type type="GType"/>
      </method>
      <method name="set_final_mtime" symbol="g_file_output_stream_set_final_mtime">
        <return-type type="void"/>
        <parameters>
          <parameter name="stream" type="GFileOutputStream*"/>
          <parameter name="final_mtime" type="GTimeVal*"/>
        </parameters>
      </method>
      <method name="set_should_get_final_mtime" symbol="g_file_output_stream_set_should_get_final_mtime">
        <return-type type="void"/>
        <parameters>
          <parameter name="stream" type="GFileOutputStream*"/>
          <parameter name="get_final_mtime" type="gboolean"/>
        </parameters>
      </method>
    </object>
    <object get-type="" name="GFilterInputStream" parent="GInputStream" type-name="GFilterInputStream">
      <field name="base_stream" type="GInputStream*"/>
      <property construct-only="1" name="base-stream" readable="1" type="GInputStream" writable="1"/>
      <method name="get_base_stream" symbol="g_filter_input_stream_get_base_stream">
        <return-type type="GInputStream*"/>
        <parameters>
          <parameter name="stream" type="GFilterInputStream*"/>
        </parameters>
      </method>
      <method name="get_type" symbol="g_filter_input_stream_get_type">
        <return-type type="GType"/>
      </method>
    </object>
    <object get-type="" name="GFilterOutputStream" parent="GOutputStream" type-name="GFilterOutputStream">
      <field name="base_stream" type="GOutputStream*"/>
      <property construct-only="1" name="base-stream" readable="1" type="GOutputStream" writable="1"/>
      <method name="get_base_stream" symbol="g_filter_output_stream_get_base_stream">
        <return-type type="GOutputStream*"/>
        <parameters>
          <parameter name="stream" type="GFilterOutputStream*"/>
        </parameters>
      </method>
      <method name="get_type" symbol="g_filter_output_stream_get_type">
        <return-type type="GType"/>
      </method>
    </object>
    <object get-type="" name="GInputStream" parent="GObject" type-name="GInputStream">
      <field name="priv" type="GInputStreamPrivate*"/>
      <vfunc name="read">
        <return-type type="gssize"/>
        <parameters>
          <parameter name="stream" type="GInputStream*"/>
          <parameter name="buffer" type="void*"/>
          <parameter name="count" type="gsize"/>
          <parameter name="cancellable" type="GCancellable*"/>
          <parameter name="error" type="GError**"/>
        </parameters>
      </vfunc>
      <vfunc name="skip">
        <return-type type="gssize"/>
        <parameters>
          <parameter name="stream" type="GInputStream*"/>
          <parameter name="count" type="gsize"/>
          <parameter name="cancellable" type="GCancellable*"/>
          <parameter name="error" type="GError**"/>
        </parameters>
      </vfunc>
      <vfunc name="close">
        <return-type type="gboolean"/>
        <parameters>
          <parameter name="stream" type="GInputStream*"/>
          <parameter name="cancellable" type="GCancellable*"/>
          <parameter name="error" type="GError**"/>
        </parameters>
      </vfunc>
      <vfunc name="read_async">
        <return-type type="void"/>
        <parameters>
          <parameter name="stream" type="GInputStream*"/>
          <parameter name="buffer" type="void*"/>
          <parameter name="count" type="gsize"/>
          <parameter name="io_priority" type="int"/>
          <parameter name="cancellable" type="GCancellable*"/>
          <parameter name="callback" type="GAsyncReadyCallback"/>
          <parameter name="user_data" type="gpointer"/>
        </parameters>
      </vfunc>
      <vfunc name="read_finish">
        <return-type type="gssize"/>
        <parameters>
          <parameter name="stream" type="GInputStream*"/>
          <parameter name="result" type="GAsyncResult*"/>
          <parameter name="error" type="GError**"/>
        </parameters>
      </vfunc>
      <vfunc name="skip_async">
        <return-type type="void"/>
        <parameters>
          <parameter name="stream" type="GInputStream*"/>
          <parameter name="count" type="gsize"/>
          <parameter name="io_priority" type="int"/>
          <parameter name="cancellable" type="GCancellable*"/>
          <parameter name="callback" type="GAsyncReadyCallback"/>
          <parameter name="user_data" type="gpointer"/>
        </parameters>
      </vfunc>
      <vfunc name="skip_finish">
        <return-type type="gssize"/>
        <parameters>
          <parameter name="stream" type="GInputStream*"/>
          <parameter name="result" type="GAsyncResult*"/>
          <parameter name="error" type="GError**"/>
        </parameters>
      </vfunc>
      <vfunc name="close_async">
        <return-type type="void"/>
        <parameters>
          <parameter name="stream" type="GInputStream*"/>
          <parameter name="io_priority" type="int"/>
          <parameter name="cancellable" type="GCancellable*"/>
          <parameter name="callback" type="GAsyncReadyCallback"/>
          <parameter name="user_data" type="gpointer"/>
        </parameters>
      </vfunc>
      <vfunc name="close_finish">
        <return-type type="gboolean"/>
        <parameters>
          <parameter name="stream" type="GInputStream*"/>
          <parameter name="result" type="GAsyncResult*"/>
          <parameter name="error" type="GError**"/>
        </parameters>
      </vfunc>
      <method name="close" symbol="g_input_stream_close">
        <return-type type="gboolean"/>
        <parameters>
          <parameter name="stream" type="GInputStream*"/>
          <parameter name="cancellable" type="GCancellable*"/>
          <parameter name="error" type="GError**"/>
        </parameters>
      </method>
      <method name="close_async" symbol="g_input_stream_close_async">
        <return-type type="void"/>
        <parameters>
          <parameter name="stream" type="GInputStream*"/>
          <parameter name="io_priority" type="int"/>
          <parameter name="cancellable" type="GCancellable*"/>
          <parameter name="callback" type="GAsyncReadyCallback"/>
          <parameter name="user_data" type="gpointer"/>
        </parameters>
      </method>
      <method name="close_finish" symbol="g_input_stream_close_finish">
        <return-type type="gboolean"/>
        <parameters>
          <parameter name="stream" type="GInputStream*"/>
          <parameter name="result" type="GAsyncResult*"/>
          <parameter name="error" type="GError**"/>
        </parameters>
      </method>
      <method name="get_type" symbol="g_input_stream_get_type">
        <return-type type="GType"/>
      </method>
      <method name="has_pending" symbol="g_input_stream_has_pending">
        <return-type type="gboolean"/>
        <parameters>
          <parameter name="stream" type="GInputStream*"/>
        </parameters>
      </method>
      <method name="is_closed" symbol="g_input_stream_is_closed">
        <return-type type="gboolean"/>
        <parameters>
          <parameter name="stream" type="GInputStream*"/>
        </parameters>
      </method>
      <method name="read" symbol="g_input_stream_read">
        <return-type type="gssize"/>
        <parameters>
          <parameter name="stream" type="GInputStream*"/>
          <parameter name="buffer" type="void*"/>
          <parameter name="count" type="gsize"/>
          <parameter name="cancellable" type="GCancellable*"/>
          <parameter name="error" type="GError**"/>
        </parameters>
      </method>
      <method name="read_all" symbol="g_input_stream_read_all">
        <return-type type="gboolean"/>
        <parameters>
          <parameter name="stream" type="GInputStream*"/>
          <parameter name="buffer" type="void*"/>
          <parameter name="count" type="gsize"/>
          <parameter name="bytes_read" type="gsize*"/>
          <parameter name="cancellable" type="GCancellable*"/>
          <parameter name="error" type="GError**"/>
        </parameters>
      </method>
      <method name="read_async" symbol="g_input_stream_read_async">
        <return-type type="void"/>
        <parameters>
          <parameter name="stream" type="GInputStream*"/>
          <parameter name="buffer" type="void*"/>
          <parameter name="count" type="gsize"/>
          <parameter name="io_priority" type="int"/>
          <parameter name="cancellable" type="GCancellable*"/>
          <parameter name="callback" type="GAsyncReadyCallback"/>
          <parameter name="user_data" type="gpointer"/>
        </parameters>
      </method>
      <method name="read_finish" symbol="g_input_stream_read_finish">
        <return-type type="gssize"/>
        <parameters>
          <parameter name="stream" type="GInputStream*"/>
          <parameter name="result" type="GAsyncResult*"/>
          <parameter name="error" type="GError**"/>
        </parameters>
      </method>
      <method name="set_pending" symbol="g_input_stream_set_pending">
        <return-type type="void"/>
        <parameters>
          <parameter name="stream" type="GInputStream*"/>
          <parameter name="pending" type="gboolean"/>
        </parameters>
      </method>
      <method name="skip" symbol="g_input_stream_skip">
        <return-type type="gssize"/>
        <parameters>
          <parameter name="stream" type="GInputStream*"/>
          <parameter name="count" type="gsize"/>
          <parameter name="cancellable" type="GCancellable*"/>
          <parameter name="error" type="GError**"/>
        </parameters>
      </method>
      <method name="skip_async" symbol="g_input_stream_skip_async">
        <return-type type="void"/>
        <parameters>
          <parameter name="stream" type="GInputStream*"/>
          <parameter name="count" type="gsize"/>
          <parameter name="io_priority" type="int"/>
          <parameter name="cancellable" type="GCancellable*"/>
          <parameter name="callback" type="GAsyncReadyCallback"/>
          <parameter name="user_data" type="gpointer"/>
        </parameters>
      </method>
      <method name="skip_finish" symbol="g_input_stream_skip_finish">
        <return-type type="gssize"/>
        <parameters>
          <parameter name="stream" type="GInputStream*"/>
          <parameter name="result" type="GAsyncResult*"/>
          <parameter name="error" type="GError**"/>
        </parameters>
      </method>
    </object>
    <object get-type="" name="GLocalDirectoryMonitor" parent="GDirectoryMonitor" type-name="GLocalDirectoryMonitor">
      <method name="get_type" symbol="g_local_directory_monitor_get_type">
        <return-type type="GType"/>
      </method>
      <method name="start" symbol="g_local_directory_monitor_start">
        <return-type type="GDirectoryMonitor*"/>
        <parameters>
          <parameter name="dirname" type="const-char*"/>
        </parameters>
      </method>
    </object>
    <object get-type="" name="GLocalFile" parent="GObject" type-name="GLocalFile">
      <implements>
        <interface name="GFile"/>
      </implements>
      <method name="get_type" symbol="g_local_file_get_type">
        <return-type type="GType"/>
      </method>
      <method name="info_get" symbol="g_local_file_info_get">
        <return-type type="GFileInfo*"/>
        <parameters>
          <parameter name="basename" type="const-char*"/>
          <parameter name="path" type="const-char*"/>
          <parameter name="attribute_matcher" type="GFileAttributeMatcher*"/>
          <parameter name="flags" type="GFileGetInfoFlags"/>
          <parameter name="parent_info" type="GLocalParentFileInfo*"/>
          <parameter name="error" type="GError**"/>
        </parameters>
      </method>
      <method name="info_get_from_fd" symbol="g_local_file_info_get_from_fd">
        <return-type type="GFileInfo*"/>
        <parameters>
          <parameter name="fd" type="int"/>
          <parameter name="attributes" type="char*"/>
          <parameter name="error" type="GError**"/>
        </parameters>
      </method>
      <method name="info_get_parent_info" symbol="g_local_file_info_get_parent_info">
        <return-type type="void"/>
        <parameters>
          <parameter name="dir" type="const-char*"/>
          <parameter name="attribute_matcher" type="GFileAttributeMatcher*"/>
          <parameter name="parent_info" type="GLocalParentFileInfo*"/>
        </parameters>
      </method>
      <constructor name="new" symbol="g_local_file_new">
        <parameters>
          <parameter name="filename" type="const-char*"/>
        </parameters>
      </constructor>
    </object>
    <object get-type="" name="GLocalFileEnumerator" parent="GFileEnumerator" type-name="GLocalFileEnumerator">
      <method name="get_type" symbol="g_local_file_enumerator_get_type">
        <return-type type="GType"/>
      </method>
      <constructor name="new" symbol="g_local_file_enumerator_new">
        <parameters>
          <parameter name="filename" type="const-char*"/>
          <parameter name="attributes" type="const-char*"/>
          <parameter name="flags" type="GFileGetInfoFlags"/>
          <parameter name="cancellable" type="GCancellable*"/>
          <parameter name="error" type="GError**"/>
        </parameters>
      </constructor>
    </object>
    <object get-type="" name="GLocalFileInputStream" parent="GFileInputStream" type-name="GLocalFileInputStream">
      <field name="priv" type="GLocalFileInputStreamPrivate*"/>
      <method name="get_type" symbol="g_local_file_input_stream_get_type">
        <return-type type="GType"/>
      </method>
      <constructor name="new" symbol="g_local_file_input_stream_new">
        <parameters>
          <parameter name="fd" type="int"/>
        </parameters>
      </constructor>
    </object>
    <object get-type="" name="GLocalFileMonitor" parent="GFileMonitor" type-name="GLocalFileMonitor">
      <method name="get_type" symbol="g_local_file_monitor_get_type">
        <return-type type="GType"/>
      </method>
      <method name="start" symbol="g_local_file_monitor_start">
        <return-type type="GFileMonitor*"/>
        <parameters>
          <parameter name="dirname" type="const-char*"/>
        </parameters>
      </method>
    </object>
    <object get-type="" name="GLocalFileOutputStream" parent="GFileOutputStream" type-name="GLocalFileOutputStream">
      <field name="priv" type="GLocalFileOutputStreamPrivate*"/>
      <method name="append" symbol="g_local_file_output_stream_append">
        <return-type type="GFileOutputStream*"/>
        <parameters>
          <parameter name="filename" type="const-char*"/>
          <parameter name="cancellable" type="GCancellable*"/>
          <parameter name="error" type="GError**"/>
        </parameters>
      </method>
      <method name="create" symbol="g_local_file_output_stream_create">
        <return-type type="GFileOutputStream*"/>
        <parameters>
          <parameter name="filename" type="const-char*"/>
          <parameter name="cancellable" type="GCancellable*"/>
          <parameter name="error" type="GError**"/>
        </parameters>
      </method>
      <method name="get_type" symbol="g_local_file_output_stream_get_type">
        <return-type type="GType"/>
      </method>
      <method name="replace" symbol="g_local_file_output_stream_replace">
        <return-type type="GFileOutputStream*"/>
        <parameters>
          <parameter name="filename" type="const-char*"/>
          <parameter name="mtime" type="time_t"/>
          <parameter name="make_backup" type="gboolean"/>
          <parameter name="cancellable" type="GCancellable*"/>
          <parameter name="error" type="GError**"/>
        </parameters>
      </method>
    </object>
    <object get-type="" name="GLocalVfs" parent="GObject" type-name="GLocalVfs">
      <implements>
        <interface name="GVfs"/>
      </implements>
      <method name="get_type" symbol="g_local_vfs_get_type">
        <return-type type="GType"/>
      </method>
      <constructor name="new" symbol="g_local_vfs_new"/>
    </object>
    <object get-type="" name="GMemoryInputStream" parent="GInputStream" type-name="GMemoryInputStream">
      <field name="priv" type="GMemoryInputStreamPrivate*"/>
      <implements>
        <interface name="GSeekable"/>
      </implements>
      <method name="from_data" symbol="g_memory_input_stream_from_data">
        <return-type type="GInputStream*"/>
        <parameters>
          <parameter name="data" type="const-void*"/>
          <parameter name="len" type="gsize"/>
        </parameters>
      </method>
      <method name="get_type" symbol="g_memory_input_stream_get_type">
        <return-type type="GType"/>
      </method>
    </object>
    <object get-type="" name="GMemoryOutputStream" parent="GOutputStream" type-name="GMemoryOutputStream">
      <field name="priv" type="GMemoryOutputStreamPrivate*"/>
      <property construct="1" name="data" readable="1" type="gpointer" writable="1"/>
      <property name="free-array" readable="1" type="gboolean" writable="1"/>
      <property name="size-limit" readable="1" type="guint" writable="1"/>
      <implements>
        <interface name="GSeekable"/>
      </implements>
      <method name="get_type" symbol="g_memory_output_stream_get_type">
        <return-type type="GType"/>
      </method>
      <constructor name="new" symbol="g_memory_output_stream_new">
        <parameters>
          <parameter name="data" type="GByteArray*"/>
        </parameters>
      </constructor>
      <method name="set_max_size" symbol="g_memory_output_stream_set_max_size">
        <return-type type="void"/>
        <parameters>
          <parameter name="ostream" type="GMemoryOutputStream*"/>
          <parameter name="max_size" type="guint"/>
        </parameters>
      </method>
    </object>
    <object get-type="" name="GMountOperation" parent="GObject" type-name="GMountOperation">
      <field name="priv" type="GMountOperationPrivate*"/>
      <signal name="ask_password" when="LAST">
        <return-type type="gboolean"/>
        <parameters>
          <parameter name="op" type="GMountOperation*"/>
          <parameter name="message" type="const-char*"/>
          <parameter name="default_user" type="const-char*"/>
          <parameter name="default_domain" type="const-char*"/>
          <parameter name="flags" type="GPasswordFlags"/>
        </parameters>
      </signal>
      <signal name="ask_question" when="LAST">
        <return-type type="gboolean"/>
        <parameters>
          <parameter name="op" type="GMountOperation*"/>
          <parameter name="message" type="const-char*"/>
          <parameter name="choices" type="const-char*[]"/>
        </parameters>
      </signal>
      <signal name="reply" when="LAST">
        <return-type type="void"/>
        <parameters>
          <parameter name="op" type="GMountOperation*"/>
          <parameter name="abort" type="gboolean"/>
        </parameters>
      </signal>
      <method name="get_anonymous" symbol="g_mount_operation_get_anonymous">
        <return-type type="gboolean"/>
        <parameters>
          <parameter name="op" type="GMountOperation*"/>
        </parameters>
      </method>
      <method name="get_choice" symbol="g_mount_operation_get_choice">
        <return-type type="int"/>
        <parameters>
          <parameter name="op" type="GMountOperation*"/>
        </parameters>
      </method>
      <method name="get_domain" symbol="g_mount_operation_get_domain">
        <return-type type="const-char*"/>
        <parameters>
          <parameter name="op" type="GMountOperation*"/>
        </parameters>
      </method>
      <method name="get_password" symbol="g_mount_operation_get_password">
        <return-type type="const-char*"/>
        <parameters>
          <parameter name="op" type="GMountOperation*"/>
        </parameters>
      </method>
      <method name="get_password_save" symbol="g_mount_operation_get_password_save">
        <return-type type="GPasswordSave"/>
        <parameters>
          <parameter name="op" type="GMountOperation*"/>
        </parameters>
      </method>
      <method name="get_type" symbol="g_mount_operation_get_type">
        <return-type type="GType"/>
      </method>
      <method name="get_username" symbol="g_mount_operation_get_username">
        <return-type type="const-char*"/>
        <parameters>
          <parameter name="op" type="GMountOperation*"/>
        </parameters>
      </method>
      <constructor name="new" symbol="g_mount_operation_new"/>
      <method name="reply" symbol="g_mount_operation_reply">
        <return-type type="void"/>
        <parameters>
          <parameter name="op" type="GMountOperation*"/>
          <parameter name="abort" type="gboolean"/>
        </parameters>
      </method>
      <method name="set_anonymous" symbol="g_mount_operation_set_anonymous">
        <return-type type="void"/>
        <parameters>
          <parameter name="op" type="GMountOperation*"/>
          <parameter name="anonymous" type="gboolean"/>
        </parameters>
      </method>
      <method name="set_choice" symbol="g_mount_operation_set_choice">
        <return-type type="void"/>
        <parameters>
          <parameter name="op" type="GMountOperation*"/>
          <parameter name="choice" type="int"/>
        </parameters>
      </method>
      <method name="set_domain" symbol="g_mount_operation_set_domain">
        <return-type type="void"/>
        <parameters>
          <parameter name="op" type="GMountOperation*"/>
          <parameter name="domain" type="const-char*"/>
        </parameters>
      </method>
      <method name="set_password" symbol="g_mount_operation_set_password">
        <return-type type="void"/>
        <parameters>
          <parameter name="op" type="GMountOperation*"/>
          <parameter name="password" type="const-char*"/>
        </parameters>
      </method>
      <method name="set_password_save" symbol="g_mount_operation_set_password_save">
        <return-type type="void"/>
        <parameters>
          <parameter name="op" type="GMountOperation*"/>
          <parameter name="save" type="GPasswordSave"/>
        </parameters>
      </method>
      <method name="set_username" symbol="g_mount_operation_set_username">
        <return-type type="void"/>
        <parameters>
          <parameter name="op" type="GMountOperation*"/>
          <parameter name="username" type="const-char*"/>
        </parameters>
      </method>
    </object>
    <object get-type="" name="GOutputStream" parent="GObject" type-name="GOutputStream">
      <field name="priv" type="GOutputStreamPrivate*"/>
      <vfunc name="write">
        <return-type type="gssize"/>
        <parameters>
          <parameter name="stream" type="GOutputStream*"/>
          <parameter name="buffer" type="void*"/>
          <parameter name="count" type="gsize"/>
          <parameter name="cancellable" type="GCancellable*"/>
          <parameter name="error" type="GError**"/>
        </parameters>
      </vfunc>
      <vfunc name="flush">
        <return-type type="gboolean"/>
        <parameters>
          <parameter name="stream" type="GOutputStream*"/>
          <parameter name="cancellable" type="GCancellable*"/>
          <parameter name="error" type="GError**"/>
        </parameters>
      </vfunc>
      <vfunc name="close">
        <return-type type="gboolean"/>
        <parameters>
          <parameter name="stream" type="GOutputStream*"/>
          <parameter name="cancellable" type="GCancellable*"/>
          <parameter name="error" type="GError**"/>
        </parameters>
      </vfunc>
      <vfunc name="write_async">
        <return-type type="void"/>
        <parameters>
          <parameter name="stream" type="GOutputStream*"/>
          <parameter name="buffer" type="void*"/>
          <parameter name="count" type="gsize"/>
          <parameter name="io_priority" type="int"/>
          <parameter name="cancellable" type="GCancellable*"/>
          <parameter name="callback" type="GAsyncReadyCallback"/>
          <parameter name="user_data" type="gpointer"/>
        </parameters>
      </vfunc>
      <vfunc name="write_finish">
        <return-type type="gssize"/>
        <parameters>
          <parameter name="stream" type="GOutputStream*"/>
          <parameter name="result" type="GAsyncResult*"/>
          <parameter name="error" type="GError**"/>
        </parameters>
      </vfunc>
      <vfunc name="flush_async">
        <return-type type="void"/>
        <parameters>
          <parameter name="stream" type="GOutputStream*"/>
          <parameter name="io_priority" type="int"/>
          <parameter name="cancellable" type="GCancellable*"/>
          <parameter name="callback" type="GAsyncReadyCallback"/>
          <parameter name="user_data" type="gpointer"/>
        </parameters>
      </vfunc>
      <vfunc name="flush_finish">
        <return-type type="gboolean"/>
        <parameters>
          <parameter name="stream" type="GOutputStream*"/>
          <parameter name="result" type="GAsyncResult*"/>
          <parameter name="error" type="GError**"/>
        </parameters>
      </vfunc>
      <vfunc name="close_async">
        <return-type type="void"/>
        <parameters>
          <parameter name="stream" type="GOutputStream*"/>
          <parameter name="io_priority" type="int"/>
          <parameter name="cancellable" type="GCancellable*"/>
          <parameter name="callback" type="GAsyncReadyCallback"/>
          <parameter name="user_data" type="gpointer"/>
        </parameters>
      </vfunc>
      <vfunc name="close_finish">
        <return-type type="gboolean"/>
        <parameters>
          <parameter name="stream" type="GOutputStream*"/>
          <parameter name="result" type="GAsyncResult*"/>
          <parameter name="error" type="GError**"/>
        </parameters>
      </vfunc>
      <method name="close" symbol="g_output_stream_close">
        <return-type type="gboolean"/>
        <parameters>
          <parameter name="stream" type="GOutputStream*"/>
          <parameter name="cancellable" type="GCancellable*"/>
          <parameter name="error" type="GError**"/>
        </parameters>
      </method>
      <method name="close_async" symbol="g_output_stream_close_async">
        <return-type type="void"/>
        <parameters>
          <parameter name="stream" type="GOutputStream*"/>
          <parameter name="io_priority" type="int"/>
          <parameter name="cancellable" type="GCancellable*"/>
          <parameter name="callback" type="GAsyncReadyCallback"/>
          <parameter name="user_data" type="gpointer"/>
        </parameters>
      </method>
      <method name="close_finish" symbol="g_output_stream_close_finish">
        <return-type type="gboolean"/>
        <parameters>
          <parameter name="stream" type="GOutputStream*"/>
          <parameter name="result" type="GAsyncResult*"/>
          <parameter name="error" type="GError**"/>
        </parameters>
      </method>
      <method name="flush" symbol="g_output_stream_flush">
        <return-type type="gboolean"/>
        <parameters>
          <parameter name="stream" type="GOutputStream*"/>
          <parameter name="cancellable" type="GCancellable*"/>
          <parameter name="error" type="GError**"/>
        </parameters>
      </method>
      <method name="flush_async" symbol="g_output_stream_flush_async">
        <return-type type="void"/>
        <parameters>
          <parameter name="stream" type="GOutputStream*"/>
          <parameter name="io_priority" type="int"/>
          <parameter name="cancellable" type="GCancellable*"/>
          <parameter name="callback" type="GAsyncReadyCallback"/>
          <parameter name="user_data" type="gpointer"/>
        </parameters>
      </method>
      <method name="flush_finish" symbol="g_output_stream_flush_finish">
        <return-type type="gboolean"/>
        <parameters>
          <parameter name="stream" type="GOutputStream*"/>
          <parameter name="result" type="GAsyncResult*"/>
          <parameter name="error" type="GError**"/>
        </parameters>
      </method>
      <method name="get_type" symbol="g_output_stream_get_type">
        <return-type type="GType"/>
      </method>
      <method name="has_pending" symbol="g_output_stream_has_pending">
        <return-type type="gboolean"/>
        <parameters>
          <parameter name="stream" type="GOutputStream*"/>
        </parameters>
      </method>
      <method name="is_closed" symbol="g_output_stream_is_closed">
        <return-type type="gboolean"/>
        <parameters>
          <parameter name="stream" type="GOutputStream*"/>
        </parameters>
      </method>
      <method name="set_pending" symbol="g_output_stream_set_pending">
        <return-type type="void"/>
        <parameters>
          <parameter name="stream" type="GOutputStream*"/>
          <parameter name="pending" type="gboolean"/>
        </parameters>
      </method>
      <method name="write" symbol="g_output_stream_write">
        <return-type type="gssize"/>
        <parameters>
          <parameter name="stream" type="GOutputStream*"/>
          <parameter name="buffer" type="void*"/>
          <parameter name="count" type="gsize"/>
          <parameter name="cancellable" type="GCancellable*"/>
          <parameter name="error" type="GError**"/>
        </parameters>
      </method>
      <method name="write_all" symbol="g_output_stream_write_all">
        <return-type type="gboolean"/>
        <parameters>
          <parameter name="stream" type="GOutputStream*"/>
          <parameter name="buffer" type="void*"/>
          <parameter name="count" type="gsize"/>
          <parameter name="bytes_written" type="gsize*"/>
          <parameter name="cancellable" type="GCancellable*"/>
          <parameter name="error" type="GError**"/>
        </parameters>
      </method>
      <method name="write_async" symbol="g_output_stream_write_async">
        <return-type type="void"/>
        <parameters>
          <parameter name="stream" type="GOutputStream*"/>
          <parameter name="buffer" type="void*"/>
          <parameter name="count" type="gsize"/>
          <parameter name="io_priority" type="int"/>
          <parameter name="cancellable" type="GCancellable*"/>
          <parameter name="callback" type="GAsyncReadyCallback"/>
          <parameter name="user_data" type="gpointer"/>
        </parameters>
      </method>
      <method name="write_finish" symbol="g_output_stream_write_finish">
        <return-type type="gssize"/>
        <parameters>
          <parameter name="stream" type="GOutputStream*"/>
          <parameter name="result" type="GAsyncResult*"/>
          <parameter name="error" type="GError**"/>
        </parameters>
      </method>
    </object>
    <object get-type="" name="GSimpleAsyncResult" parent="GObject" type-name="GSimpleAsyncResult">
      <implements>
        <interface name="GAsyncResult"/>
      </implements>
      <method name="complete" symbol="g_simple_async_result_complete">
        <return-type type="void"/>
        <parameters>
          <parameter name="simple" type="GSimpleAsyncResult*"/>
        </parameters>
      </method>
      <method name="complete_in_idle" symbol="g_simple_async_result_complete_in_idle">
        <return-type type="void"/>
        <parameters>
          <parameter name="simple" type="GSimpleAsyncResult*"/>
        </parameters>
      </method>
      <method name="get_op_res_gboolean" symbol="g_simple_async_result_get_op_res_gboolean">
        <return-type type="gboolean"/>
        <parameters>
          <parameter name="simple" type="GSimpleAsyncResult*"/>
        </parameters>
      </method>
      <method name="get_op_res_gpointer" symbol="g_simple_async_result_get_op_res_gpointer">
        <return-type type="gpointer"/>
        <parameters>
          <parameter name="simple" type="GSimpleAsyncResult*"/>
        </parameters>
      </method>
      <method name="get_op_res_gssize" symbol="g_simple_async_result_get_op_res_gssize">
        <return-type type="gssize"/>
        <parameters>
          <parameter name="simple" type="GSimpleAsyncResult*"/>
        </parameters>
      </method>
      <method name="get_source_tag" symbol="g_simple_async_result_get_source_tag">
        <return-type type="gpointer"/>
        <parameters>
          <parameter name="simple" type="GSimpleAsyncResult*"/>
        </parameters>
      </method>
      <method name="get_type" symbol="g_simple_async_result_get_type">
        <return-type type="GType"/>
      </method>
      <constructor name="new" symbol="g_simple_async_result_new">
        <parameters>
          <parameter name="source_object" type="GObject*"/>
          <parameter name="callback" type="GAsyncReadyCallback"/>
          <parameter name="user_data" type="gpointer"/>
          <parameter name="source_tag" type="gpointer"/>
        </parameters>
      </constructor>
      <constructor name="new_error" symbol="g_simple_async_result_new_error">
        <parameters>
          <parameter name="source_object" type="GObject*"/>
          <parameter name="callback" type="GAsyncReadyCallback"/>
          <parameter name="user_data" type="gpointer"/>
          <parameter name="domain" type="GQuark"/>
          <parameter name="code" type="gint"/>
          <parameter name="format" type="const-gchar*"/>
        </parameters>
      </constructor>
      <constructor name="new_from_error" symbol="g_simple_async_result_new_from_error">
        <parameters>
          <parameter name="source_object" type="GObject*"/>
          <parameter name="callback" type="GAsyncReadyCallback"/>
          <parameter name="user_data" type="gpointer"/>
          <parameter name="error" type="GError*"/>
        </parameters>
      </constructor>
      <method name="propagate_error" symbol="g_simple_async_result_propagate_error">
        <return-type type="gboolean"/>
        <parameters>
          <parameter name="simple" type="GSimpleAsyncResult*"/>
          <parameter name="dest" type="GError**"/>
        </parameters>
      </method>
      <method name="run_in_thread" symbol="g_simple_async_result_run_in_thread">
        <return-type type="void"/>
        <parameters>
          <parameter name="simple" type="GSimpleAsyncResult*"/>
          <parameter name="func" type="GSimpleAsyncThreadFunc"/>
          <parameter name="io_priority" type="int"/>
          <parameter name="cancellable" type="GCancellable*"/>
        </parameters>
      </method>
      <method name="set_error" symbol="g_simple_async_result_set_error">
        <return-type type="void"/>
        <parameters>
          <parameter name="simple" type="GSimpleAsyncResult*"/>
          <parameter name="domain" type="GQuark"/>
          <parameter name="code" type="gint"/>
          <parameter name="format" type="const-gchar*"/>
        </parameters>
      </method>
      <method name="set_error_va" symbol="g_simple_async_result_set_error_va">
        <return-type type="void"/>
        <parameters>
          <parameter name="simple" type="GSimpleAsyncResult*"/>
          <parameter name="domain" type="GQuark"/>
          <parameter name="code" type="gint"/>
          <parameter name="format" type="const-gchar*"/>
          <parameter name="args" type="va_list"/>
        </parameters>
      </method>
      <method name="set_from_error" symbol="g_simple_async_result_set_from_error">
        <return-type type="void"/>
        <parameters>
          <parameter name="simple" type="GSimpleAsyncResult*"/>
          <parameter name="error" type="GError*"/>
        </parameters>
      </method>
      <method name="set_handle_cancellation" symbol="g_simple_async_result_set_handle_cancellation">
        <return-type type="void"/>
        <parameters>
          <parameter name="simple" type="GSimpleAsyncResult*"/>
          <parameter name="handle_cancellation" type="gboolean"/>
        </parameters>
      </method>
      <method name="set_op_res_gboolean" symbol="g_simple_async_result_set_op_res_gboolean">
        <return-type type="void"/>
        <parameters>
          <parameter name="simple" type="GSimpleAsyncResult*"/>
          <parameter name="op_res" type="gboolean"/>
        </parameters>
      </method>
      <method name="set_op_res_gpointer" symbol="g_simple_async_result_set_op_res_gpointer">
        <return-type type="void"/>
        <parameters>
          <parameter name="simple" type="GSimpleAsyncResult*"/>
          <parameter name="op_res" type="gpointer"/>
          <parameter name="destroy_op_res" type="GDestroyNotify"/>
        </parameters>
      </method>
      <method name="set_op_res_gssize" symbol="g_simple_async_result_set_op_res_gssize">
        <return-type type="void"/>
        <parameters>
          <parameter name="simple" type="GSimpleAsyncResult*"/>
          <parameter name="op_res" type="gssize"/>
        </parameters>
      </method>
    </object>
    <object get-type="" name="GSocketInputStream" parent="GInputStream" type-name="GSocketInputStream">
      <field name="priv" type="GSocketInputStreamPrivate*"/>
      <method name="get_type" symbol="g_socket_input_stream_get_type">
        <return-type type="GType"/>
      </method>
      <constructor name="new" symbol="g_socket_input_stream_new">
        <parameters>
          <parameter name="fd" type="int"/>
          <parameter name="close_fd_at_close" type="gboolean"/>
        </parameters>
      </constructor>
    </object>
    <object get-type="" name="GSocketOutputStream" parent="GOutputStream" type-name="GSocketOutputStream">
      <field name="priv" type="GSocketOutputStreamPrivate*"/>
      <method name="get_type" symbol="g_socket_output_stream_get_type">
        <return-type type="GType"/>
      </method>
      <constructor name="new" symbol="g_socket_output_stream_new">
        <parameters>
          <parameter name="fd" type="int"/>
          <parameter name="close_fd_at_close" type="gboolean"/>
        </parameters>
      </constructor>
    </object>
    <object get-type="" name="GThemedIcon" parent="GObject" type-name="GThemedIcon">
      <implements>
        <interface name="GIcon"/>
      </implements>
      <method name="get_names" symbol="g_themed_icon_get_names">
        <return-type type="char**"/>
        <parameters>
          <parameter name="icon" type="GThemedIcon*"/>
        </parameters>
      </method>
      <method name="get_type" symbol="g_themed_icon_get_type">
        <return-type type="GType"/>
      </method>
      <constructor name="new" symbol="g_themed_icon_new">
        <parameters>
          <parameter name="iconname" type="const-char*"/>
        </parameters>
      </constructor>
      <constructor name="new_from_names" symbol="g_themed_icon_new_from_names">
        <parameters>
          <parameter name="iconnames" type="char**"/>
        </parameters>
      </constructor>
    </object>
    <object get-type="" name="GUnionDrive" parent="GObject" type-name="GUnionDrive">
      <implements>
        <interface name="GDrive"/>
      </implements>
      <method name="child_is_for_monitor" symbol="g_union_drive_child_is_for_monitor">
        <return-type type="gboolean"/>
        <parameters>
          <parameter name="union_drive" type="GUnionDrive*"/>
          <parameter name="child_monitor" type="GVolumeMonitor*"/>
        </parameters>
      </method>
      <method name="get_type" symbol="g_union_drive_get_type">
        <return-type type="GType"/>
      </method>
      <method name="is_for_child_drive" symbol="g_union_drive_is_for_child_drive">
        <return-type type="gboolean"/>
        <parameters>
          <parameter name="union_drive" type="GUnionDrive*"/>
          <parameter name="child_drive" type="GDrive*"/>
        </parameters>
      </method>
      <constructor name="new" symbol="g_union_drive_new">
        <parameters>
          <parameter name="union_monitor" type="GVolumeMonitor*"/>
          <parameter name="child_drive" type="GDrive*"/>
          <parameter name="child_monitor" type="GVolumeMonitor*"/>
        </parameters>
      </constructor>
    </object>
    <object get-type="" name="GUnionVolume" parent="GObject" type-name="GUnionVolume">
      <implements>
        <interface name="GVolume"/>
      </implements>
      <method name="add_volume" symbol="g_union_volume_add_volume">
        <return-type type="void"/>
        <parameters>
          <parameter name="union_volume" type="GUnionVolume*"/>
          <parameter name="volume" type="GVolume*"/>
          <parameter name="monitor" type="GVolumeMonitor*"/>
        </parameters>
      </method>
      <method name="get_child_for_monitor" symbol="g_union_volume_get_child_for_monitor">
        <return-type type="GVolume*"/>
        <parameters>
          <parameter name="union_volume" type="GUnionVolume*"/>
          <parameter name="child_monitor" type="GVolumeMonitor*"/>
        </parameters>
      </method>
      <method name="get_type" symbol="g_union_volume_get_type">
        <return-type type="GType"/>
      </method>
      <method name="has_child_volume" symbol="g_union_volume_has_child_volume">
        <return-type type="gboolean"/>
        <parameters>
          <parameter name="union_volume" type="GUnionVolume*"/>
          <parameter name="child_volume" type="GVolume*"/>
        </parameters>
      </method>
      <method name="is_last_child" symbol="g_union_volume_is_last_child">
        <return-type type="gboolean"/>
        <parameters>
          <parameter name="union_volume" type="GUnionVolume*"/>
          <parameter name="child_volume" type="GVolume*"/>
        </parameters>
      </method>
      <constructor name="new" symbol="g_union_volume_new">
        <parameters>
          <parameter name="union_monitor" type="GVolumeMonitor*"/>
          <parameter name="volume" type="GVolume*"/>
          <parameter name="monitor" type="GVolumeMonitor*"/>
        </parameters>
      </constructor>
      <method name="remove_volume" symbol="g_union_volume_remove_volume">
        <return-type type="void"/>
        <parameters>
          <parameter name="union_volume" type="GUnionVolume*"/>
          <parameter name="volume" type="GVolume*"/>
        </parameters>
      </method>
    </object>
    <object get-type="" name="GUnionVolumeMonitor" parent="GVolumeMonitor" type-name="GUnionVolumeMonitor">
      <method name="convert_drive" symbol="g_union_volume_monitor_convert_drive">
        <return-type type="GDrive*"/>
        <parameters>
          <parameter name="monitor" type="GUnionVolumeMonitor*"/>
          <parameter name="child_drive" type="GDrive*"/>
        </parameters>
      </method>
      <method name="convert_volumes" symbol="g_union_volume_monitor_convert_volumes">
        <return-type type="GList*"/>
        <parameters>
          <parameter name="monitor" type="GUnionVolumeMonitor*"/>
          <parameter name="child_volumes" type="GList*"/>
        </parameters>
      </method>
      <method name="get_type" symbol="g_union_volume_monitor_get_type">
        <return-type type="GType"/>
      </method>
    </object>
    <object get-type="" name="GUnixDrive" parent="GObject" type-name="GUnixDrive">
      <implements>
        <interface name="GDrive"/>
      </implements>
      <method name="disconnected" symbol="g_unix_drive_disconnected">
        <return-type type="void"/>
        <parameters>
          <parameter name="drive" type="GUnixDrive*"/>
        </parameters>
      </method>
      <method name="get_type" symbol="g_unix_drive_get_type">
        <return-type type="GType"/>
      </method>
      <method name="has_mountpoint" symbol="g_unix_drive_has_mountpoint">
        <return-type type="gboolean"/>
        <parameters>
          <parameter name="drive" type="GUnixDrive*"/>
          <parameter name="mountpoint" type="const-char*"/>
        </parameters>
      </method>
      <constructor name="new" symbol="g_unix_drive_new">
        <parameters>
          <parameter name="volume_monitor" type="GVolumeMonitor*"/>
          <parameter name="mountpoint" type="GUnixMountPoint*"/>
        </parameters>
      </constructor>
      <method name="set_volume" symbol="g_unix_drive_set_volume">
        <return-type type="void"/>
        <parameters>
          <parameter name="drive" type="GUnixDrive*"/>
          <parameter name="volume" type="GUnixVolume*"/>
        </parameters>
      </method>
      <method name="unset_volume" symbol="g_unix_drive_unset_volume">
        <return-type type="void"/>
        <parameters>
          <parameter name="drive" type="GUnixDrive*"/>
          <parameter name="volume" type="GUnixVolume*"/>
        </parameters>
      </method>
    </object>
    <object get-type="" name="GUnixVolume" parent="GObject" type-name="GUnixVolume">
      <implements>
        <interface name="GVolume"/>
      </implements>
      <method name="get_type" symbol="g_unix_volume_get_type">
        <return-type type="GType"/>
      </method>
      <method name="has_mountpoint" symbol="g_unix_volume_has_mountpoint">
        <return-type type="gboolean"/>
        <parameters>
          <parameter name="volume" type="GUnixVolume*"/>
          <parameter name="mountpoint" type="const-char*"/>
        </parameters>
      </method>
      <constructor name="new" symbol="g_unix_volume_new">
        <parameters>
          <parameter name="volume_monitor" type="GVolumeMonitor*"/>
          <parameter name="mount" type="GUnixMount*"/>
        </parameters>
      </constructor>
      <method name="unmounted" symbol="g_unix_volume_unmounted">
        <return-type type="void"/>
        <parameters>
          <parameter name="volume" type="GUnixVolume*"/>
        </parameters>
      </method>
      <method name="unset_drive" symbol="g_unix_volume_unset_drive">
        <return-type type="void"/>
        <parameters>
          <parameter name="volume" type="GUnixVolume*"/>
          <parameter name="drive" type="GUnixDrive*"/>
        </parameters>
      </method>
    </object>
    <object get-type="" name="GUnixVolumeMonitor" parent="GVolumeMonitor" type-name="GUnixVolumeMonitor">
      <method name="get_type" symbol="g_unix_volume_monitor_get_type">
        <return-type type="GType"/>
      </method>
      <method name="lookup_drive_for_mountpoint" symbol="g_unix_volume_monitor_lookup_drive_for_mountpoint">
        <return-type type="GUnixDrive*"/>
        <parameters>
          <parameter name="monitor" type="GUnixVolumeMonitor*"/>
          <parameter name="mountpoint" type="const-char*"/>
        </parameters>
      </method>
      <constructor name="new" symbol="g_unix_volume_monitor_new"/>
    </object>
    <object get-type="" name="GVolumeMonitor" parent="GObject" type-name="GVolumeMonitor">
      <field name="priv" type="gpointer"/>
      <signal name="volume_mounted" when="LAST">
        <return-type type="void"/>
        <parameters>
          <parameter name="volume_monitor" type="GVolumeMonitor*"/>
          <parameter name="volume" type="GVolume*"/>
        </parameters>
      </signal>
      <signal name="volume_pre_unmount" when="LAST">
        <return-type type="void"/>
        <parameters>
          <parameter name="volume_monitor" type="GVolumeMonitor*"/>
          <parameter name="volume" type="GVolume*"/>
        </parameters>
      </signal>
      <signal name="volume_unmounted" when="LAST">
        <return-type type="void"/>
        <parameters>
          <parameter name="volume_monitor" type="GVolumeMonitor*"/>
          <parameter name="volume" type="GVolume*"/>
        </parameters>
      </signal>
      <signal name="drive_connected" when="LAST">
        <return-type type="void"/>
        <parameters>
          <parameter name="volume_monitor" type="GVolumeMonitor*"/>
          <parameter name="drive" type="GDrive*"/>
        </parameters>
      </signal>
      <signal name="drive_disconnected" when="LAST">
        <return-type type="void"/>
        <parameters>
          <parameter name="volume_monitor" type="GVolumeMonitor*"/>
          <parameter name="drive" type="GDrive*"/>
        </parameters>
      </signal>
      <vfunc name="get_mounted_volumes">
        <return-type type="GList*"/>
        <parameters>
          <parameter name="volume_monitor" type="GVolumeMonitor*"/>
        </parameters>
      </vfunc>
      <vfunc name="get_connected_drives">
        <return-type type="GList*"/>
        <parameters>
          <parameter name="volume_monitor" type="GVolumeMonitor*"/>
        </parameters>
      </vfunc>
      <method name="get_connected_drives" symbol="g_volume_monitor_get_connected_drives">
        <return-type type="GList*"/>
        <parameters>
          <parameter name="volume_monitor" type="GVolumeMonitor*"/>
        </parameters>
      </method>
      <method name="get_mounted_volumes" symbol="g_volume_monitor_get_mounted_volumes">
        <return-type type="GList*"/>
        <parameters>
          <parameter name="volume_monitor" type="GVolumeMonitor*"/>
        </parameters>
      </method>
      <method name="get_type" symbol="g_volume_monitor_get_type">
        <return-type type="GType"/>
      </method>
    </object>
    <object get-type="" name="GWin32AppInfo" parent="GObject" type-name="GWin32AppInfo">
      <implements>
        <interface name="GAppInfo"/>
      </implements>
      <method name="get_type" symbol="g_win32_app_info_get_type">
        <return-type type="GType"/>
      </method>
    </object>
    <struct get-type="" name="GAsyncResultData" type-name="GAsyncResultData">
      <field name="async_object" readable="1" type="gpointer" writable="1"/>
      <field name="error" readable="1" type="GError*" writable="1"/>
      <field name="user_data" readable="1" type="gpointer" writable="1"/>
    </struct>
    <struct get-type="" name="GFileAttributeMatcher" opaque="true" type-name="GFileAttributeMatcher">
      <method name="enumerate_namespace" symbol="g_file_attribute_matcher_enumerate_namespace">
        <return-type type="gboolean"/>
        <parameters>
          <parameter name="matcher" type="GFileAttributeMatcher*"/>
          <parameter name="namespace" type="const-char*"/>
        </parameters>
      </method>
      <method name="enumerate_next" symbol="g_file_attribute_matcher_enumerate_next">
        <return-type type="const-char*"/>
        <parameters>
          <parameter name="matcher" type="GFileAttributeMatcher*"/>
        </parameters>
      </method>
      <method name="free" symbol="g_file_attribute_matcher_free">
        <return-type type="void"/>
        <parameters>
          <parameter name="matcher" type="GFileAttributeMatcher*"/>
        </parameters>
      </method>
      <method name="matches" symbol="g_file_attribute_matcher_matches">
        <return-type type="gboolean"/>
        <parameters>
          <parameter name="matcher" type="GFileAttributeMatcher*"/>
          <parameter name="full_name" type="const-char*"/>
        </parameters>
      </method>
      <method name="matches_only" symbol="g_file_attribute_matcher_matches_only">
        <return-type type="gboolean"/>
        <parameters>
          <parameter name="matcher" type="GFileAttributeMatcher*"/>
          <parameter name="full_name" type="const-char*"/>
        </parameters>
      </method>
      <method name="new" symbol="g_file_attribute_matcher_new">
        <return-type type="GFileAttributeMatcher*"/>
        <parameters>
          <parameter name="attributes" type="const-char*"/>
        </parameters>
      </method>
    </struct>
    <struct get-type="" name="GIOJob" opaque="true" type-name="GIOJob">
      <method name="send_to_mainloop" symbol="g_io_job_send_to_mainloop">
        <return-type type="void"/>
        <parameters>
          <parameter name="job" type="GIOJob*"/>
          <parameter name="func" type="GIODataFunc"/>
          <parameter name="user_data" type="gpointer"/>
          <parameter name="notify" type="GDestroyNotify"/>
          <parameter name="block" type="gboolean"/>
        </parameters>
      </method>
    </struct>
    <struct get-type="" name="GLocalParentFileInfo" type-name="GLocalParentFileInfo">
      <field name="writable" readable="1" type="gboolean" writable="1"/>
      <field name="is_sticky" readable="1" type="gboolean" writable="1"/>
      <field name="owner" readable="1" type="int" writable="1"/>
    </struct>
    <struct get-type="" name="GUnixMount" type-name="GUnixMount">
      <field name="mount_path" readable="1" type="char*" writable="1"/>
      <field name="device_path" readable="1" type="char*" writable="1"/>
      <field name="filesystem_type" readable="1" type="char*" writable="1"/>
      <field name="is_read_only" readable="1" type="gboolean" writable="1"/>
    </struct>
    <struct get-type="" name="GUnixMountPoint" type-name="GUnixMountPoint">
      <field name="mount_path" readable="1" type="char*" writable="1"/>
      <field name="device_path" readable="1" type="char*" writable="1"/>
      <field name="filesystem_type" readable="1" type="char*" writable="1"/>
      <field name="dev_opt" readable="1" type="char*" writable="1"/>
      <field name="is_read_only" readable="1" type="gboolean" writable="1"/>
      <field name="is_user_mountable" readable="1" type="gboolean" writable="1"/>
      <field name="is_loopback" readable="1" type="gboolean" writable="1"/>
    </struct>
  </namespace>
</api>
