<?xml version="1.0"?>
<api version="1.0">
  <!--

        This file was automatically generated.
        Please DO NOT MODIFY THIS FILE, modify .metadata files instead.

-->
  <namespace name="GnomeVFS">
    <enum name="GnomeVFSDNSSDServiceStatus" type="enum" type-name="GnomeVFSDNSSDServiceStatus">
      <member name="GNOME_VFS_DNS_SD_SERVICE_ADDED" value=""/>
      <member name="GNOME_VFS_DNS_SD_SERVICE_REMOVED" value=""/>
    </enum>
    <enum name="GnomeVFSDeviceType" type="enum" type-name="GnomeVFSDeviceType">
      <member name="GNOME_VFS_DEVICE_TYPE_UNKNOWN" value=""/>
      <member name="GNOME_VFS_DEVICE_TYPE_AUDIO_CD" value=""/>
      <member name="GNOME_VFS_DEVICE_TYPE_VIDEO_DVD" value=""/>
      <member name="GNOME_VFS_DEVICE_TYPE_HARDDRIVE" value=""/>
      <member name="GNOME_VFS_DEVICE_TYPE_CDROM" value=""/>
      <member name="GNOME_VFS_DEVICE_TYPE_FLOPPY" value=""/>
      <member name="GNOME_VFS_DEVICE_TYPE_ZIP" value=""/>
      <member name="GNOME_VFS_DEVICE_TYPE_JAZ" value=""/>
      <member name="GNOME_VFS_DEVICE_TYPE_NFS" value=""/>
      <member name="GNOME_VFS_DEVICE_TYPE_AUTOFS" value=""/>
      <member name="GNOME_VFS_DEVICE_TYPE_CAMERA" value=""/>
      <member name="GNOME_VFS_DEVICE_TYPE_MEMORY_STICK" value=""/>
      <member name="GNOME_VFS_DEVICE_TYPE_SMB" value=""/>
      <member name="GNOME_VFS_DEVICE_TYPE_APPLE" value=""/>
      <member name="GNOME_VFS_DEVICE_TYPE_MUSIC_PLAYER" value=""/>
      <member name="GNOME_VFS_DEVICE_TYPE_WINDOWS" value=""/>
      <member name="GNOME_VFS_DEVICE_TYPE_LOOPBACK" value=""/>
      <member name="GNOME_VFS_DEVICE_TYPE_NETWORK" value=""/>
    </enum>
    <enum name="GnomeVFSDirectoryVisitOptions" type="flags" type-name="GnomeVFSDirectoryVisitOptions">
      <member name="GNOME_VFS_DIRECTORY_VISIT_DEFAULT" value=""/>
      <member name="GNOME_VFS_DIRECTORY_VISIT_SAMEFS" value=""/>
      <member name="GNOME_VFS_DIRECTORY_VISIT_LOOPCHECK" value=""/>
      <member name="GNOME_VFS_DIRECTORY_VISIT_IGNORE_RECURSE_ERROR" value=""/>
    </enum>
    <enum name="GnomeVFSFileFlags" type="flags" type-name="GnomeVFSFileFlags">
      <member name="GNOME_VFS_FILE_FLAGS_NONE" value=""/>
      <member name="GNOME_VFS_FILE_FLAGS_SYMLINK" value=""/>
      <member name="GNOME_VFS_FILE_FLAGS_LOCAL" value=""/>
    </enum>
    <enum name="GnomeVFSFileInfoFields" type="flags" type-name="GnomeVFSFileInfoFields">
      <member name="GNOME_VFS_FILE_INFO_FIELDS_NONE" value=""/>
      <member name="GNOME_VFS_FILE_INFO_FIELDS_TYPE" value=""/>
      <member name="GNOME_VFS_FILE_INFO_FIELDS_PERMISSIONS" value=""/>
      <member name="GNOME_VFS_FILE_INFO_FIELDS_FLAGS" value=""/>
      <member name="GNOME_VFS_FILE_INFO_FIELDS_DEVICE" value=""/>
      <member name="GNOME_VFS_FILE_INFO_FIELDS_INODE" value=""/>
      <member name="GNOME_VFS_FILE_INFO_FIELDS_LINK_COUNT" value=""/>
      <member name="GNOME_VFS_FILE_INFO_FIELDS_SIZE" value=""/>
      <member name="GNOME_VFS_FILE_INFO_FIELDS_BLOCK_COUNT" value=""/>
      <member name="GNOME_VFS_FILE_INFO_FIELDS_IO_BLOCK_SIZE" value=""/>
      <member name="GNOME_VFS_FILE_INFO_FIELDS_ATIME" value=""/>
      <member name="GNOME_VFS_FILE_INFO_FIELDS_MTIME" value=""/>
      <member name="GNOME_VFS_FILE_INFO_FIELDS_CTIME" value=""/>
      <member name="GNOME_VFS_FILE_INFO_FIELDS_SYMLINK_NAME" value=""/>
      <member name="GNOME_VFS_FILE_INFO_FIELDS_MIME_TYPE" value=""/>
      <member name="GNOME_VFS_FILE_INFO_FIELDS_ACCESS" value=""/>
      <member name="GNOME_VFS_FILE_INFO_FIELDS_IDS" value=""/>
      <member name="GNOME_VFS_FILE_INFO_FIELDS_ACL" value=""/>
      <member name="GNOME_VFS_FILE_INFO_FIELDS_SELINUX_CONTEXT" value=""/>
    </enum>
    <enum name="GnomeVFSFileInfoOptions" type="flags" type-name="GnomeVFSFileInfoOptions">
      <member name="GNOME_VFS_FILE_INFO_DEFAULT" value=""/>
      <member name="GNOME_VFS_FILE_INFO_GET_MIME_TYPE" value=""/>
      <member name="GNOME_VFS_FILE_INFO_FORCE_FAST_MIME_TYPE" value=""/>
      <member name="GNOME_VFS_FILE_INFO_FORCE_SLOW_MIME_TYPE" value=""/>
      <member name="GNOME_VFS_FILE_INFO_FOLLOW_LINKS" value=""/>
      <member name="GNOME_VFS_FILE_INFO_GET_ACCESS_RIGHTS" value=""/>
      <member name="GNOME_VFS_FILE_INFO_NAME_ONLY" value=""/>
      <member name="GNOME_VFS_FILE_INFO_GET_ACL" value=""/>
      <member name="GNOME_VFS_FILE_INFO_GET_SELINUX_CONTEXT" value=""/>
    </enum>
    <enum name="GnomeVFSFilePermissions" type="flags" type-name="GnomeVFSFilePermissions">
      <member name="GNOME_VFS_PERM_SUID" value=""/>
      <member name="GNOME_VFS_PERM_SGID" value=""/>
      <member name="GNOME_VFS_PERM_STICKY" value=""/>
      <member name="GNOME_VFS_PERM_USER_READ" value=""/>
      <member name="GNOME_VFS_PERM_USER_WRITE" value=""/>
      <member name="GNOME_VFS_PERM_USER_EXEC" value=""/>
      <member name="GNOME_VFS_PERM_USER_ALL" value=""/>
      <member name="GNOME_VFS_PERM_GROUP_READ" value=""/>
      <member name="GNOME_VFS_PERM_GROUP_WRITE" value=""/>
      <member name="GNOME_VFS_PERM_GROUP_EXEC" value=""/>
      <member name="GNOME_VFS_PERM_GROUP_ALL" value=""/>
      <member name="GNOME_VFS_PERM_OTHER_READ" value=""/>
      <member name="GNOME_VFS_PERM_OTHER_WRITE" value=""/>
      <member name="GNOME_VFS_PERM_OTHER_EXEC" value=""/>
      <member name="GNOME_VFS_PERM_OTHER_ALL" value=""/>
      <member name="GNOME_VFS_PERM_ACCESS_READABLE" value=""/>
      <member name="GNOME_VFS_PERM_ACCESS_WRITABLE" value=""/>
      <member name="GNOME_VFS_PERM_ACCESS_EXECUTABLE" value=""/>
    </enum>
    <enum name="GnomeVFSFileType" type="enum" type-name="GnomeVFSFileType">
      <member name="GNOME_VFS_FILE_TYPE_UNKNOWN" value=""/>
      <member name="GNOME_VFS_FILE_TYPE_REGULAR" value=""/>
      <member name="GNOME_VFS_FILE_TYPE_DIRECTORY" value=""/>
      <member name="GNOME_VFS_FILE_TYPE_FIFO" value=""/>
      <member name="GNOME_VFS_FILE_TYPE_SOCKET" value=""/>
      <member name="GNOME_VFS_FILE_TYPE_CHARACTER_DEVICE" value=""/>
      <member name="GNOME_VFS_FILE_TYPE_BLOCK_DEVICE" value=""/>
      <member name="GNOME_VFS_FILE_TYPE_SYMBOLIC_LINK" value=""/>
    </enum>
    <enum name="GnomeVFSFindDirectoryKind" type="enum" type-name="GnomeVFSFindDirectoryKind">
      <member name="GNOME_VFS_DIRECTORY_KIND_DESKTOP" value=""/>
      <member name="GNOME_VFS_DIRECTORY_KIND_TRASH" value=""/>
    </enum>
    <enum name="GnomeVFSMakeURIDirs" type="flags" type-name="GnomeVFSMakeURIDirs">
      <member name="GNOME_VFS_MAKE_URI_DIR_NONE" value=""/>
      <member name="GNOME_VFS_MAKE_URI_DIR_HOMEDIR" value=""/>
      <member name="GNOME_VFS_MAKE_URI_DIR_CURRENT" value=""/>
    </enum>
    <enum deprecated="1" name="GnomeVFSMimeActionType" type="enum" type-name="GnomeVFSMimeActionType">
      <member name="GNOME_VFS_MIME_ACTION_TYPE_NONE" value=""/>
      <member name="GNOME_VFS_MIME_ACTION_TYPE_APPLICATION" value=""/>
      <member name="GNOME_VFS_MIME_ACTION_TYPE_COMPONENT" value=""/>
    </enum>
    <enum name="GnomeVFSMimeApplicationArgumentType" type="enum" type-name="GnomeVFSMimeApplicationArgumentType">
      <member name="GNOME_VFS_MIME_APPLICATION_ARGUMENT_TYPE_URIS" value=""/>
      <member name="GNOME_VFS_MIME_APPLICATION_ARGUMENT_TYPE_PATHS" value=""/>
      <member name="GNOME_VFS_MIME_APPLICATION_ARGUMENT_TYPE_URIS_FOR_NON_FILES" value=""/>
    </enum>
    <enum name="GnomeVFSMimeEquivalence" type="enum" type-name="GnomeVFSMimeEquivalence">
      <member name="GNOME_VFS_MIME_UNRELATED" value=""/>
      <member name="GNOME_VFS_MIME_IDENTICAL" value=""/>
      <member name="GNOME_VFS_MIME_PARENT" value=""/>
    </enum>
    <enum deprecated="1" name="GnomeVFSModuleCallbackAuthenticationAuthType" type="enum" type-name="GnomeVFSModuleCallbackAuthenticationAuthType">
      <member name="_AuthTypeBasic" value=""/>
      <member name="_AuthTypeDigest" value=""/>
    </enum>
    <enum name="GnomeVFSModuleCallbackFullAuthenticationFlags" type="flags" type-name="GnomeVFSModuleCallbackFullAuthenticationFlags">
      <member name="GNOME_VFS_MODULE_CALLBACK_FULL_AUTHENTICATION_PREVIOUS_ATTEMPT_FAILED" value=""/>
      <member name="GNOME_VFS_MODULE_CALLBACK_FULL_AUTHENTICATION_NEED_PASSWORD" value=""/>
      <member name="GNOME_VFS_MODULE_CALLBACK_FULL_AUTHENTICATION_NEED_USERNAME" value=""/>
      <member name="GNOME_VFS_MODULE_CALLBACK_FULL_AUTHENTICATION_NEED_DOMAIN" value=""/>
      <member name="GNOME_VFS_MODULE_CALLBACK_FULL_AUTHENTICATION_SAVING_SUPPORTED" value=""/>
      <member name="GNOME_VFS_MODULE_CALLBACK_FULL_AUTHENTICATION_ANON_SUPPORTED" value=""/>
    </enum>
    <enum name="GnomeVFSModuleCallbackFullAuthenticationOutFlags" type="flags" type-name="GnomeVFSModuleCallbackFullAuthenticationOutFlags">
      <member name="GNOME_VFS_MODULE_CALLBACK_FULL_AUTHENTICATION_OUT_ANON_SELECTED" value=""/>
    </enum>
    <enum name="GnomeVFSMonitorEventType" type="enum" type-name="GnomeVFSMonitorEventType">
      <member name="GNOME_VFS_MONITOR_EVENT_CHANGED" value=""/>
      <member name="GNOME_VFS_MONITOR_EVENT_DELETED" value=""/>
      <member name="GNOME_VFS_MONITOR_EVENT_STARTEXECUTING" value=""/>
      <member name="GNOME_VFS_MONITOR_EVENT_STOPEXECUTING" value=""/>
      <member name="GNOME_VFS_MONITOR_EVENT_CREATED" value=""/>
      <member name="GNOME_VFS_MONITOR_EVENT_METADATA_CHANGED" value=""/>
    </enum>
    <enum name="GnomeVFSMonitorType" type="enum" type-name="GnomeVFSMonitorType">
      <member name="GNOME_VFS_MONITOR_FILE" value=""/>
      <member name="GNOME_VFS_MONITOR_DIRECTORY" value=""/>
    </enum>
    <enum name="GnomeVFSOpType" type="enum" type-name="GnomeVFSOpType">
      <member name="GNOME_VFS_OP_OPEN" value=""/>
      <member name="GNOME_VFS_OP_OPEN_AS_CHANNEL" value=""/>
      <member name="GNOME_VFS_OP_CREATE" value=""/>
      <member name="GNOME_VFS_OP_CREATE_SYMBOLIC_LINK" value=""/>
      <member name="GNOME_VFS_OP_CREATE_AS_CHANNEL" value=""/>
      <member name="GNOME_VFS_OP_CLOSE" value=""/>
      <member name="GNOME_VFS_OP_READ" value=""/>
      <member name="GNOME_VFS_OP_WRITE" value=""/>
      <member name="GNOME_VFS_OP_SEEK" value=""/>
      <member name="GNOME_VFS_OP_READ_WRITE_DONE" value=""/>
      <member name="GNOME_VFS_OP_LOAD_DIRECTORY" value=""/>
      <member name="GNOME_VFS_OP_FIND_DIRECTORY" value=""/>
      <member name="GNOME_VFS_OP_XFER" value=""/>
      <member name="GNOME_VFS_OP_GET_FILE_INFO" value=""/>
      <member name="GNOME_VFS_OP_SET_FILE_INFO" value=""/>
      <member name="GNOME_VFS_OP_MODULE_CALLBACK" value=""/>
      <member name="GNOME_VFS_OP_FILE_CONTROL" value=""/>
    </enum>
    <enum name="GnomeVFSOpenMode" type="flags" type-name="GnomeVFSOpenMode">
      <member name="GNOME_VFS_OPEN_NONE" value=""/>
      <member name="GNOME_VFS_OPEN_READ" value=""/>
      <member name="GNOME_VFS_OPEN_WRITE" value=""/>
      <member name="GNOME_VFS_OPEN_RANDOM" value=""/>
      <member name="GNOME_VFS_OPEN_TRUNCATE" value=""/>
    </enum>
    <enum name="GnomeVFSResult" type="enum" type-name="GnomeVFSResult">
      <member name="GNOME_VFS_OK" value=""/>
      <member name="GNOME_VFS_ERROR_NOT_FOUND" value=""/>
      <member name="GNOME_VFS_ERROR_GENERIC" value=""/>
      <member name="GNOME_VFS_ERROR_INTERNAL" value=""/>
      <member name="GNOME_VFS_ERROR_BAD_PARAMETERS" value=""/>
      <member name="GNOME_VFS_ERROR_NOT_SUPPORTED" value=""/>
      <member name="GNOME_VFS_ERROR_IO" value=""/>
      <member name="GNOME_VFS_ERROR_CORRUPTED_DATA" value=""/>
      <member name="GNOME_VFS_ERROR_WRONG_FORMAT" value=""/>
      <member name="GNOME_VFS_ERROR_BAD_FILE" value=""/>
      <member name="GNOME_VFS_ERROR_TOO_BIG" value=""/>
      <member name="GNOME_VFS_ERROR_NO_SPACE" value=""/>
      <member name="GNOME_VFS_ERROR_READ_ONLY" value=""/>
      <member name="GNOME_VFS_ERROR_INVALID_URI" value=""/>
      <member name="GNOME_VFS_ERROR_NOT_OPEN" value=""/>
      <member name="GNOME_VFS_ERROR_INVALID_OPEN_MODE" value=""/>
      <member name="GNOME_VFS_ERROR_ACCESS_DENIED" value=""/>
      <member name="GNOME_VFS_ERROR_TOO_MANY_OPEN_FILES" value=""/>
      <member name="GNOME_VFS_ERROR_EOF" value=""/>
      <member name="GNOME_VFS_ERROR_NOT_A_DIRECTORY" value=""/>
      <member name="GNOME_VFS_ERROR_IN_PROGRESS" value=""/>
      <member name="GNOME_VFS_ERROR_INTERRUPTED" value=""/>
      <member name="GNOME_VFS_ERROR_FILE_EXISTS" value=""/>
      <member name="GNOME_VFS_ERROR_LOOP" value=""/>
      <member name="GNOME_VFS_ERROR_NOT_PERMITTED" value=""/>
      <member name="GNOME_VFS_ERROR_IS_DIRECTORY" value=""/>
      <member name="GNOME_VFS_ERROR_NO_MEMORY" value=""/>
      <member name="GNOME_VFS_ERROR_HOST_NOT_FOUND" value=""/>
      <member name="GNOME_VFS_ERROR_INVALID_HOST_NAME" value=""/>
      <member name="GNOME_VFS_ERROR_HOST_HAS_NO_ADDRESS" value=""/>
      <member name="GNOME_VFS_ERROR_LOGIN_FAILED" value=""/>
      <member name="GNOME_VFS_ERROR_CANCELLED" value=""/>
      <member name="GNOME_VFS_ERROR_DIRECTORY_BUSY" value=""/>
      <member name="GNOME_VFS_ERROR_DIRECTORY_NOT_EMPTY" value=""/>
      <member name="GNOME_VFS_ERROR_TOO_MANY_LINKS" value=""/>
      <member name="GNOME_VFS_ERROR_READ_ONLY_FILE_SYSTEM" value=""/>
      <member name="GNOME_VFS_ERROR_NOT_SAME_FILE_SYSTEM" value=""/>
      <member name="GNOME_VFS_ERROR_NAME_TOO_LONG" value=""/>
      <member name="GNOME_VFS_ERROR_SERVICE_NOT_AVAILABLE" value=""/>
      <member name="GNOME_VFS_ERROR_SERVICE_OBSOLETE" value=""/>
      <member name="GNOME_VFS_ERROR_PROTOCOL_ERROR" value=""/>
      <member name="GNOME_VFS_ERROR_NO_MASTER_BROWSER" value=""/>
      <member name="GNOME_VFS_ERROR_NO_DEFAULT" value=""/>
      <member name="GNOME_VFS_ERROR_NO_HANDLER" value=""/>
      <member name="GNOME_VFS_ERROR_PARSE" value=""/>
      <member name="GNOME_VFS_ERROR_LAUNCH" value=""/>
      <member name="GNOME_VFS_ERROR_TIMEOUT" value=""/>
      <member name="GNOME_VFS_ERROR_NAMESERVER" value=""/>
      <member name="GNOME_VFS_ERROR_LOCKED" value=""/>
      <member name="GNOME_VFS_ERROR_DEPRECATED_FUNCTION" value=""/>
      <member name="GNOME_VFS_ERROR_INVALID_FILENAME" value=""/>
      <member name="GNOME_VFS_ERROR_NOT_A_SYMBOLIC_LINK" value=""/>
      <member name="GNOME_VFS_NUM_ERRORS" value=""/>
    </enum>
    <enum name="GnomeVFSSeekPosition" type="enum" type-name="GnomeVFSSeekPosition">
      <member name="GNOME_VFS_SEEK_START" value=""/>
      <member name="GNOME_VFS_SEEK_CURRENT" value=""/>
      <member name="GNOME_VFS_SEEK_END" value=""/>
    </enum>
    <enum name="GnomeVFSSetFileInfoMask" type="flags" type-name="GnomeVFSSetFileInfoMask">
      <member name="GNOME_VFS_SET_FILE_INFO_NONE" value=""/>
      <member name="GNOME_VFS_SET_FILE_INFO_NAME" value=""/>
      <member name="GNOME_VFS_SET_FILE_INFO_PERMISSIONS" value=""/>
      <member name="GNOME_VFS_SET_FILE_INFO_OWNER" value=""/>
      <member name="GNOME_VFS_SET_FILE_INFO_TIME" value=""/>
      <member name="GNOME_VFS_SET_FILE_INFO_ACL" value=""/>
      <member name="GNOME_VFS_SET_FILE_INFO_SELINUX_CONTEXT" value=""/>
      <member name="GNOME_VFS_SET_FILE_INFO_SYMLINK_NAME" value=""/>
    </enum>
    <enum name="GnomeVFSURIHideOptions" type="flags" type-name="GnomeVFSURIHideOptions">
      <member name="GNOME_VFS_URI_HIDE_NONE" value=""/>
      <member name="GNOME_VFS_URI_HIDE_USER_NAME" value=""/>
      <member name="GNOME_VFS_URI_HIDE_PASSWORD" value=""/>
      <member name="GNOME_VFS_URI_HIDE_HOST_NAME" value=""/>
      <member name="GNOME_VFS_URI_HIDE_HOST_PORT" value=""/>
      <member name="GNOME_VFS_URI_HIDE_TOPLEVEL_METHOD" value=""/>
      <member name="GNOME_VFS_URI_HIDE_FRAGMENT_IDENTIFIER" value=""/>
    </enum>
    <enum name="GnomeVFSVolumeType" type="enum" type-name="GnomeVFSVolumeType">
      <member name="GNOME_VFS_VOLUME_TYPE_MOUNTPOINT" value=""/>
      <member name="GNOME_VFS_VOLUME_TYPE_VFS_MOUNT" value=""/>
      <member name="GNOME_VFS_VOLUME_TYPE_CONNECTED_SERVER" value=""/>
    </enum>
    <enum name="GnomeVFSXferErrorAction" type="enum" type-name="GnomeVFSXferErrorAction">
      <member name="GNOME_VFS_XFER_ERROR_ACTION_ABORT" value=""/>
      <member name="GNOME_VFS_XFER_ERROR_ACTION_RETRY" value=""/>
      <member name="GNOME_VFS_XFER_ERROR_ACTION_SKIP" value=""/>
    </enum>
    <enum name="GnomeVFSXferErrorMode" type="enum" type-name="GnomeVFSXferErrorMode">
      <member name="GNOME_VFS_XFER_ERROR_MODE_ABORT" value=""/>
      <member name="GNOME_VFS_XFER_ERROR_MODE_QUERY" value=""/>
    </enum>
    <enum name="GnomeVFSXferOptions" type="flags" type-name="GnomeVFSXferOptions">
      <member name="GNOME_VFS_XFER_DEFAULT" value=""/>
      <member name="GNOME_VFS_XFER_UNUSED_1" value=""/>
      <member name="GNOME_VFS_XFER_FOLLOW_LINKS" value=""/>
      <member name="GNOME_VFS_XFER_UNUSED_2" value=""/>
      <member name="GNOME_VFS_XFER_RECURSIVE" value=""/>
      <member name="GNOME_VFS_XFER_SAMEFS" value=""/>
      <member name="GNOME_VFS_XFER_DELETE_ITEMS" value=""/>
      <member name="GNOME_VFS_XFER_EMPTY_DIRECTORIES" value=""/>
      <member name="GNOME_VFS_XFER_NEW_UNIQUE_DIRECTORY" value=""/>
      <member name="GNOME_VFS_XFER_REMOVESOURCE" value=""/>
      <member name="GNOME_VFS_XFER_USE_UNIQUE_NAMES" value=""/>
      <member name="GNOME_VFS_XFER_LINK_ITEMS" value=""/>
      <member name="GNOME_VFS_XFER_FOLLOW_LINKS_RECURSIVE" value=""/>
      <member name="GNOME_VFS_XFER_TARGET_DEFAULT_PERMS" value=""/>
    </enum>
    <enum name="GnomeVFSXferOverwriteAction" type="enum" type-name="GnomeVFSXferOverwriteAction">
      <member name="GNOME_VFS_XFER_OVERWRITE_ACTION_ABORT" value=""/>
      <member name="GNOME_VFS_XFER_OVERWRITE_ACTION_REPLACE" value=""/>
      <member name="GNOME_VFS_XFER_OVERWRITE_ACTION_REPLACE_ALL" value=""/>
      <member name="GNOME_VFS_XFER_OVERWRITE_ACTION_SKIP" value=""/>
      <member name="GNOME_VFS_XFER_OVERWRITE_ACTION_SKIP_ALL" value=""/>
    </enum>
    <enum name="GnomeVFSXferOverwriteMode" type="enum" type-name="GnomeVFSXferOverwriteMode">
      <member name="GNOME_VFS_XFER_OVERWRITE_MODE_ABORT" value=""/>
      <member name="GNOME_VFS_XFER_OVERWRITE_MODE_QUERY" value=""/>
      <member name="GNOME_VFS_XFER_OVERWRITE_MODE_REPLACE" value=""/>
      <member name="GNOME_VFS_XFER_OVERWRITE_MODE_SKIP" value=""/>
    </enum>
    <enum name="GnomeVFSXferPhase" type="enum" type-name="GnomeVFSXferPhase">
      <member name="GNOME_VFS_XFER_PHASE_INITIAL" value=""/>
      <member name="GNOME_VFS_XFER_CHECKING_DESTINATION" value=""/>
      <member name="GNOME_VFS_XFER_PHASE_COLLECTING" value=""/>
      <member name="GNOME_VFS_XFER_PHASE_READYTOGO" value=""/>
      <member name="GNOME_VFS_XFER_PHASE_OPENSOURCE" value=""/>
      <member name="GNOME_VFS_XFER_PHASE_OPENTARGET" value=""/>
      <member name="GNOME_VFS_XFER_PHASE_COPYING" value=""/>
      <member name="GNOME_VFS_XFER_PHASE_MOVING" value=""/>
      <member name="GNOME_VFS_XFER_PHASE_READSOURCE" value=""/>
      <member name="GNOME_VFS_XFER_PHASE_WRITETARGET" value=""/>
      <member name="GNOME_VFS_XFER_PHASE_CLOSESOURCE" value=""/>
      <member name="GNOME_VFS_XFER_PHASE_CLOSETARGET" value=""/>
      <member name="GNOME_VFS_XFER_PHASE_DELETESOURCE" value=""/>
      <member name="GNOME_VFS_XFER_PHASE_SETATTRIBUTES" value=""/>
      <member name="GNOME_VFS_XFER_PHASE_FILECOMPLETED" value=""/>
      <member name="GNOME_VFS_XFER_PHASE_CLEANUP" value=""/>
      <member name="GNOME_VFS_XFER_PHASE_COMPLETED" value=""/>
      <member name="GNOME_VFS_XFER_NUM_PHASES" value=""/>
    </enum>
    <enum name="GnomeVFSXferProgressStatus" type="enum" type-name="GnomeVFSXferProgressStatus">
      <member name="GNOME_VFS_XFER_PROGRESS_STATUS_OK" value=""/>
      <member name="GNOME_VFS_XFER_PROGRESS_STATUS_VFSERROR" value=""/>
      <member name="GNOME_VFS_XFER_PROGRESS_STATUS_OVERWRITE" value=""/>
      <member name="GNOME_VFS_XFER_PROGRESS_STATUS_DUPLICATE" value=""/>
    </enum>
    <enum name="XdgGlobType" type="enum" type-name="XdgGlobType">
      <member name="XDG_GLOB_LITERAL" value=""/>
      <member name="XDG_GLOB_SIMPLE" value=""/>
      <member name="XDG_GLOB_FULL" value=""/>
    </enum>
    <callback name="GnomeVFSAsyncCallback" type-name="GnomeVFSAsyncCallback">
      <return-type type="void"/>
      <parameters>
        <parameter name="handle" type="GnomeVFSAsyncHandle*"/>
        <parameter name="result" type="GnomeVFSResult"/>
        <parameter name="callback_data" type="gpointer"/>
      </parameters>
    </callback>
    <callback name="GnomeVFSAsyncCloseCallback" type-name="GnomeVFSAsyncCloseCallback">
      <return-type type="void"/>
      <parameters>
        <parameter name="handle" type="GnomeVFSAsyncHandle*"/>
        <parameter name="result" type="GnomeVFSResult"/>
        <parameter name="callback_data" type="gpointer"/>
      </parameters>
    </callback>
    <callback name="GnomeVFSAsyncCreateAsChannelCallback" type-name="GnomeVFSAsyncCreateAsChannelCallback">
      <return-type type="void"/>
      <parameters>
        <parameter name="handle" type="GnomeVFSAsyncHandle*"/>
        <parameter name="channel" type="GIOChannel*"/>
        <parameter name="result" type="GnomeVFSResult"/>
        <parameter name="callback_data" type="gpointer"/>
      </parameters>
    </callback>
    <callback name="GnomeVFSAsyncCreateCallback" type-name="GnomeVFSAsyncCreateCallback">
      <return-type type="void"/>
      <parameters>
        <parameter name="handle" type="GnomeVFSAsyncHandle*"/>
        <parameter name="result" type="GnomeVFSResult"/>
        <parameter name="callback_data" type="gpointer"/>
      </parameters>
    </callback>
    <callback name="GnomeVFSAsyncDirectoryLoadCallback" type-name="GnomeVFSAsyncDirectoryLoadCallback">
      <return-type type="void"/>
      <parameters>
        <parameter name="handle" type="GnomeVFSAsyncHandle*"/>
        <parameter name="result" type="GnomeVFSResult"/>
        <parameter name="list" type="GList*"/>
        <parameter name="entries_read" type="guint"/>
        <parameter name="callback_data" type="gpointer"/>
      </parameters>
    </callback>
    <callback name="GnomeVFSAsyncFileControlCallback" type-name="GnomeVFSAsyncFileControlCallback">
      <return-type type="void"/>
      <parameters>
        <parameter name="handle" type="GnomeVFSAsyncHandle*"/>
        <parameter name="result" type="GnomeVFSResult"/>
        <parameter name="operation_data" type="gpointer"/>
        <parameter name="callback_data" type="gpointer"/>
      </parameters>
    </callback>
    <callback name="GnomeVFSAsyncFindDirectoryCallback" type-name="GnomeVFSAsyncFindDirectoryCallback">
      <return-type type="void"/>
      <parameters>
        <parameter name="handle" type="GnomeVFSAsyncHandle*"/>
        <parameter name="results" type="GList*"/>
        <parameter name="data" type="gpointer"/>
      </parameters>
    </callback>
    <callback name="GnomeVFSAsyncGetFileInfoCallback" type-name="GnomeVFSAsyncGetFileInfoCallback">
      <return-type type="void"/>
      <parameters>
        <parameter name="handle" type="GnomeVFSAsyncHandle*"/>
        <parameter name="results" type="GList*"/>
        <parameter name="callback_data" type="gpointer"/>
      </parameters>
    </callback>
    <callback name="GnomeVFSAsyncModuleCallback" type-name="GnomeVFSAsyncModuleCallback">
      <return-type type="void"/>
      <parameters>
        <parameter name="in" type="gconstpointer"/>
        <parameter name="in_size" type="gsize"/>
        <parameter name="out" type="gpointer"/>
        <parameter name="out_size" type="gsize"/>
        <parameter name="callback_data" type="gpointer"/>
        <parameter name="response" type="GnomeVFSModuleCallbackResponse"/>
        <parameter name="response_data" type="gpointer"/>
      </parameters>
    </callback>
    <callback name="GnomeVFSAsyncOpenAsChannelCallback" type-name="GnomeVFSAsyncOpenAsChannelCallback">
      <return-type type="void"/>
      <parameters>
        <parameter name="handle" type="GnomeVFSAsyncHandle*"/>
        <parameter name="channel" type="GIOChannel*"/>
        <parameter name="result" type="GnomeVFSResult"/>
        <parameter name="callback_data" type="gpointer"/>
      </parameters>
    </callback>
    <callback name="GnomeVFSAsyncOpenCallback" type-name="GnomeVFSAsyncOpenCallback">
      <return-type type="void"/>
      <parameters>
        <parameter name="handle" type="GnomeVFSAsyncHandle*"/>
        <parameter name="result" type="GnomeVFSResult"/>
        <parameter name="callback_data" type="gpointer"/>
      </parameters>
    </callback>
    <callback name="GnomeVFSAsyncReadCallback" type-name="GnomeVFSAsyncReadCallback">
      <return-type type="void"/>
      <parameters>
        <parameter name="handle" type="GnomeVFSAsyncHandle*"/>
        <parameter name="result" type="GnomeVFSResult"/>
        <parameter name="buffer" type="gpointer"/>
        <parameter name="bytes_requested" type="GnomeVFSFileSize"/>
        <parameter name="bytes_read" type="GnomeVFSFileSize"/>
        <parameter name="callback_data" type="gpointer"/>
      </parameters>
    </callback>
    <callback name="GnomeVFSAsyncSeekCallback" type-name="GnomeVFSAsyncSeekCallback">
      <return-type type="void"/>
      <parameters>
        <parameter name="handle" type="GnomeVFSAsyncHandle*"/>
        <parameter name="result" type="GnomeVFSResult"/>
        <parameter name="callback_data" type="gpointer"/>
      </parameters>
    </callback>
    <callback name="GnomeVFSAsyncSetFileInfoCallback" type-name="GnomeVFSAsyncSetFileInfoCallback">
      <return-type type="void"/>
      <parameters>
        <parameter name="handle" type="GnomeVFSAsyncHandle*"/>
        <parameter name="result" type="GnomeVFSResult"/>
        <parameter name="file_info" type="GnomeVFSFileInfo*"/>
        <parameter name="callback_data" type="gpointer"/>
      </parameters>
    </callback>
    <callback name="GnomeVFSAsyncWriteCallback" type-name="GnomeVFSAsyncWriteCallback">
      <return-type type="void"/>
      <parameters>
        <parameter name="handle" type="GnomeVFSAsyncHandle*"/>
        <parameter name="result" type="GnomeVFSResult"/>
        <parameter name="buffer" type="gconstpointer"/>
        <parameter name="bytes_requested" type="GnomeVFSFileSize"/>
        <parameter name="bytes_written" type="GnomeVFSFileSize"/>
        <parameter name="callback_data" type="gpointer"/>
      </parameters>
    </callback>
    <callback name="GnomeVFSAsyncXferProgressCallback" type-name="GnomeVFSAsyncXferProgressCallback">
      <return-type type="gint"/>
      <parameters>
        <parameter name="handle" type="GnomeVFSAsyncHandle*"/>
        <parameter name="info" type="GnomeVFSXferProgressInfo*"/>
        <parameter name="user_data" type="gpointer"/>
      </parameters>
    </callback>
    <callback name="GnomeVFSDNSSDBrowseCallback" type-name="GnomeVFSDNSSDBrowseCallback">
      <return-type type="void"/>
      <parameters>
        <parameter name="handle" type="GnomeVFSDNSSDBrowseHandle*"/>
        <parameter name="status" type="GnomeVFSDNSSDServiceStatus"/>
        <parameter name="service" type="const-GnomeVFSDNSSDService*"/>
        <parameter name="callback_data" type="gpointer"/>
      </parameters>
    </callback>
    <callback name="GnomeVFSDNSSDResolveCallback" type-name="GnomeVFSDNSSDResolveCallback">
      <return-type type="void"/>
      <parameters>
        <parameter name="handle" type="GnomeVFSDNSSDResolveHandle*"/>
        <parameter name="result" type="GnomeVFSResult"/>
        <parameter name="service" type="const-GnomeVFSDNSSDService*"/>
        <parameter name="host" type="const-char*"/>
        <parameter name="port" type="int"/>
        <parameter name="text" type="const-GHashTable*"/>
        <parameter name="text_raw_len" type="int"/>
        <parameter name="text_raw" type="const-char*"/>
        <parameter name="callback_data" type="gpointer"/>
      </parameters>
    </callback>
    <callback name="GnomeVFSDirectoryVisitFunc" type-name="GnomeVFSDirectoryVisitFunc">
      <return-type type="gboolean"/>
      <parameters>
        <parameter name="rel_path" type="const-gchar*"/>
        <parameter name="info" type="GnomeVFSFileInfo*"/>
        <parameter name="recursing_will_loop" type="gboolean"/>
        <parameter name="user_data" type="gpointer"/>
        <parameter name="recurse" type="gboolean*"/>
      </parameters>
    </callback>
    <callback name="GnomeVFSModuleCallback" type-name="GnomeVFSModuleCallback">
      <return-type type="void"/>
      <parameters>
        <parameter name="in" type="gconstpointer"/>
        <parameter name="in_size" type="gsize"/>
        <parameter name="out" type="gpointer"/>
        <parameter name="out_size" type="gsize"/>
        <parameter name="callback_data" type="gpointer"/>
      </parameters>
    </callback>
    <callback name="GnomeVFSModuleCallbackResponse" type-name="GnomeVFSModuleCallbackResponse">
      <return-type type="void"/>
      <parameters>
        <parameter name="response_data" type="gpointer"/>
      </parameters>
    </callback>
    <callback name="GnomeVFSMonitorCallback" type-name="GnomeVFSMonitorCallback">
      <return-type type="void"/>
      <parameters>
        <parameter name="handle" type="GnomeVFSMonitorHandle*"/>
        <parameter name="monitor_uri" type="const-gchar*"/>
        <parameter name="info_uri" type="const-gchar*"/>
        <parameter name="event_type" type="GnomeVFSMonitorEventType"/>
        <parameter name="user_data" type="gpointer"/>
      </parameters>
    </callback>
    <callback name="GnomeVFSSniffBufferReadCall" type-name="GnomeVFSSniffBufferReadCall">
      <return-type type="GnomeVFSResult"/>
      <parameters>
        <parameter name="context" type="gpointer"/>
        <parameter name="buffer" type="gpointer"/>
        <parameter name="bytes" type="GnomeVFSFileSize"/>
        <parameter name="bytes_read" type="GnomeVFSFileSize*"/>
      </parameters>
    </callback>
    <callback name="GnomeVFSSniffBufferSeekCall" type-name="GnomeVFSSniffBufferSeekCall">
      <return-type type="GnomeVFSResult"/>
      <parameters>
        <parameter name="context" type="gpointer"/>
        <parameter name="whence" type="GnomeVFSSeekPosition"/>
        <parameter name="offset" type="GnomeVFSFileOffset"/>
      </parameters>
    </callback>
    <callback name="GnomeVFSSocketCloseFunc" type-name="GnomeVFSSocketCloseFunc">
      <return-type type="void"/>
      <parameters>
        <parameter name="connection" type="gpointer"/>
        <parameter name="cancellation" type="GnomeVFSCancellation*"/>
      </parameters>
    </callback>
    <callback name="GnomeVFSSocketReadFunc" type-name="GnomeVFSSocketReadFunc">
      <return-type type="GnomeVFSResult"/>
      <parameters>
        <parameter name="connection" type="gpointer"/>
        <parameter name="buffer" type="gpointer"/>
        <parameter name="bytes" type="GnomeVFSFileSize"/>
        <parameter name="bytes_read_out" type="GnomeVFSFileSize*"/>
        <parameter name="cancellation" type="GnomeVFSCancellation*"/>
      </parameters>
    </callback>
    <callback name="GnomeVFSSocketSetTimeoutFunc" type-name="GnomeVFSSocketSetTimeoutFunc">
      <return-type type="GnomeVFSResult"/>
      <parameters>
        <parameter name="connection" type="gpointer"/>
        <parameter name="timeout" type="GTimeVal*"/>
        <parameter name="cancellation" type="GnomeVFSCancellation*"/>
      </parameters>
    </callback>
    <callback name="GnomeVFSSocketWriteFunc" type-name="GnomeVFSSocketWriteFunc">
      <return-type type="GnomeVFSResult"/>
      <parameters>
        <parameter name="connection" type="gpointer"/>
        <parameter name="buffer" type="gconstpointer"/>
        <parameter name="bytes" type="GnomeVFSFileSize"/>
        <parameter name="bytes_written_out" type="GnomeVFSFileSize*"/>
        <parameter name="cancellation" type="GnomeVFSCancellation*"/>
      </parameters>
    </callback>
    <callback name="GnomeVFSTransformFunc" type-name="GnomeVFSTransformFunc">
      <return-type type="GnomeVFSResult"/>
      <parameters>
        <parameter name="transform" type="GnomeVFSTransform*"/>
        <parameter name="old_uri" type="const-char*"/>
        <parameter name="new_uri" type="char**"/>
        <parameter name="context" type="GnomeVFSContext*"/>
      </parameters>
    </callback>
    <callback name="GnomeVFSTransformInitFunc" type-name="GnomeVFSTransformInitFunc">
      <return-type type="GnomeVFSTransform*"/>
      <parameters>
        <parameter name="method_name" type="const-char*"/>
        <parameter name="config_args" type="const-char*"/>
      </parameters>
    </callback>
    <callback name="GnomeVFSUnixMountCallback" type-name="GnomeVFSUnixMountCallback">
      <return-type type="void"/>
      <parameters>
        <parameter name="user_data" type="gpointer"/>
      </parameters>
    </callback>
    <callback name="GnomeVFSVolumeOpCallback" type-name="GnomeVFSVolumeOpCallback">
      <return-type type="void"/>
      <parameters>
        <parameter name="succeeded" type="gboolean"/>
        <parameter name="error" type="char*"/>
        <parameter name="detailed_error" type="char*"/>
        <parameter name="user_data" type="gpointer"/>
      </parameters>
    </callback>
    <callback name="GnomeVFSXferProgressCallback" type-name="GnomeVFSXferProgressCallback">
      <return-type type="gint"/>
      <parameters>
        <parameter name="info" type="GnomeVFSXferProgressInfo*"/>
        <parameter name="user_data" type="gpointer"/>
      </parameters>
    </callback>
    <callback name="XdgMimeCallback" type-name="XdgMimeCallback">
      <return-type type="void"/>
      <parameters>
        <parameter name="user_data" type="void*"/>
      </parameters>
    </callback>
    <callback name="XdgMimeDestroy" type-name="XdgMimeDestroy">
      <return-type type="void"/>
      <parameters>
        <parameter name="user_data" type="void*"/>
      </parameters>
    </callback>
    <object get-type="" name="GnomeVFSMIMEMonitor" parent="GObject" type-name="GnomeVFSMIMEMonitor">
      <field name="priv" type="GnomeVFSMIMEMonitorPrivate*"/>
      <signal name="data_changed" when="LAST">
        <return-type type="void"/>
        <parameters>
          <parameter name="monitor" type="GnomeVFSMIMEMonitor*"/>
        </parameters>
      </signal>
      <method name="get" symbol="gnome_vfs_mime_monitor_get">
        <return-type type="GnomeVFSMIMEMonitor*"/>
      </method>
      <method name="get_type" symbol="gnome_vfs_mime_monitor_get_type">
        <return-type type="GType"/>
      </method>
    </object>
    <object get-type="" name="GnomeVFSACE" parent="GObject" type-name="GnomeVFSACE">
      <field name="priv" type="GnomeVFSACEPrivate*"/>
      <method name="add_perm" symbol="gnome_vfs_ace_add_perm">
        <return-type type="void"/>
        <parameters>
          <parameter name="entry" type="GnomeVFSACE*"/>
          <parameter name="perm" type="GnomeVFSACLPerm"/>
        </parameters>
      </method>
      <method name="check_perm" symbol="gnome_vfs_ace_check_perm">
        <return-type type="gboolean"/>
        <parameters>
          <parameter name="entry" type="GnomeVFSACE*"/>
          <parameter name="perm" type="GnomeVFSACLPerm"/>
        </parameters>
      </method>
      <method name="copy_perms" symbol="gnome_vfs_ace_copy_perms">
        <return-type type="void"/>
        <parameters>
          <parameter name="source" type="GnomeVFSACE*"/>
          <parameter name="dest" type="GnomeVFSACE*"/>
        </parameters>
      </method>
      <method name="del_perm" symbol="gnome_vfs_ace_del_perm">
        <return-type type="void"/>
        <parameters>
          <parameter name="entry" type="GnomeVFSACE*"/>
          <parameter name="perm" type="GnomeVFSACLPerm"/>
        </parameters>
      </method>
      <method name="equal" symbol="gnome_vfs_ace_equal">
        <return-type type="gboolean"/>
        <parameters>
          <parameter name="entry_a" type="GnomeVFSACE*"/>
          <parameter name="entry_b" type="GnomeVFSACE*"/>
        </parameters>
      </method>
      <method name="get_id" symbol="gnome_vfs_ace_get_id">
        <return-type type="const-char*"/>
        <parameters>
          <parameter name="entry" type="GnomeVFSACE*"/>
        </parameters>
      </method>
      <method name="get_inherit" symbol="gnome_vfs_ace_get_inherit">
        <return-type type="gboolean"/>
        <parameters>
          <parameter name="entry" type="GnomeVFSACE*"/>
        </parameters>
      </method>
      <method name="get_kind" symbol="gnome_vfs_ace_get_kind">
        <return-type type="GnomeVFSACLKind"/>
        <parameters>
          <parameter name="entry" type="GnomeVFSACE*"/>
        </parameters>
      </method>
      <method name="get_negative" symbol="gnome_vfs_ace_get_negative">
        <return-type type="gboolean"/>
        <parameters>
          <parameter name="entry" type="GnomeVFSACE*"/>
        </parameters>
      </method>
      <method name="get_perms" symbol="gnome_vfs_ace_get_perms">
        <return-type type="const-GnomeVFSACLPerm*"/>
        <parameters>
          <parameter name="entry" type="GnomeVFSACE*"/>
        </parameters>
      </method>
      <method name="get_type" symbol="gnome_vfs_ace_get_type">
        <return-type type="GType"/>
      </method>
      <constructor name="new" symbol="gnome_vfs_ace_new">
        <parameters>
          <parameter name="kind" type="GnomeVFSACLKind"/>
          <parameter name="id" type="const-char*"/>
          <parameter name="perms" type="GnomeVFSACLPerm*"/>
        </parameters>
      </constructor>
      <method name="set_id" symbol="gnome_vfs_ace_set_id">
        <return-type type="void"/>
        <parameters>
          <parameter name="entry" type="GnomeVFSACE*"/>
          <parameter name="id" type="const-char*"/>
        </parameters>
      </method>
      <method name="set_inherit" symbol="gnome_vfs_ace_set_inherit">
        <return-type type="void"/>
        <parameters>
          <parameter name="entry" type="GnomeVFSACE*"/>
          <parameter name="inherit" type="gboolean"/>
        </parameters>
      </method>
      <method name="set_kind" symbol="gnome_vfs_ace_set_kind">
        <return-type type="void"/>
        <parameters>
          <parameter name="entry" type="GnomeVFSACE*"/>
          <parameter name="kind" type="GnomeVFSACLKind"/>
        </parameters>
      </method>
      <method name="set_negative" symbol="gnome_vfs_ace_set_negative">
        <return-type type="void"/>
        <parameters>
          <parameter name="entry" type="GnomeVFSACE*"/>
          <parameter name="negative" type="gboolean"/>
        </parameters>
      </method>
      <method name="set_perms" symbol="gnome_vfs_ace_set_perms">
        <return-type type="void"/>
        <parameters>
          <parameter name="entry" type="GnomeVFSACE*"/>
          <parameter name="perms" type="GnomeVFSACLPerm*"/>
        </parameters>
      </method>
    </object>
    <object get-type="" name="GnomeVFSACL" parent="GObject" type-name="GnomeVFSACL">
      <field name="priv" type="GnomeVFSACLPrivate*"/>
      <method name="clear" symbol="gnome_vfs_acl_clear">
        <return-type type="void"/>
        <parameters>
          <parameter name="acl" type="GnomeVFSACL*"/>
        </parameters>
      </method>
      <method name="free_ace_list" symbol="gnome_vfs_acl_free_ace_list">
        <return-type type="void"/>
        <parameters>
          <parameter name="ace_list" type="GList*"/>
        </parameters>
      </method>
      <method name="get_ace_list" symbol="gnome_vfs_acl_get_ace_list">
        <return-type type="GList*"/>
        <parameters>
          <parameter name="acl" type="GnomeVFSACL*"/>
        </parameters>
      </method>
      <method name="get_type" symbol="gnome_vfs_acl_get_type">
        <return-type type="GType"/>
      </method>
      <method name="kind_to_string" symbol="gnome_vfs_acl_kind_to_string">
        <return-type type="const-char*"/>
        <parameters>
          <parameter name="kind" type="GnomeVFSACLKind"/>
        </parameters>
      </method>
      <constructor name="new" symbol="gnome_vfs_acl_new"/>
      <method name="perm_to_string" symbol="gnome_vfs_acl_perm_to_string">
        <return-type type="const-char*"/>
        <parameters>
          <parameter name="perm" type="GnomeVFSACLPerm"/>
        </parameters>
      </method>
      <method name="set" symbol="gnome_vfs_acl_set">
        <return-type type="void"/>
        <parameters>
          <parameter name="acl" type="GnomeVFSACL*"/>
          <parameter name="ace" type="GnomeVFSACE*"/>
        </parameters>
      </method>
      <method name="unset" symbol="gnome_vfs_acl_unset">
        <return-type type="void"/>
        <parameters>
          <parameter name="acl" type="GnomeVFSACL*"/>
          <parameter name="ace" type="GnomeVFSACE*"/>
        </parameters>
      </method>
    </object>
    <object get-type="" name="GnomeVFSDrive" parent="GObject" type-name="GnomeVFSDrive">
      <field name="priv" type="GnomeVFSDrivePrivate*"/>
      <signal name="volume_mounted" when="FIRST">
        <return-type type="void"/>
        <parameters>
          <parameter name="drive" type="GnomeVFSDrive*"/>
          <parameter name="volume" type="GnomeVFSVolume*"/>
        </parameters>
      </signal>
      <signal name="volume_pre_unmount" when="FIRST">
        <return-type type="void"/>
        <parameters>
          <parameter name="drive" type="GnomeVFSDrive*"/>
          <parameter name="volume" type="GnomeVFSVolume*"/>
        </parameters>
      </signal>
      <signal name="volume_unmounted" when="FIRST">
        <return-type type="void"/>
        <parameters>
          <parameter name="drive" type="GnomeVFSDrive*"/>
          <parameter name="volume" type="GnomeVFSVolume*"/>
        </parameters>
      </signal>
      <method name="compare" symbol="gnome_vfs_drive_compare">
        <return-type type="gint"/>
        <parameters>
          <parameter name="a" type="GnomeVFSDrive*"/>
          <parameter name="b" type="GnomeVFSDrive*"/>
        </parameters>
      </method>
      <method name="eject" symbol="gnome_vfs_drive_eject">
        <return-type type="void"/>
        <parameters>
          <parameter name="drive" type="GnomeVFSDrive*"/>
          <parameter name="callback" type="GnomeVFSVolumeOpCallback"/>
          <parameter name="user_data" type="gpointer"/>
        </parameters>
      </method>
      <method name="get_activation_uri" symbol="gnome_vfs_drive_get_activation_uri">
        <return-type type="char*"/>
        <parameters>
          <parameter name="drive" type="GnomeVFSDrive*"/>
        </parameters>
      </method>
      <method name="get_device_path" symbol="gnome_vfs_drive_get_device_path">
        <return-type type="char*"/>
        <parameters>
          <parameter name="drive" type="GnomeVFSDrive*"/>
        </parameters>
      </method>
      <method name="get_device_type" symbol="gnome_vfs_drive_get_device_type">
        <return-type type="GnomeVFSDeviceType"/>
        <parameters>
          <parameter name="drive" type="GnomeVFSDrive*"/>
        </parameters>
      </method>
      <method name="get_display_name" symbol="gnome_vfs_drive_get_display_name">
        <return-type type="char*"/>
        <parameters>
          <parameter name="drive" type="GnomeVFSDrive*"/>
        </parameters>
      </method>
      <method name="get_hal_udi" symbol="gnome_vfs_drive_get_hal_udi">
        <return-type type="char*"/>
        <parameters>
          <parameter name="drive" type="GnomeVFSDrive*"/>
        </parameters>
      </method>
      <method name="get_icon" symbol="gnome_vfs_drive_get_icon">
        <return-type type="char*"/>
        <parameters>
          <parameter name="drive" type="GnomeVFSDrive*"/>
        </parameters>
      </method>
      <method name="get_id" symbol="gnome_vfs_drive_get_id">
        <return-type type="gulong"/>
        <parameters>
          <parameter name="drive" type="GnomeVFSDrive*"/>
        </parameters>
      </method>
      <method deprecated="1" name="get_mounted_volume" symbol="gnome_vfs_drive_get_mounted_volume">
        <return-type type="GnomeVFSVolume*"/>
        <parameters>
          <parameter name="drive" type="GnomeVFSDrive*"/>
        </parameters>
      </method>
      <method name="get_mounted_volumes" symbol="gnome_vfs_drive_get_mounted_volumes">
        <return-type type="GList*"/>
        <parameters>
          <parameter name="drive" type="GnomeVFSDrive*"/>
        </parameters>
      </method>
      <method name="get_type" symbol="gnome_vfs_drive_get_type">
        <return-type type="GType"/>
      </method>
      <method name="is_connected" symbol="gnome_vfs_drive_is_connected">
        <return-type type="gboolean"/>
        <parameters>
          <parameter name="drive" type="GnomeVFSDrive*"/>
        </parameters>
      </method>
      <method name="is_mounted" symbol="gnome_vfs_drive_is_mounted">
        <return-type type="gboolean"/>
        <parameters>
          <parameter name="drive" type="GnomeVFSDrive*"/>
        </parameters>
      </method>
      <method name="is_user_visible" symbol="gnome_vfs_drive_is_user_visible">
        <return-type type="gboolean"/>
        <parameters>
          <parameter name="drive" type="GnomeVFSDrive*"/>
        </parameters>
      </method>
      <method name="mount" symbol="gnome_vfs_drive_mount">
        <return-type type="void"/>
        <parameters>
          <parameter name="drive" type="GnomeVFSDrive*"/>
          <parameter name="callback" type="GnomeVFSVolumeOpCallback"/>
          <parameter name="user_data" type="gpointer"/>
        </parameters>
      </method>
      <method name="needs_eject" symbol="gnome_vfs_drive_needs_eject">
        <return-type type="gboolean"/>
        <parameters>
          <parameter name="drive" type="GnomeVFSDrive*"/>
        </parameters>
      </method>
      <method name="ref" symbol="gnome_vfs_drive_ref">
        <return-type type="GnomeVFSDrive*"/>
        <parameters>
          <parameter name="drive" type="GnomeVFSDrive*"/>
        </parameters>
      </method>
      <method name="unmount" symbol="gnome_vfs_drive_unmount">
        <return-type type="void"/>
        <parameters>
          <parameter name="drive" type="GnomeVFSDrive*"/>
          <parameter name="callback" type="GnomeVFSVolumeOpCallback"/>
          <parameter name="user_data" type="gpointer"/>
        </parameters>
      </method>
      <method name="unref" symbol="gnome_vfs_drive_unref">
        <return-type type="void"/>
        <parameters>
          <parameter name="drive" type="GnomeVFSDrive*"/>
        </parameters>
      </method>
      <method name="volume_list_free" symbol="gnome_vfs_drive_volume_list_free">
        <return-type type="void"/>
        <parameters>
          <parameter name="volumes" type="GList*"/>
        </parameters>
      </method>
    </object>
    <object get-type="" name="GnomeVFSVolume" parent="GObject" type-name="GnomeVFSVolume">
      <field name="priv" type="GnomeVFSVolumePrivate*"/>
      <method name="compare" symbol="gnome_vfs_volume_compare">
        <return-type type="gint"/>
        <parameters>
          <parameter name="a" type="GnomeVFSVolume*"/>
          <parameter name="b" type="GnomeVFSVolume*"/>
        </parameters>
      </method>
      <method name="eject" symbol="gnome_vfs_volume_eject">
        <return-type type="void"/>
        <parameters>
          <parameter name="volume" type="GnomeVFSVolume*"/>
          <parameter name="callback" type="GnomeVFSVolumeOpCallback"/>
          <parameter name="user_data" type="gpointer"/>
        </parameters>
      </method>
      <method name="get_activation_uri" symbol="gnome_vfs_volume_get_activation_uri">
        <return-type type="char*"/>
        <parameters>
          <parameter name="volume" type="GnomeVFSVolume*"/>
        </parameters>
      </method>
      <method name="get_device_path" symbol="gnome_vfs_volume_get_device_path">
        <return-type type="char*"/>
        <parameters>
          <parameter name="volume" type="GnomeVFSVolume*"/>
        </parameters>
      </method>
      <method name="get_device_type" symbol="gnome_vfs_volume_get_device_type">
        <return-type type="GnomeVFSDeviceType"/>
        <parameters>
          <parameter name="volume" type="GnomeVFSVolume*"/>
        </parameters>
      </method>
      <method name="get_display_name" symbol="gnome_vfs_volume_get_display_name">
        <return-type type="char*"/>
        <parameters>
          <parameter name="volume" type="GnomeVFSVolume*"/>
        </parameters>
      </method>
      <method name="get_drive" symbol="gnome_vfs_volume_get_drive">
        <return-type type="GnomeVFSDrive*"/>
        <parameters>
          <parameter name="volume" type="GnomeVFSVolume*"/>
        </parameters>
      </method>
      <method name="get_filesystem_type" symbol="gnome_vfs_volume_get_filesystem_type">
        <return-type type="char*"/>
        <parameters>
          <parameter name="volume" type="GnomeVFSVolume*"/>
        </parameters>
      </method>
      <method name="get_hal_udi" symbol="gnome_vfs_volume_get_hal_udi">
        <return-type type="char*"/>
        <parameters>
          <parameter name="volume" type="GnomeVFSVolume*"/>
        </parameters>
      </method>
      <method name="get_icon" symbol="gnome_vfs_volume_get_icon">
        <return-type type="char*"/>
        <parameters>
          <parameter name="volume" type="GnomeVFSVolume*"/>
        </parameters>
      </method>
      <method name="get_id" symbol="gnome_vfs_volume_get_id">
        <return-type type="gulong"/>
        <parameters>
          <parameter name="volume" type="GnomeVFSVolume*"/>
        </parameters>
      </method>
      <method name="get_type" symbol="gnome_vfs_volume_get_type">
        <return-type type="GType"/>
      </method>
      <method name="get_volume_type" symbol="gnome_vfs_volume_get_volume_type">
        <return-type type="GnomeVFSVolumeType"/>
        <parameters>
          <parameter name="volume" type="GnomeVFSVolume*"/>
        </parameters>
      </method>
      <method name="handles_trash" symbol="gnome_vfs_volume_handles_trash">
        <return-type type="gboolean"/>
        <parameters>
          <parameter name="volume" type="GnomeVFSVolume*"/>
        </parameters>
      </method>
      <method name="is_mounted" symbol="gnome_vfs_volume_is_mounted">
        <return-type type="gboolean"/>
        <parameters>
          <parameter name="volume" type="GnomeVFSVolume*"/>
        </parameters>
      </method>
      <method name="is_read_only" symbol="gnome_vfs_volume_is_read_only">
        <return-type type="gboolean"/>
        <parameters>
          <parameter name="volume" type="GnomeVFSVolume*"/>
        </parameters>
      </method>
      <method name="is_user_visible" symbol="gnome_vfs_volume_is_user_visible">
        <return-type type="gboolean"/>
        <parameters>
          <parameter name="volume" type="GnomeVFSVolume*"/>
        </parameters>
      </method>
      <method name="ref" symbol="gnome_vfs_volume_ref">
        <return-type type="GnomeVFSVolume*"/>
        <parameters>
          <parameter name="volume" type="GnomeVFSVolume*"/>
        </parameters>
      </method>
      <method name="unmount" symbol="gnome_vfs_volume_unmount">
        <return-type type="void"/>
        <parameters>
          <parameter name="volume" type="GnomeVFSVolume*"/>
          <parameter name="callback" type="GnomeVFSVolumeOpCallback"/>
          <parameter name="user_data" type="gpointer"/>
        </parameters>
      </method>
      <method name="unref" symbol="gnome_vfs_volume_unref">
        <return-type type="void"/>
        <parameters>
          <parameter name="volume" type="GnomeVFSVolume*"/>
        </parameters>
      </method>
    </object>
    <object get-type="" name="GnomeVFSVolumeMonitor" parent="GObject" type-name="GnomeVFSVolumeMonitor">
      <field name="priv" type="GnomeVFSVolumeMonitorPrivate*"/>
      <signal name="volume_mounted" when="FIRST">
        <return-type type="void"/>
        <parameters>
          <parameter name="volume_monitor" type="GnomeVFSVolumeMonitor*"/>
          <parameter name="volume" type="GnomeVFSVolume*"/>
        </parameters>
      </signal>
      <signal name="volume_pre_unmount" when="FIRST">
        <return-type type="void"/>
        <parameters>
          <parameter name="volume_monitor" type="GnomeVFSVolumeMonitor*"/>
          <parameter name="volume" type="GnomeVFSVolume*"/>
        </parameters>
      </signal>
      <signal name="volume_unmounted" when="FIRST">
        <return-type type="void"/>
        <parameters>
          <parameter name="volume_monitor" type="GnomeVFSVolumeMonitor*"/>
          <parameter name="volume" type="GnomeVFSVolume*"/>
        </parameters>
      </signal>
      <signal name="drive_connected" when="FIRST">
        <return-type type="void"/>
        <parameters>
          <parameter name="volume_monitor" type="GnomeVFSVolumeMonitor*"/>
          <parameter name="drive" type="GnomeVFSDrive*"/>
        </parameters>
      </signal>
      <signal name="drive_disconnected" when="FIRST">
        <return-type type="void"/>
        <parameters>
          <parameter name="volume_monitor" type="GnomeVFSVolumeMonitor*"/>
          <parameter name="drive" type="GnomeVFSDrive*"/>
        </parameters>
      </signal>
      <method name="get_connected_drives" symbol="gnome_vfs_volume_monitor_get_connected_drives">
        <return-type type="GList*"/>
        <parameters>
          <parameter name="volume_monitor" type="GnomeVFSVolumeMonitor*"/>
        </parameters>
      </method>
      <method name="get_drive_by_id" symbol="gnome_vfs_volume_monitor_get_drive_by_id">
        <return-type type="GnomeVFSDrive*"/>
        <parameters>
          <parameter name="volume_monitor" type="GnomeVFSVolumeMonitor*"/>
          <parameter name="id" type="gulong"/>
        </parameters>
      </method>
      <method name="get_mounted_volumes" symbol="gnome_vfs_volume_monitor_get_mounted_volumes">
        <return-type type="GList*"/>
        <parameters>
          <parameter name="volume_monitor" type="GnomeVFSVolumeMonitor*"/>
        </parameters>
      </method>
      <method name="get_type" symbol="gnome_vfs_volume_monitor_get_type">
        <return-type type="GType"/>
      </method>
      <method name="get_volume_by_id" symbol="gnome_vfs_volume_monitor_get_volume_by_id">
        <return-type type="GnomeVFSVolume*"/>
        <parameters>
          <parameter name="volume_monitor" type="GnomeVFSVolumeMonitor*"/>
          <parameter name="id" type="gulong"/>
        </parameters>
      </method>
      <method name="get_volume_for_path" symbol="gnome_vfs_volume_monitor_get_volume_for_path">
        <return-type type="GnomeVFSVolume*"/>
        <parameters>
          <parameter name="volume_monitor" type="GnomeVFSVolumeMonitor*"/>
          <parameter name="path" type="const-char*"/>
        </parameters>
      </method>
      <method name="ref" symbol="gnome_vfs_volume_monitor_ref">
        <return-type type="GnomeVFSVolumeMonitor*"/>
        <parameters>
          <parameter name="volume_monitor" type="GnomeVFSVolumeMonitor*"/>
        </parameters>
      </method>
      <method name="unref" symbol="gnome_vfs_volume_monitor_unref">
        <return-type type="void"/>
        <parameters>
          <parameter name="volume_monitor" type="GnomeVFSVolumeMonitor*"/>
        </parameters>
      </method>
    </object>
    <boxed get-type="" name="GnomeVFSAddress" opaque="true" type-name="GnomeVFSAddress">
      <method name="dup" symbol="gnome_vfs_address_dup">
        <return-type type="GnomeVFSAddress*"/>
        <parameters>
          <parameter name="address" type="GnomeVFSAddress*"/>
        </parameters>
      </method>
      <method name="equal" symbol="gnome_vfs_address_equal">
        <return-type type="gboolean"/>
        <parameters>
          <parameter name="a" type="const-GnomeVFSAddress*"/>
          <parameter name="b" type="const-GnomeVFSAddress*"/>
        </parameters>
      </method>
      <method name="free" symbol="gnome_vfs_address_free">
        <return-type type="void"/>
        <parameters>
          <parameter name="address" type="GnomeVFSAddress*"/>
        </parameters>
      </method>
      <method name="get_family_type" symbol="gnome_vfs_address_get_family_type">
        <return-type type="int"/>
        <parameters>
          <parameter name="address" type="GnomeVFSAddress*"/>
        </parameters>
      </method>
      <method name="get_ipv4" symbol="gnome_vfs_address_get_ipv4">
        <return-type type="guint32"/>
        <parameters>
          <parameter name="address" type="GnomeVFSAddress*"/>
        </parameters>
      </method>
      <method name="get_type" symbol="gnome_vfs_address_get_type">
        <return-type type="GType"/>
      </method>
      <method name="match" symbol="gnome_vfs_address_match">
        <return-type type="gboolean"/>
        <parameters>
          <parameter name="a" type="const-GnomeVFSAddress*"/>
          <parameter name="b" type="const-GnomeVFSAddress*"/>
          <parameter name="prefix" type="guint"/>
        </parameters>
      </method>
      <method name="new_from_ipv4" symbol="gnome_vfs_address_new_from_ipv4">
        <return-type type="GnomeVFSAddress*"/>
        <parameters>
          <parameter name="ipv4_address" type="guint32"/>
        </parameters>
      </method>
      <method name="new_from_sockaddr" symbol="gnome_vfs_address_new_from_sockaddr">
        <return-type type="GnomeVFSAddress*"/>
        <parameters>
          <parameter name="sa" type="sockaddr*"/>
          <parameter name="len" type="int"/>
        </parameters>
      </method>
      <method name="new_from_string" symbol="gnome_vfs_address_new_from_string">
        <return-type type="GnomeVFSAddress*"/>
        <parameters>
          <parameter name="address" type="const-char*"/>
        </parameters>
      </method>
      <method name="to_string" symbol="gnome_vfs_address_to_string">
        <return-type type="char*"/>
        <parameters>
          <parameter name="address" type="GnomeVFSAddress*"/>
        </parameters>
      </method>
    </boxed>
    <struct get-type="" name="GnomeVFSAsyncHandle" opaque="true" type-name="GnomeVFSAsyncHandle"/>
    <struct get-type="" name="GnomeVFSCancellation" opaque="true" type-name="GnomeVFSCancellation">
      <method name="ack" symbol="gnome_vfs_cancellation_ack">
        <return-type type="void"/>
        <parameters>
          <parameter name="cancellation" type="GnomeVFSCancellation*"/>
        </parameters>
      </method>
      <method name="cancel" symbol="gnome_vfs_cancellation_cancel">
        <return-type type="void"/>
        <parameters>
          <parameter name="cancellation" type="GnomeVFSCancellation*"/>
        </parameters>
      </method>
      <method name="check" symbol="gnome_vfs_cancellation_check">
        <return-type type="gboolean"/>
        <parameters>
          <parameter name="cancellation" type="GnomeVFSCancellation*"/>
        </parameters>
      </method>
      <method name="destroy" symbol="gnome_vfs_cancellation_destroy">
        <return-type type="void"/>
        <parameters>
          <parameter name="cancellation" type="GnomeVFSCancellation*"/>
        </parameters>
      </method>
      <method name="get_fd" symbol="gnome_vfs_cancellation_get_fd">
        <return-type type="gint"/>
        <parameters>
          <parameter name="cancellation" type="GnomeVFSCancellation*"/>
        </parameters>
      </method>
      <method name="new" symbol="gnome_vfs_cancellation_new">
        <return-type type="GnomeVFSCancellation*"/>
      </method>
    </struct>
    <struct get-type="" name="GnomeVFSCloseOp" type-name="GnomeVFSCloseOp">
      <field name="dummy" readable="1" type="char" writable="1"/>
    </struct>
    <struct get-type="" name="GnomeVFSCloseOpResult" type-name="GnomeVFSCloseOpResult">
      <field name="callback" readable="1" type="GnomeVFSAsyncCloseCallback" writable="1"/>
      <field name="callback_data" readable="1" type="void*" writable="1"/>
      <field name="result" readable="1" type="GnomeVFSResult" writable="1"/>
    </struct>
    <struct get-type="" name="GnomeVFSContext" opaque="true" type-name="GnomeVFSContext">
      <method name="check_cancellation_current" symbol="gnome_vfs_context_check_cancellation_current">
        <return-type type="gboolean"/>
      </method>
      <method name="free" symbol="gnome_vfs_context_free">
        <return-type type="void"/>
        <parameters>
          <parameter name="ctx" type="GnomeVFSContext*"/>
        </parameters>
      </method>
      <method name="get_cancellation" symbol="gnome_vfs_context_get_cancellation">
        <return-type type="GnomeVFSCancellation*"/>
        <parameters>
          <parameter name="ctx" type="const-GnomeVFSContext*"/>
        </parameters>
      </method>
      <method name="new" symbol="gnome_vfs_context_new">
        <return-type type="GnomeVFSContext*"/>
      </method>
      <method name="peek_current" symbol="gnome_vfs_context_peek_current">
        <return-type type="const-GnomeVFSContext*"/>
      </method>
    </struct>
    <struct get-type="" name="GnomeVFSCreateAsChannelOp" type-name="GnomeVFSCreateAsChannelOp">
      <field name="uri" readable="1" type="GnomeVFSURI*" writable="1"/>
      <field name="open_mode" readable="1" type="GnomeVFSOpenMode" writable="1"/>
      <field name="exclusive" readable="1" type="gboolean" writable="1"/>
      <field name="perm" readable="1" type="guint" writable="1"/>
    </struct>
    <struct get-type="" name="GnomeVFSCreateAsChannelOpResult" type-name="GnomeVFSCreateAsChannelOpResult">
      <field name="callback" readable="1" type="GnomeVFSAsyncCreateAsChannelCallback" writable="1"/>
      <field name="callback_data" readable="1" type="void*" writable="1"/>
      <field name="result" readable="1" type="GnomeVFSResult" writable="1"/>
      <field name="channel" readable="1" type="GIOChannel*" writable="1"/>
    </struct>
    <struct get-type="" name="GnomeVFSCreateLinkOp" type-name="GnomeVFSCreateLinkOp">
      <field name="uri" readable="1" type="GnomeVFSURI*" writable="1"/>
      <field name="uri_reference" readable="1" type="char*" writable="1"/>
    </struct>
    <struct get-type="" name="GnomeVFSCreateOp" type-name="GnomeVFSCreateOp">
      <field name="uri" readable="1" type="GnomeVFSURI*" writable="1"/>
      <field name="open_mode" readable="1" type="GnomeVFSOpenMode" writable="1"/>
      <field name="exclusive" readable="1" type="gboolean" writable="1"/>
      <field name="perm" readable="1" type="guint" writable="1"/>
    </struct>
    <struct get-type="" name="GnomeVFSCreateOpResult" type-name="GnomeVFSCreateOpResult">
      <field name="callback" readable="1" type="GnomeVFSAsyncCreateCallback" writable="1"/>
      <field name="callback_data" readable="1" type="void*" writable="1"/>
      <field name="result" readable="1" type="GnomeVFSResult" writable="1"/>
    </struct>
    <struct get-type="" name="GnomeVFSDNSSDBrowseHandle" opaque="true" type-name="GnomeVFSDNSSDBrowseHandle"/>
    <struct get-type="" name="GnomeVFSDNSSDResolveHandle" opaque="true" type-name="GnomeVFSDNSSDResolveHandle"/>
    <struct get-type="" name="GnomeVFSDNSSDService" type-name="GnomeVFSDNSSDService">
      <field name="name" readable="1" type="char*" writable="1"/>
      <field name="type" readable="1" type="char*" writable="1"/>
      <field name="domain" readable="1" type="char*" writable="1"/>
    </struct>
    <struct get-type="" name="GnomeVFSDirectoryHandle" opaque="true" type-name="GnomeVFSDirectoryHandle"/>
    <struct get-type="" name="GnomeVFSFileControlOp" type-name="GnomeVFSFileControlOp">
      <field name="operation" readable="1" type="char*" writable="1"/>
      <field name="operation_data" readable="1" type="gpointer" writable="1"/>
      <field name="operation_data_destroy_func" readable="1" type="GDestroyNotify" writable="1"/>
    </struct>
    <struct get-type="" name="GnomeVFSFileControlOpResult" type-name="GnomeVFSFileControlOpResult">
      <field name="callback" readable="1" type="GnomeVFSAsyncFileControlCallback" writable="1"/>
      <field name="callback_data" readable="1" type="gpointer" writable="1"/>
      <field name="result" readable="1" type="GnomeVFSResult" writable="1"/>
      <field name="operation_data" readable="1" type="gpointer" writable="1"/>
      <field name="operation_data_destroy_func" readable="1" type="GDestroyNotify" writable="1"/>
    </struct>
    <struct get-type="" name="GnomeVFSFileInfo" opaque="true" type-name="GnomeVFSFileInfo">
      <field access="public" name="name" readable="1" type="char*" writable="1" writeable="true"/>
      <field access="public" name="valid_fields" readable="1" type="GnomeVFSFileInfoFields" writable="1" writeable="true"/>
      <field access="public" name="type" readable="1" type="GnomeVFSFileType" writable="1" writeable="true"/>
      <field access="public" name="permissions" readable="1" type="GnomeVFSFilePermissions" writable="1" writeable="true"/>
      <field access="public" name="flags" readable="1" type="GnomeVFSFileFlags" writable="1" writeable="true"/>
      <field access="public" name="device" readable="1" type="dev_t" writable="1" writeable="true"/>
      <field access="public" name="inode" readable="1" type="GnomeVFSInodeNumber" writable="1" writeable="true"/>
      <field access="public" name="link_count" readable="1" type="guint" writable="1" writeable="true"/>
      <field access="public" name="uid" readable="1" type="guint" writable="1" writeable="true"/>
      <field access="public" name="gid" readable="1" type="guint" writable="1" writeable="true"/>
      <field access="public" name="size" readable="1" type="GnomeVFSFileSize" writable="1" writeable="true"/>
      <field access="public" name="block_count" readable="1" type="GnomeVFSFileSize" writable="1" writeable="true"/>
      <field access="public" name="io_block_size" readable="1" type="guint" writable="1" writeable="true"/>
      <field access="public" name="atime" readable="1" type="time_t" writable="1" writeable="true"/>
      <field access="public" name="mtime" readable="1" type="time_t" writable="1" writeable="true"/>
      <field access="public" name="ctime" readable="1" type="time_t" writable="1" writeable="true"/>
      <field access="public" name="symlink_name" readable="1" type="char*" writable="1" writeable="true"/>
      <field access="public" name="mime_type" readable="1" type="char*" writable="1" writeable="true"/>
      <field access="public" name="refcount" readable="1" type="guint" writable="1" writeable="true"/>
      <field access="public" name="acl" readable="1" type="GnomeVFSACL*" writable="1" writeable="true"/>
      <field access="public" name="selinux_context" readable="1" type="char*" writable="1" writeable="true"/>
      <field access="public" name="reserved1" readable="1" type="void*" writable="1" writeable="true"/>
      <field access="public" name="reserved2" readable="1" type="void*" writable="1" writeable="true"/>
      <field access="public" name="reserved3" readable="1" type="void*" writable="1" writeable="true"/>
      <method name="clear" symbol="gnome_vfs_file_info_clear">
        <return-type type="void"/>
        <parameters>
          <parameter name="info" type="GnomeVFSFileInfo*"/>
        </parameters>
      </method>
      <method name="copy" symbol="gnome_vfs_file_info_copy">
        <return-type type="void"/>
        <parameters>
          <parameter name="dest" type="GnomeVFSFileInfo*"/>
          <parameter name="src" type="const-GnomeVFSFileInfo*"/>
        </parameters>
      </method>
      <method name="dup" symbol="gnome_vfs_file_info_dup">
        <return-type type="GnomeVFSFileInfo*"/>
        <parameters>
          <parameter name="orig" type="const-GnomeVFSFileInfo*"/>
        </parameters>
      </method>
      <method name="get_mime_type" symbol="gnome_vfs_file_info_get_mime_type">
        <return-type type="const-char*"/>
        <parameters>
          <parameter name="info" type="GnomeVFSFileInfo*"/>
        </parameters>
      </method>
      <method name="get_type" symbol="gnome_vfs_file_info_get_type">
        <return-type type="GType"/>
      </method>
      <method name="list_copy" symbol="gnome_vfs_file_info_list_copy">
        <return-type type="GList*"/>
        <parameters>
          <parameter name="list" type="GList*"/>
        </parameters>
      </method>
      <method name="list_free" symbol="gnome_vfs_file_info_list_free">
        <return-type type="void"/>
        <parameters>
          <parameter name="list" type="GList*"/>
        </parameters>
      </method>
      <method name="list_ref" symbol="gnome_vfs_file_info_list_ref">
        <return-type type="GList*"/>
        <parameters>
          <parameter name="list" type="GList*"/>
        </parameters>
      </method>
      <method name="list_unref" symbol="gnome_vfs_file_info_list_unref">
        <return-type type="GList*"/>
        <parameters>
          <parameter name="list" type="GList*"/>
        </parameters>
      </method>
      <method name="matches" symbol="gnome_vfs_file_info_matches">
        <return-type type="gboolean"/>
        <parameters>
          <parameter name="a" type="const-GnomeVFSFileInfo*"/>
          <parameter name="b" type="const-GnomeVFSFileInfo*"/>
        </parameters>
      </method>
      <method name="new" symbol="gnome_vfs_file_info_new">
        <return-type type="GnomeVFSFileInfo*"/>
      </method>
      <method name="ref" symbol="gnome_vfs_file_info_ref">
        <return-type type="void"/>
        <parameters>
          <parameter name="info" type="GnomeVFSFileInfo*"/>
        </parameters>
      </method>
      <method name="unref" symbol="gnome_vfs_file_info_unref">
        <return-type type="void"/>
        <parameters>
          <parameter name="info" type="GnomeVFSFileInfo*"/>
        </parameters>
      </method>
    </struct>
    <struct get-type="" name="GnomeVFSFindDirectoryOp" type-name="GnomeVFSFindDirectoryOp">
      <field name="uris" readable="1" type="GList*" writable="1"/>
      <field name="kind" readable="1" type="GnomeVFSFindDirectoryKind" writable="1"/>
      <field name="create_if_needed" readable="1" type="gboolean" writable="1"/>
      <field name="find_if_needed" readable="1" type="gboolean" writable="1"/>
      <field name="permissions" readable="1" type="guint" writable="1"/>
    </struct>
    <struct get-type="" name="GnomeVFSFindDirectoryOpResult" type-name="GnomeVFSFindDirectoryOpResult">
      <field name="callback" readable="1" type="GnomeVFSAsyncFindDirectoryCallback" writable="1"/>
      <field name="callback_data" readable="1" type="void*" writable="1"/>
      <field name="result_list" readable="1" type="GList*" writable="1"/>
    </struct>
    <struct get-type="" name="GnomeVFSFindDirectoryResult" type-name="GnomeVFSFindDirectoryResult">
      <field name="uri" readable="1" type="GnomeVFSURI*" writable="1"/>
      <field name="result" readable="1" type="GnomeVFSResult" writable="1"/>
      <field name="reserved1" type="void*"/>
      <field name="reserved2" type="void*"/>
      <method name="dup" symbol="gnome_vfs_find_directory_result_dup">
        <return-type type="GnomeVFSFindDirectoryResult*"/>
        <parameters>
          <parameter name="result" type="GnomeVFSFindDirectoryResult*"/>
        </parameters>
      </method>
      <method name="free" symbol="gnome_vfs_find_directory_result_free">
        <return-type type="void"/>
        <parameters>
          <parameter name="result" type="GnomeVFSFindDirectoryResult*"/>
        </parameters>
      </method>
      <method name="get_type" symbol="gnome_vfs_find_directory_result_get_type">
        <return-type type="GType"/>
      </method>
    </struct>
    <struct get-type="" name="GnomeVFSGetFileInfoOp" type-name="GnomeVFSGetFileInfoOp">
      <field name="uris" readable="1" type="GList*" writable="1"/>
      <field name="options" readable="1" type="GnomeVFSFileInfoOptions" writable="1"/>
    </struct>
    <struct get-type="" name="GnomeVFSGetFileInfoOpResult" type-name="GnomeVFSGetFileInfoOpResult">
      <field name="callback" readable="1" type="GnomeVFSAsyncGetFileInfoCallback" writable="1"/>
      <field name="callback_data" readable="1" type="void*" writable="1"/>
      <field name="result_list" readable="1" type="GList*" writable="1"/>
    </struct>
    <struct get-type="" name="GnomeVFSGetFileInfoResult" type-name="GnomeVFSGetFileInfoResult">
      <field name="uri" readable="1" type="GnomeVFSURI*" writable="1"/>
      <field name="result" readable="1" type="GnomeVFSResult" writable="1"/>
      <field name="file_info" readable="1" type="GnomeVFSFileInfo*" writable="1"/>
      <method name="dup" symbol="gnome_vfs_get_file_info_result_dup">
        <return-type type="GnomeVFSGetFileInfoResult*"/>
        <parameters>
          <parameter name="result" type="GnomeVFSGetFileInfoResult*"/>
        </parameters>
      </method>
      <method name="free" symbol="gnome_vfs_get_file_info_result_free">
        <return-type type="void"/>
        <parameters>
          <parameter name="result" type="GnomeVFSGetFileInfoResult*"/>
        </parameters>
      </method>
      <method name="get_type" symbol="gnome_vfs_get_file_info_result_get_type">
        <return-type type="GType"/>
      </method>
    </struct>
    <struct get-type="" name="GnomeVFSHandle" opaque="true" type-name="GnomeVFSHandle"/>
    <struct get-type="" name="GnomeVFSInetConnection" opaque="true" type-name="GnomeVFSInetConnection">
      <method name="create" symbol="gnome_vfs_inet_connection_create">
        <return-type type="GnomeVFSResult"/>
        <parameters>
          <parameter name="connection_return" type="GnomeVFSInetConnection**"/>
          <parameter name="host_name" type="const-gchar*"/>
          <parameter name="host_port" type="guint"/>
          <parameter name="cancellation" type="GnomeVFSCancellation*"/>
        </parameters>
      </method>
      <method name="create_from_address" symbol="gnome_vfs_inet_connection_create_from_address">
        <return-type type="GnomeVFSResult"/>
        <parameters>
          <parameter name="connection_return" type="GnomeVFSInetConnection**"/>
          <parameter name="address" type="GnomeVFSAddress*"/>
          <parameter name="host_port" type="guint"/>
          <parameter name="cancellation" type="GnomeVFSCancellation*"/>
        </parameters>
      </method>
      <method name="destroy" symbol="gnome_vfs_inet_connection_destroy">
        <return-type type="void"/>
        <parameters>
          <parameter name="connection" type="GnomeVFSInetConnection*"/>
          <parameter name="cancellation" type="GnomeVFSCancellation*"/>
        </parameters>
      </method>
      <method name="free" symbol="gnome_vfs_inet_connection_free">
        <return-type type="void"/>
        <parameters>
          <parameter name="connection" type="GnomeVFSInetConnection*"/>
          <parameter name="cancellation" type="GnomeVFSCancellation*"/>
        </parameters>
      </method>
      <method name="get_address" symbol="gnome_vfs_inet_connection_get_address">
        <return-type type="GnomeVFSAddress*"/>
        <parameters>
          <parameter name="connection" type="GnomeVFSInetConnection*"/>
        </parameters>
      </method>
      <method name="get_fd" symbol="gnome_vfs_inet_connection_get_fd">
        <return-type type="int"/>
        <parameters>
          <parameter name="connection" type="GnomeVFSInetConnection*"/>
        </parameters>
      </method>
      <method name="get_ip" symbol="gnome_vfs_inet_connection_get_ip">
        <return-type type="char*"/>
        <parameters>
          <parameter name="connection" type="GnomeVFSInetConnection*"/>
        </parameters>
      </method>
      <method name="to_socket" symbol="gnome_vfs_inet_connection_to_socket">
        <return-type type="GnomeVFSSocket*"/>
        <parameters>
          <parameter name="connection" type="GnomeVFSInetConnection*"/>
        </parameters>
      </method>
      <method name="to_socket_buffer" symbol="gnome_vfs_inet_connection_to_socket_buffer">
        <return-type type="GnomeVFSSocketBuffer*"/>
        <parameters>
          <parameter name="connection" type="GnomeVFSInetConnection*"/>
        </parameters>
      </method>
    </struct>
    <struct get-type="" name="GnomeVFSJob" opaque="true" type-name="GnomeVFSJob">
      <method name="get_count" symbol="gnome_vfs_job_get_count">
        <return-type type="int"/>
      </method>
    </struct>
    <struct get-type="" name="GnomeVFSLoadDirectoryOp" type-name="GnomeVFSLoadDirectoryOp">
      <field name="uri" readable="1" type="GnomeVFSURI*" writable="1"/>
      <field name="options" readable="1" type="GnomeVFSFileInfoOptions" writable="1"/>
      <field name="items_per_notification" readable="1" type="guint" writable="1"/>
    </struct>
    <struct get-type="" name="GnomeVFSLoadDirectoryOpResult" type-name="GnomeVFSLoadDirectoryOpResult">
      <field name="callback" readable="1" type="GnomeVFSAsyncDirectoryLoadCallback" writable="1"/>
      <field name="callback_data" readable="1" type="void*" writable="1"/>
      <field name="result" readable="1" type="GnomeVFSResult" writable="1"/>
      <field name="list" readable="1" type="GList*" writable="1"/>
      <field name="entries_read" readable="1" type="guint" writable="1"/>
    </struct>
    <struct deprecated="1" get-type="" name="GnomeVFSMimeAction" type-name="GnomeVFSMimeAction">
      <field name="action_type" readable="1" type="GnomeVFSMimeActionType" writable="1"/>
      <field name="component" readable="1" type="void*" writable="1"/>
      <field name="reserved1" type="void*"/>
      <method deprecated="1" name="free" symbol="gnome_vfs_mime_action_free">
        <return-type type="void"/>
        <parameters>
          <parameter name="action" type="GnomeVFSMimeAction*"/>
        </parameters>
      </method>
      <method deprecated="1" name="launch" symbol="gnome_vfs_mime_action_launch">
        <return-type type="GnomeVFSResult"/>
        <parameters>
          <parameter name="action" type="GnomeVFSMimeAction*"/>
          <parameter name="uris" type="GList*"/>
        </parameters>
      </method>
      <method deprecated="1" name="launch_with_env" symbol="gnome_vfs_mime_action_launch_with_env">
        <return-type type="GnomeVFSResult"/>
        <parameters>
          <parameter name="action" type="GnomeVFSMimeAction*"/>
          <parameter name="uris" type="GList*"/>
          <parameter name="envp" type="char**"/>
        </parameters>
      </method>
    </struct>
    <struct get-type="" name="GnomeVFSMimeApplication" opaque="true" type-name="GnomeVFSMimeApplication">
      <field access="public" name="id" readable="1" type="char*" writable="1" writeable="true"/>
      <field access="public" name="name" readable="1" type="char*" writable="1" writeable="true"/>
      <field access="public" name="command" readable="1" type="char*" writable="1" writeable="true"/>
      <field access="public" name="can_open_multiple_files" readable="1" type="gboolean" writable="1" writeable="true"/>
      <field access="public" name="expects_uris" readable="1" type="GnomeVFSMimeApplicationArgumentType" writable="1" writeable="true"/>
      <field access="public" name="supported_uri_schemes" readable="1" type="GList*" writable="1" writeable="true"/>
      <field access="public" name="_command" readable="1" type="char*" writable="1" writeable="true"/>
      <field access="public" name="_can_open_multiple_files" readable="1" type="gboolean" writable="1" writeable="true"/>
      <field access="public" name="_expects_uris" readable="1" type="GnomeVFSMimeApplicationArgumentType" writable="1" writeable="true"/>
      <field access="public" name="_supported_uri_schemes" readable="1" type="GList*" writable="1" writeable="true"/>
      <field access="public" name="requires_terminal" readable="1" type="gboolean" writable="1" writeable="true"/>
      <field access="public" name="reserved1" readable="1" type="void*" writable="1" writeable="true"/>
      <field access="public" name="priv" readable="1" type="GnomeVFSMimeApplicationPrivate*" writable="1" writeable="true"/>
      <method name="copy" symbol="gnome_vfs_mime_application_copy">
        <return-type type="GnomeVFSMimeApplication*"/>
        <parameters>
          <parameter name="application" type="GnomeVFSMimeApplication*"/>
        </parameters>
      </method>
      <method name="equal" symbol="gnome_vfs_mime_application_equal">
        <return-type type="gboolean"/>
        <parameters>
          <parameter name="app_a" type="GnomeVFSMimeApplication*"/>
          <parameter name="app_b" type="GnomeVFSMimeApplication*"/>
        </parameters>
      </method>
      <method name="free" symbol="gnome_vfs_mime_application_free">
        <return-type type="void"/>
        <parameters>
          <parameter name="application" type="GnomeVFSMimeApplication*"/>
        </parameters>
      </method>
      <method name="get_binary_name" symbol="gnome_vfs_mime_application_get_binary_name">
        <return-type type="const-char*"/>
        <parameters>
          <parameter name="app" type="GnomeVFSMimeApplication*"/>
        </parameters>
      </method>
      <method name="get_desktop_file_path" symbol="gnome_vfs_mime_application_get_desktop_file_path">
        <return-type type="const-char*"/>
        <parameters>
          <parameter name="app" type="GnomeVFSMimeApplication*"/>
        </parameters>
      </method>
      <method name="get_desktop_id" symbol="gnome_vfs_mime_application_get_desktop_id">
        <return-type type="const-char*"/>
        <parameters>
          <parameter name="app" type="GnomeVFSMimeApplication*"/>
        </parameters>
      </method>
      <method name="get_exec" symbol="gnome_vfs_mime_application_get_exec">
        <return-type type="const-char*"/>
        <parameters>
          <parameter name="app" type="GnomeVFSMimeApplication*"/>
        </parameters>
      </method>
      <method name="get_generic_name" symbol="gnome_vfs_mime_application_get_generic_name">
        <return-type type="const-char*"/>
        <parameters>
          <parameter name="app" type="GnomeVFSMimeApplication*"/>
        </parameters>
      </method>
      <method name="get_icon" symbol="gnome_vfs_mime_application_get_icon">
        <return-type type="const-char*"/>
        <parameters>
          <parameter name="app" type="GnomeVFSMimeApplication*"/>
        </parameters>
      </method>
      <method name="get_name" symbol="gnome_vfs_mime_application_get_name">
        <return-type type="const-char*"/>
        <parameters>
          <parameter name="app" type="GnomeVFSMimeApplication*"/>
        </parameters>
      </method>
      <method name="get_startup_wm_class" symbol="gnome_vfs_mime_application_get_startup_wm_class">
        <return-type type="const-char*"/>
        <parameters>
          <parameter name="app" type="GnomeVFSMimeApplication*"/>
        </parameters>
      </method>
      <method name="launch" symbol="gnome_vfs_mime_application_launch">
        <return-type type="GnomeVFSResult"/>
        <parameters>
          <parameter name="app" type="GnomeVFSMimeApplication*"/>
          <parameter name="uris" type="GList*"/>
        </parameters>
      </method>
      <method name="launch_with_env" symbol="gnome_vfs_mime_application_launch_with_env">
        <return-type type="GnomeVFSResult"/>
        <parameters>
          <parameter name="app" type="GnomeVFSMimeApplication*"/>
          <parameter name="uris" type="GList*"/>
          <parameter name="envp" type="char**"/>
        </parameters>
      </method>
      <method name="list_free" symbol="gnome_vfs_mime_application_list_free">
        <return-type type="void"/>
        <parameters>
          <parameter name="list" type="GList*"/>
        </parameters>
      </method>
      <method name="new_from_desktop_id" symbol="gnome_vfs_mime_application_new_from_desktop_id">
        <return-type type="GnomeVFSMimeApplication*"/>
        <parameters>
          <parameter name="id" type="const-char*"/>
        </parameters>
      </method>
      <method deprecated="1" name="new_from_id" symbol="gnome_vfs_mime_application_new_from_id">
        <return-type type="GnomeVFSMimeApplication*"/>
        <parameters>
          <parameter name="id" type="const-char*"/>
        </parameters>
      </method>
      <method name="requires_terminal" symbol="gnome_vfs_mime_application_requires_terminal">
        <return-type type="gboolean"/>
        <parameters>
          <parameter name="app" type="GnomeVFSMimeApplication*"/>
        </parameters>
      </method>
      <method name="supports_startup_notification" symbol="gnome_vfs_mime_application_supports_startup_notification">
        <return-type type="gboolean"/>
        <parameters>
          <parameter name="app" type="GnomeVFSMimeApplication*"/>
        </parameters>
      </method>
      <method name="supports_uris" symbol="gnome_vfs_mime_application_supports_uris">
        <return-type type="gboolean"/>
        <parameters>
          <parameter name="app" type="GnomeVFSMimeApplication*"/>
        </parameters>
      </method>
    </struct>
    <struct get-type="" name="GnomeVFSMimeSniffBuffer" opaque="true" type-name="GnomeVFSMimeSniffBuffer">
      <method name="free" symbol="gnome_vfs_mime_sniff_buffer_free">
        <return-type type="void"/>
        <parameters>
          <parameter name="buffer" type="GnomeVFSMimeSniffBuffer*"/>
        </parameters>
      </method>
      <method name="new_from_existing_data" symbol="gnome_vfs_mime_sniff_buffer_new_from_existing_data">
        <return-type type="GnomeVFSMimeSniffBuffer*"/>
        <parameters>
          <parameter name="buffer" type="const-guchar*"/>
          <parameter name="buffer_size" type="gssize"/>
        </parameters>
      </method>
    </struct>
    <struct get-type="" name="GnomeVFSModuleCallbackAdditionalHeadersIn" type-name="GnomeVFSModuleCallbackAdditionalHeadersIn">
      <field name="uri" readable="1" type="GnomeVFSURI*" writable="1"/>
      <field name="reserved1" readable="1" type="void*" writable="1"/>
      <field name="reserved2" readable="1" type="void*" writable="1"/>
    </struct>
    <struct get-type="" name="GnomeVFSModuleCallbackAdditionalHeadersOut" type-name="GnomeVFSModuleCallbackAdditionalHeadersOut">
      <field name="headers" readable="1" type="GList*" writable="1"/>
      <field name="reserved1" readable="1" type="void*" writable="1"/>
      <field name="reserved2" readable="1" type="void*" writable="1"/>
    </struct>
    <struct get-type="" name="GnomeVFSModuleCallbackAuthenticationIn" type-name="GnomeVFSModuleCallbackAuthenticationIn">
      <field name="uri" readable="1" type="char*" writable="1"/>
      <field name="realm" readable="1" type="char*" writable="1"/>
      <field name="previous_attempt_failed" readable="1" type="gboolean" writable="1"/>
      <field name="auth_type" readable="1" type="GnomeVFSModuleCallbackAuthenticationAuthType" writable="1"/>
      <field name="reserved1" readable="1" type="void*" writable="1"/>
      <field name="reserved2" readable="1" type="void*" writable="1"/>
    </struct>
    <struct get-type="" name="GnomeVFSModuleCallbackAuthenticationOut" type-name="GnomeVFSModuleCallbackAuthenticationOut">
      <field name="username" readable="1" type="char*" writable="1"/>
      <field name="password" readable="1" type="char*" writable="1"/>
      <field name="reserved1" readable="1" type="void*" writable="1"/>
      <field name="reserved2" readable="1" type="void*" writable="1"/>
    </struct>
    <struct get-type="" name="GnomeVFSModuleCallbackFillAuthenticationIn" type-name="GnomeVFSModuleCallbackFillAuthenticationIn">
      <field name="uri" readable="1" type="char*" writable="1"/>
      <field name="protocol" readable="1" type="char*" writable="1"/>
      <field name="server" readable="1" type="char*" writable="1"/>
      <field name="object" readable="1" type="char*" writable="1"/>
      <field name="port" readable="1" type="int" writable="1"/>
      <field name="authtype" readable="1" type="char*" writable="1"/>
      <field name="username" readable="1" type="char*" writable="1"/>
      <field name="domain" readable="1" type="char*" writable="1"/>
      <field name="reserved1" readable="1" type="void*" writable="1"/>
      <field name="reserved2" readable="1" type="void*" writable="1"/>
    </struct>
    <struct get-type="" name="GnomeVFSModuleCallbackFillAuthenticationOut" type-name="GnomeVFSModuleCallbackFillAuthenticationOut">
      <field name="valid" readable="1" type="gboolean" writable="1"/>
      <field name="username" readable="1" type="char*" writable="1"/>
      <field name="domain" readable="1" type="char*" writable="1"/>
      <field name="password" readable="1" type="char*" writable="1"/>
      <field name="reserved1" readable="1" type="void*" writable="1"/>
      <field name="reserved2" readable="1" type="void*" writable="1"/>
    </struct>
    <struct get-type="" name="GnomeVFSModuleCallbackFullAuthenticationIn" type-name="GnomeVFSModuleCallbackFullAuthenticationIn">
      <field name="flags" readable="1" type="GnomeVFSModuleCallbackFullAuthenticationFlags" writable="1"/>
      <field name="uri" readable="1" type="char*" writable="1"/>
      <field name="protocol" readable="1" type="char*" writable="1"/>
      <field name="server" readable="1" type="char*" writable="1"/>
      <field name="object" readable="1" type="char*" writable="1"/>
      <field name="port" readable="1" type="int" writable="1"/>
      <field name="authtype" readable="1" type="char*" writable="1"/>
      <field name="username" readable="1" type="char*" writable="1"/>
      <field name="domain" readable="1" type="char*" writable="1"/>
      <field name="default_user" readable="1" type="char*" writable="1"/>
      <field name="default_domain" readable="1" type="char*" writable="1"/>
      <field name="reserved1" readable="1" type="void*" writable="1"/>
      <field name="reserved2" readable="1" type="void*" writable="1"/>
    </struct>
    <struct get-type="" name="GnomeVFSModuleCallbackFullAuthenticationOut" type-name="GnomeVFSModuleCallbackFullAuthenticationOut">
      <field name="abort_auth" readable="1" type="gboolean" writable="1"/>
      <field name="username" readable="1" type="char*" writable="1"/>
      <field name="domain" readable="1" type="char*" writable="1"/>
      <field name="password" readable="1" type="char*" writable="1"/>
      <field name="save_password" readable="1" type="gboolean" writable="1"/>
      <field name="keyring" readable="1" type="char*" writable="1"/>
      <field name="out_flags" readable="1" type="gsize" writable="1"/>
      <field name="reserved2" readable="1" type="void*" writable="1"/>
    </struct>
    <struct get-type="" name="GnomeVFSModuleCallbackOpResult" type-name="GnomeVFSModuleCallbackOpResult">
      <field name="callback" readable="1" type="GnomeVFSAsyncModuleCallback" writable="1"/>
      <field name="user_data" readable="1" type="gpointer" writable="1"/>
      <field name="in" readable="1" type="gconstpointer" writable="1"/>
      <field name="in_size" readable="1" type="size_t" writable="1"/>
      <field name="out" readable="1" type="gpointer" writable="1"/>
      <field name="out_size" readable="1" type="size_t" writable="1"/>
      <field name="response" readable="1" type="GnomeVFSModuleCallbackResponse" writable="1"/>
      <field name="response_data" readable="1" type="gpointer" writable="1"/>
    </struct>
    <struct get-type="" name="GnomeVFSModuleCallbackQuestionIn" type-name="GnomeVFSModuleCallbackQuestionIn">
      <field name="primary_message" readable="1" type="char*" writable="1"/>
      <field name="secondary_message" readable="1" type="char*" writable="1"/>
      <field name="choices" readable="1" type="char**" writable="1"/>
      <field name="reserved1" readable="1" type="void*" writable="1"/>
      <field name="reserved2" readable="1" type="void*" writable="1"/>
    </struct>
    <struct get-type="" name="GnomeVFSModuleCallbackQuestionOut" type-name="GnomeVFSModuleCallbackQuestionOut">
      <field name="answer" readable="1" type="int" writable="1"/>
      <field name="reserved1" readable="1" type="void*" writable="1"/>
      <field name="reserved2" readable="1" type="void*" writable="1"/>
    </struct>
    <struct get-type="" name="GnomeVFSModuleCallbackReceivedHeadersIn" type-name="GnomeVFSModuleCallbackReceivedHeadersIn">
      <field name="uri" readable="1" type="GnomeVFSURI*" writable="1"/>
      <field name="headers" readable="1" type="GList*" writable="1"/>
      <field name="reserved1" readable="1" type="void*" writable="1"/>
      <field name="reserved2" readable="1" type="void*" writable="1"/>
    </struct>
    <struct get-type="" name="GnomeVFSModuleCallbackReceivedHeadersOut" type-name="GnomeVFSModuleCallbackReceivedHeadersOut">
      <field name="dummy" readable="1" type="int" writable="1"/>
      <field name="reserved1" readable="1" type="void*" writable="1"/>
      <field name="reserved2" readable="1" type="void*" writable="1"/>
    </struct>
    <struct get-type="" name="GnomeVFSModuleCallbackSaveAuthenticationIn" type-name="GnomeVFSModuleCallbackSaveAuthenticationIn">
      <field name="keyring" readable="1" type="char*" writable="1"/>
      <field name="uri" readable="1" type="char*" writable="1"/>
      <field name="protocol" readable="1" type="char*" writable="1"/>
      <field name="server" readable="1" type="char*" writable="1"/>
      <field name="object" readable="1" type="char*" writable="1"/>
      <field name="port" readable="1" type="int" writable="1"/>
      <field name="authtype" readable="1" type="char*" writable="1"/>
      <field name="username" readable="1" type="char*" writable="1"/>
      <field name="domain" readable="1" type="char*" writable="1"/>
      <field name="password" readable="1" type="char*" writable="1"/>
      <field name="reserved1" readable="1" type="void*" writable="1"/>
      <field name="reserved2" readable="1" type="void*" writable="1"/>
    </struct>
    <struct get-type="" name="GnomeVFSModuleCallbackSaveAuthenticationOut" type-name="GnomeVFSModuleCallbackSaveAuthenticationOut">
      <field name="reserved1" readable="1" type="void*" writable="1"/>
      <field name="reserved2" readable="1" type="void*" writable="1"/>
    </struct>
    <struct get-type="" name="GnomeVFSModuleCallbackStackInfo" opaque="true" type-name="GnomeVFSModuleCallbackStackInfo"/>
    <struct get-type="" name="GnomeVFSModuleCallbackStatusMessageIn" type-name="GnomeVFSModuleCallbackStatusMessageIn">
      <field name="uri" readable="1" type="char*" writable="1"/>
      <field name="message" readable="1" type="char*" writable="1"/>
      <field name="percentage" readable="1" type="int" writable="1"/>
      <field name="reserved1" readable="1" type="void*" writable="1"/>
      <field name="reserved2" readable="1" type="void*" writable="1"/>
    </struct>
    <struct get-type="" name="GnomeVFSModuleCallbackStatusMessageOut" type-name="GnomeVFSModuleCallbackStatusMessageOut">
      <field name="dummy" readable="1" type="int" writable="1"/>
      <field name="reserved1" readable="1" type="void*" writable="1"/>
      <field name="reserved2" readable="1" type="void*" writable="1"/>
    </struct>
    <struct get-type="" name="GnomeVFSMonitorHandle" opaque="true" type-name="GnomeVFSMonitorHandle"/>
    <struct get-type="" name="GnomeVFSOpenAsChannelOp" type-name="GnomeVFSOpenAsChannelOp">
      <field name="uri" readable="1" type="GnomeVFSURI*" writable="1"/>
      <field name="open_mode" readable="1" type="GnomeVFSOpenMode" writable="1"/>
      <field name="advised_block_size" readable="1" type="guint" writable="1"/>
    </struct>
    <struct get-type="" name="GnomeVFSOpenAsChannelOpResult" type-name="GnomeVFSOpenAsChannelOpResult">
      <field name="callback" readable="1" type="GnomeVFSAsyncOpenAsChannelCallback" writable="1"/>
      <field name="callback_data" readable="1" type="void*" writable="1"/>
      <field name="result" readable="1" type="GnomeVFSResult" writable="1"/>
      <field name="channel" readable="1" type="GIOChannel*" writable="1"/>
    </struct>
    <struct get-type="" name="GnomeVFSOpenOp" type-name="GnomeVFSOpenOp">
      <field name="uri" readable="1" type="GnomeVFSURI*" writable="1"/>
      <field name="open_mode" readable="1" type="GnomeVFSOpenMode" writable="1"/>
    </struct>
    <struct get-type="" name="GnomeVFSOpenOpResult" type-name="GnomeVFSOpenOpResult">
      <field name="callback" readable="1" type="GnomeVFSAsyncOpenCallback" writable="1"/>
      <field name="callback_data" readable="1" type="void*" writable="1"/>
      <field name="result" readable="1" type="GnomeVFSResult" writable="1"/>
    </struct>
    <struct get-type="" name="GnomeVFSProgressCallbackState" opaque="true" type-name="GnomeVFSProgressCallbackState"/>
    <struct get-type="" name="GnomeVFSReadOp" type-name="GnomeVFSReadOp">
      <field name="num_bytes" readable="1" type="GnomeVFSFileSize" writable="1"/>
      <field name="buffer" readable="1" type="gpointer" writable="1"/>
    </struct>
    <struct get-type="" name="GnomeVFSReadOpResult" type-name="GnomeVFSReadOpResult">
      <field name="callback" readable="1" type="GnomeVFSAsyncReadCallback" writable="1"/>
      <field name="callback_data" readable="1" type="void*" writable="1"/>
      <field name="num_bytes" readable="1" type="GnomeVFSFileSize" writable="1"/>
      <field name="buffer" readable="1" type="gpointer" writable="1"/>
      <field name="result" readable="1" type="GnomeVFSResult" writable="1"/>
      <field name="bytes_read" readable="1" type="GnomeVFSFileSize" writable="1"/>
    </struct>
    <struct get-type="" name="GnomeVFSResolveHandle" opaque="true" type-name="GnomeVFSResolveHandle"/>
    <struct get-type="" name="GnomeVFSSSL" opaque="true" type-name="GnomeVFSSSL">
      <method name="create" symbol="gnome_vfs_ssl_create">
        <return-type type="GnomeVFSResult"/>
        <parameters>
          <parameter name="handle_return" type="GnomeVFSSSL**"/>
          <parameter name="host" type="const-char*"/>
          <parameter name="port" type="unsigned-int"/>
          <parameter name="cancellation" type="GnomeVFSCancellation*"/>
        </parameters>
      </method>
      <method name="create_from_fd" symbol="gnome_vfs_ssl_create_from_fd">
        <return-type type="GnomeVFSResult"/>
        <parameters>
          <parameter name="handle_return" type="GnomeVFSSSL**"/>
          <parameter name="fd" type="gint"/>
          <parameter name="cancellation" type="GnomeVFSCancellation*"/>
        </parameters>
      </method>
      <method name="destroy" symbol="gnome_vfs_ssl_destroy">
        <return-type type="void"/>
        <parameters>
          <parameter name="ssl" type="GnomeVFSSSL*"/>
          <parameter name="cancellation" type="GnomeVFSCancellation*"/>
        </parameters>
      </method>
      <method name="enabled" symbol="gnome_vfs_ssl_enabled">
        <return-type type="gboolean"/>
      </method>
      <method name="read" symbol="gnome_vfs_ssl_read">
        <return-type type="GnomeVFSResult"/>
        <parameters>
          <parameter name="ssl" type="GnomeVFSSSL*"/>
          <parameter name="buffer" type="gpointer"/>
          <parameter name="bytes" type="GnomeVFSFileSize"/>
          <parameter name="bytes_read" type="GnomeVFSFileSize*"/>
          <parameter name="cancellation" type="GnomeVFSCancellation*"/>
        </parameters>
      </method>
      <method name="set_timeout" symbol="gnome_vfs_ssl_set_timeout">
        <return-type type="GnomeVFSResult"/>
        <parameters>
          <parameter name="ssl" type="GnomeVFSSSL*"/>
          <parameter name="timeout" type="GTimeVal*"/>
          <parameter name="cancellation" type="GnomeVFSCancellation*"/>
        </parameters>
      </method>
      <method name="to_socket" symbol="gnome_vfs_ssl_to_socket">
        <return-type type="GnomeVFSSocket*"/>
        <parameters>
          <parameter name="ssl" type="GnomeVFSSSL*"/>
        </parameters>
      </method>
      <method name="write" symbol="gnome_vfs_ssl_write">
        <return-type type="GnomeVFSResult"/>
        <parameters>
          <parameter name="ssl" type="GnomeVFSSSL*"/>
          <parameter name="buffer" type="gconstpointer"/>
          <parameter name="bytes" type="GnomeVFSFileSize"/>
          <parameter name="bytes_written" type="GnomeVFSFileSize*"/>
          <parameter name="cancellation" type="GnomeVFSCancellation*"/>
        </parameters>
      </method>
    </struct>
    <struct get-type="" name="GnomeVFSSeekOp" type-name="GnomeVFSSeekOp">
      <field name="whence" readable="1" type="GnomeVFSSeekPosition" writable="1"/>
      <field name="offset" readable="1" type="GnomeVFSFileOffset" writable="1"/>
    </struct>
    <struct get-type="" name="GnomeVFSSeekOpResult" type-name="GnomeVFSSeekOpResult">
      <field name="callback" readable="1" type="GnomeVFSAsyncSeekCallback" writable="1"/>
      <field name="callback_data" readable="1" type="void*" writable="1"/>
      <field name="result" readable="1" type="GnomeVFSResult" writable="1"/>
    </struct>
    <struct get-type="" name="GnomeVFSSetFileInfoOp" type-name="GnomeVFSSetFileInfoOp">
      <field name="uri" readable="1" type="GnomeVFSURI*" writable="1"/>
      <field name="info" readable="1" type="GnomeVFSFileInfo*" writable="1"/>
      <field name="mask" readable="1" type="GnomeVFSSetFileInfoMask" writable="1"/>
      <field name="options" readable="1" type="GnomeVFSFileInfoOptions" writable="1"/>
    </struct>
    <struct get-type="" name="GnomeVFSSetFileInfoOpResult" type-name="GnomeVFSSetFileInfoOpResult">
      <field name="callback" readable="1" type="GnomeVFSAsyncSetFileInfoCallback" writable="1"/>
      <field name="callback_data" readable="1" type="void*" writable="1"/>
      <field name="set_file_info_result" readable="1" type="GnomeVFSResult" writable="1"/>
      <field name="get_file_info_result" readable="1" type="GnomeVFSResult" writable="1"/>
      <field name="info" readable="1" type="GnomeVFSFileInfo*" writable="1"/>
    </struct>
    <struct get-type="" name="GnomeVFSSocket" opaque="true" type-name="GnomeVFSSocket">
      <method name="close" symbol="gnome_vfs_socket_close">
        <return-type type="GnomeVFSResult"/>
        <parameters>
          <parameter name="socket" type="GnomeVFSSocket*"/>
          <parameter name="cancellation" type="GnomeVFSCancellation*"/>
        </parameters>
      </method>
      <method name="free" symbol="gnome_vfs_socket_free">
        <return-type type="void"/>
        <parameters>
          <parameter name="socket" type="GnomeVFSSocket*"/>
        </parameters>
      </method>
      <method name="new" symbol="gnome_vfs_socket_new">
        <return-type type="GnomeVFSSocket*"/>
        <parameters>
          <parameter name="impl" type="GnomeVFSSocketImpl*"/>
          <parameter name="connection" type="void*"/>
        </parameters>
      </method>
      <method name="read" symbol="gnome_vfs_socket_read">
        <return-type type="GnomeVFSResult"/>
        <parameters>
          <parameter name="socket" type="GnomeVFSSocket*"/>
          <parameter name="buffer" type="gpointer"/>
          <parameter name="bytes" type="GnomeVFSFileSize"/>
          <parameter name="bytes_read" type="GnomeVFSFileSize*"/>
          <parameter name="cancellation" type="GnomeVFSCancellation*"/>
        </parameters>
      </method>
      <method name="write" symbol="gnome_vfs_socket_write">
        <return-type type="GnomeVFSResult"/>
        <parameters>
          <parameter name="socket" type="GnomeVFSSocket*"/>
          <parameter name="buffer" type="gconstpointer"/>
          <parameter name="bytes" type="int"/>
          <parameter name="bytes_written" type="GnomeVFSFileSize*"/>
          <parameter name="cancellation" type="GnomeVFSCancellation*"/>
        </parameters>
      </method>
    </struct>
    <struct get-type="" name="GnomeVFSSocketBuffer" opaque="true" type-name="GnomeVFSSocketBuffer">
      <method name="destroy" symbol="gnome_vfs_socket_buffer_destroy">
        <return-type type="GnomeVFSResult"/>
        <parameters>
          <parameter name="socket_buffer" type="GnomeVFSSocketBuffer*"/>
          <parameter name="close_socket" type="gboolean"/>
          <parameter name="cancellation" type="GnomeVFSCancellation*"/>
        </parameters>
      </method>
      <method name="flush" symbol="gnome_vfs_socket_buffer_flush">
        <return-type type="GnomeVFSResult"/>
        <parameters>
          <parameter name="socket_buffer" type="GnomeVFSSocketBuffer*"/>
          <parameter name="cancellation" type="GnomeVFSCancellation*"/>
        </parameters>
      </method>
      <method name="new" symbol="gnome_vfs_socket_buffer_new">
        <return-type type="GnomeVFSSocketBuffer*"/>
        <parameters>
          <parameter name="socket" type="GnomeVFSSocket*"/>
        </parameters>
      </method>
      <method name="peekc" symbol="gnome_vfs_socket_buffer_peekc">
        <return-type type="GnomeVFSResult"/>
        <parameters>
          <parameter name="socket_buffer" type="GnomeVFSSocketBuffer*"/>
          <parameter name="character" type="char*"/>
          <parameter name="cancellation" type="GnomeVFSCancellation*"/>
        </parameters>
      </method>
      <method name="read" symbol="gnome_vfs_socket_buffer_read">
        <return-type type="GnomeVFSResult"/>
        <parameters>
          <parameter name="socket_buffer" type="GnomeVFSSocketBuffer*"/>
          <parameter name="buffer" type="gpointer"/>
          <parameter name="bytes" type="GnomeVFSFileSize"/>
          <parameter name="bytes_read" type="GnomeVFSFileSize*"/>
          <parameter name="cancellation" type="GnomeVFSCancellation*"/>
        </parameters>
      </method>
      <method name="read_until" symbol="gnome_vfs_socket_buffer_read_until">
        <return-type type="GnomeVFSResult"/>
        <parameters>
          <parameter name="socket_buffer" type="GnomeVFSSocketBuffer*"/>
          <parameter name="buffer" type="gpointer"/>
          <parameter name="bytes" type="GnomeVFSFileSize"/>
          <parameter name="boundary" type="gconstpointer"/>
          <parameter name="boundary_len" type="GnomeVFSFileSize"/>
          <parameter name="bytes_read" type="GnomeVFSFileSize*"/>
          <parameter name="got_boundary" type="gboolean*"/>
          <parameter name="cancellation" type="GnomeVFSCancellation*"/>
        </parameters>
      </method>
      <method name="write" symbol="gnome_vfs_socket_buffer_write">
        <return-type type="GnomeVFSResult"/>
        <parameters>
          <parameter name="socket_buffer" type="GnomeVFSSocketBuffer*"/>
          <parameter name="buffer" type="gconstpointer"/>
          <parameter name="bytes" type="GnomeVFSFileSize"/>
          <parameter name="bytes_written" type="GnomeVFSFileSize*"/>
          <parameter name="cancellation" type="GnomeVFSCancellation*"/>
        </parameters>
      </method>
    </struct>
    <struct get-type="" name="GnomeVFSSocketImpl" type-name="GnomeVFSSocketImpl">
      <field name="read" readable="1" type="GnomeVFSSocketReadFunc" writable="1"/>
      <field name="write" readable="1" type="GnomeVFSSocketWriteFunc" writable="1"/>
      <field name="close" readable="1" type="GnomeVFSSocketCloseFunc" writable="1"/>
      <field name="set_timeout" readable="1" type="GnomeVFSSocketSetTimeoutFunc" writable="1"/>
    </struct>
    <struct get-type="" name="GnomeVFSToplevelURI" type-name="GnomeVFSToplevelURI">
      <field name="uri" readable="1" type="GnomeVFSURI" writable="1"/>
      <field name="host_name" readable="1" type="gchar*" writable="1"/>
      <field name="host_port" readable="1" type="guint" writable="1"/>
      <field name="user_name" readable="1" type="gchar*" writable="1"/>
      <field name="password" readable="1" type="gchar*" writable="1"/>
      <field name="urn" readable="1" type="gchar*" writable="1"/>
      <field name="reserved1" readable="1" type="void*" writable="1"/>
      <field name="reserved2" readable="1" type="void*" writable="1"/>
    </struct>
    <struct get-type="" name="GnomeVFSTransform" type-name="GnomeVFSTransform">
      <field name="transform" readable="1" type="GnomeVFSTransformFunc" writable="1"/>
    </struct>
    <struct get-type="" name="GnomeVFSURI" opaque="true" type-name="GnomeVFSURI">
      <method name="append_file_name" symbol="gnome_vfs_uri_append_file_name">
        <return-type type="GnomeVFSURI*"/>
        <parameters>
          <parameter name="uri" type="const-GnomeVFSURI*"/>
          <parameter name="filename" type="const-gchar*"/>
        </parameters>
      </method>
      <method name="append_path" symbol="gnome_vfs_uri_append_path">
        <return-type type="GnomeVFSURI*"/>
        <parameters>
          <parameter name="uri" type="const-GnomeVFSURI*"/>
          <parameter name="path" type="const-char*"/>
        </parameters>
      </method>
      <method name="append_string" symbol="gnome_vfs_uri_append_string">
        <return-type type="GnomeVFSURI*"/>
        <parameters>
          <parameter name="uri" type="const-GnomeVFSURI*"/>
          <parameter name="uri_fragment" type="const-char*"/>
        </parameters>
      </method>
      <method name="dup" symbol="gnome_vfs_uri_dup">
        <return-type type="GnomeVFSURI*"/>
        <parameters>
          <parameter name="uri" type="const-GnomeVFSURI*"/>
        </parameters>
      </method>
      <method name="equal" symbol="gnome_vfs_uri_equal">
        <return-type type="gboolean"/>
        <parameters>
          <parameter name="a" type="const-GnomeVFSURI*"/>
          <parameter name="b" type="const-GnomeVFSURI*"/>
        </parameters>
      </method>
      <method name="exists" symbol="gnome_vfs_uri_exists">
        <return-type type="gboolean"/>
        <parameters>
          <parameter name="uri" type="GnomeVFSURI*"/>
        </parameters>
      </method>
      <method name="extract_dirname" symbol="gnome_vfs_uri_extract_dirname">
        <return-type type="gchar*"/>
        <parameters>
          <parameter name="uri" type="const-GnomeVFSURI*"/>
        </parameters>
      </method>
      <method name="extract_short_name" symbol="gnome_vfs_uri_extract_short_name">
        <return-type type="gchar*"/>
        <parameters>
          <parameter name="uri" type="const-GnomeVFSURI*"/>
        </parameters>
      </method>
      <method name="extract_short_path_name" symbol="gnome_vfs_uri_extract_short_path_name">
        <return-type type="gchar*"/>
        <parameters>
          <parameter name="uri" type="const-GnomeVFSURI*"/>
        </parameters>
      </method>
      <method name="get_fragment_identifier" symbol="gnome_vfs_uri_get_fragment_identifier">
        <return-type type="const-gchar*"/>
        <parameters>
          <parameter name="uri" type="const-GnomeVFSURI*"/>
        </parameters>
      </method>
      <method name="get_host_name" symbol="gnome_vfs_uri_get_host_name">
        <return-type type="const-gchar*"/>
        <parameters>
          <parameter name="uri" type="const-GnomeVFSURI*"/>
        </parameters>
      </method>
      <method name="get_host_port" symbol="gnome_vfs_uri_get_host_port">
        <return-type type="guint"/>
        <parameters>
          <parameter name="uri" type="const-GnomeVFSURI*"/>
        </parameters>
      </method>
      <method name="get_parent" symbol="gnome_vfs_uri_get_parent">
        <return-type type="GnomeVFSURI*"/>
        <parameters>
          <parameter name="uri" type="const-GnomeVFSURI*"/>
        </parameters>
      </method>
      <method name="get_password" symbol="gnome_vfs_uri_get_password">
        <return-type type="const-gchar*"/>
        <parameters>
          <parameter name="uri" type="const-GnomeVFSURI*"/>
        </parameters>
      </method>
      <method name="get_path" symbol="gnome_vfs_uri_get_path">
        <return-type type="const-gchar*"/>
        <parameters>
          <parameter name="uri" type="const-GnomeVFSURI*"/>
        </parameters>
      </method>
      <method name="get_scheme" symbol="gnome_vfs_uri_get_scheme">
        <return-type type="const-gchar*"/>
        <parameters>
          <parameter name="uri" type="const-GnomeVFSURI*"/>
        </parameters>
      </method>
      <method name="get_toplevel" symbol="gnome_vfs_uri_get_toplevel">
        <return-type type="GnomeVFSToplevelURI*"/>
        <parameters>
          <parameter name="uri" type="const-GnomeVFSURI*"/>
        </parameters>
      </method>
      <method name="get_user_name" symbol="gnome_vfs_uri_get_user_name">
        <return-type type="const-gchar*"/>
        <parameters>
          <parameter name="uri" type="const-GnomeVFSURI*"/>
        </parameters>
      </method>
      <method name="has_parent" symbol="gnome_vfs_uri_has_parent">
        <return-type type="gboolean"/>
        <parameters>
          <parameter name="uri" type="const-GnomeVFSURI*"/>
        </parameters>
      </method>
      <method name="hash" symbol="gnome_vfs_uri_hash">
        <return-type type="guint"/>
        <parameters>
          <parameter name="p" type="gconstpointer"/>
        </parameters>
      </method>
      <method name="hequal" symbol="gnome_vfs_uri_hequal">
        <return-type type="gint"/>
        <parameters>
          <parameter name="a" type="gconstpointer"/>
          <parameter name="b" type="gconstpointer"/>
        </parameters>
      </method>
      <method name="is_local" symbol="gnome_vfs_uri_is_local">
        <return-type type="gboolean"/>
        <parameters>
          <parameter name="uri" type="const-GnomeVFSURI*"/>
        </parameters>
      </method>
      <method name="is_parent" symbol="gnome_vfs_uri_is_parent">
        <return-type type="gboolean"/>
        <parameters>
          <parameter name="possible_parent" type="const-GnomeVFSURI*"/>
          <parameter name="possible_child" type="const-GnomeVFSURI*"/>
          <parameter name="recursive" type="gboolean"/>
        </parameters>
      </method>
      <method name="list_copy" symbol="gnome_vfs_uri_list_copy">
        <return-type type="GList*"/>
        <parameters>
          <parameter name="list" type="GList*"/>
        </parameters>
      </method>
      <method name="list_free" symbol="gnome_vfs_uri_list_free">
        <return-type type="void"/>
        <parameters>
          <parameter name="list" type="GList*"/>
        </parameters>
      </method>
      <method name="list_parse" symbol="gnome_vfs_uri_list_parse">
        <return-type type="GList*"/>
        <parameters>
          <parameter name="uri_list" type="const-gchar*"/>
        </parameters>
      </method>
      <method name="list_ref" symbol="gnome_vfs_uri_list_ref">
        <return-type type="GList*"/>
        <parameters>
          <parameter name="list" type="GList*"/>
        </parameters>
      </method>
      <method name="list_unref" symbol="gnome_vfs_uri_list_unref">
        <return-type type="GList*"/>
        <parameters>
          <parameter name="list" type="GList*"/>
        </parameters>
      </method>
      <method name="make_full_from_relative" symbol="gnome_vfs_uri_make_full_from_relative">
        <return-type type="char*"/>
        <parameters>
          <parameter name="base_uri" type="const-char*"/>
          <parameter name="relative_uri" type="const-char*"/>
        </parameters>
      </method>
      <method name="new" symbol="gnome_vfs_uri_new">
        <return-type type="GnomeVFSURI*"/>
        <parameters>
          <parameter name="text_uri" type="const-gchar*"/>
        </parameters>
      </method>
      <method name="ref" symbol="gnome_vfs_uri_ref">
        <return-type type="GnomeVFSURI*"/>
        <parameters>
          <parameter name="uri" type="GnomeVFSURI*"/>
        </parameters>
      </method>
      <method name="resolve_relative" symbol="gnome_vfs_uri_resolve_relative">
        <return-type type="GnomeVFSURI*"/>
        <parameters>
          <parameter name="base" type="const-GnomeVFSURI*"/>
          <parameter name="relative_reference" type="const-gchar*"/>
        </parameters>
      </method>
      <method name="resolve_symbolic_link" symbol="gnome_vfs_uri_resolve_symbolic_link">
        <return-type type="GnomeVFSURI*"/>
        <parameters>
          <parameter name="base" type="const-GnomeVFSURI*"/>
          <parameter name="relative_reference" type="const-gchar*"/>
        </parameters>
      </method>
      <method name="set_host_name" symbol="gnome_vfs_uri_set_host_name">
        <return-type type="void"/>
        <parameters>
          <parameter name="uri" type="GnomeVFSURI*"/>
          <parameter name="host_name" type="const-gchar*"/>
        </parameters>
      </method>
      <method name="set_host_port" symbol="gnome_vfs_uri_set_host_port">
        <return-type type="void"/>
        <parameters>
          <parameter name="uri" type="GnomeVFSURI*"/>
          <parameter name="host_port" type="guint"/>
        </parameters>
      </method>
      <method name="set_password" symbol="gnome_vfs_uri_set_password">
        <return-type type="void"/>
        <parameters>
          <parameter name="uri" type="GnomeVFSURI*"/>
          <parameter name="password" type="const-gchar*"/>
        </parameters>
      </method>
      <method name="set_user_name" symbol="gnome_vfs_uri_set_user_name">
        <return-type type="void"/>
        <parameters>
          <parameter name="uri" type="GnomeVFSURI*"/>
          <parameter name="user_name" type="const-gchar*"/>
        </parameters>
      </method>
      <method name="to_string" symbol="gnome_vfs_uri_to_string">
        <return-type type="gchar*"/>
        <parameters>
          <parameter name="uri" type="const-GnomeVFSURI*"/>
          <parameter name="hide_options" type="GnomeVFSURIHideOptions"/>
        </parameters>
      </method>
      <method name="unref" symbol="gnome_vfs_uri_unref">
        <return-type type="void"/>
        <parameters>
          <parameter name="uri" type="GnomeVFSURI*"/>
        </parameters>
      </method>
    </struct>
    <struct get-type="" name="GnomeVFSUnixMount" type-name="GnomeVFSUnixMount">
      <field name="mount_path" readable="1" type="char*" writable="1"/>
      <field name="device_path" readable="1" type="char*" writable="1"/>
      <field name="filesystem_type" readable="1" type="char*" writable="1"/>
      <field name="is_read_only" readable="1" type="gboolean" writable="1"/>
    </struct>
    <struct get-type="" name="GnomeVFSUnixMountPoint" type-name="GnomeVFSUnixMountPoint">
      <field name="mount_path" readable="1" type="char*" writable="1"/>
      <field name="device_path" readable="1" type="char*" writable="1"/>
      <field name="filesystem_type" readable="1" type="char*" writable="1"/>
      <field name="dev_opt" readable="1" type="char*" writable="1"/>
      <field name="is_read_only" readable="1" type="gboolean" writable="1"/>
      <field name="is_user_mountable" readable="1" type="gboolean" writable="1"/>
      <field name="is_loopback" readable="1" type="gboolean" writable="1"/>
    </struct>
    <struct get-type="" name="GnomeVFSWriteOp" type-name="GnomeVFSWriteOp">
      <field name="num_bytes" readable="1" type="GnomeVFSFileSize" writable="1"/>
      <field name="buffer" readable="1" type="gconstpointer" writable="1"/>
    </struct>
    <struct get-type="" name="GnomeVFSWriteOpResult" type-name="GnomeVFSWriteOpResult">
      <field name="callback" readable="1" type="GnomeVFSAsyncWriteCallback" writable="1"/>
      <field name="callback_data" readable="1" type="void*" writable="1"/>
      <field name="num_bytes" readable="1" type="GnomeVFSFileSize" writable="1"/>
      <field name="buffer" readable="1" type="gconstpointer" writable="1"/>
      <field name="result" readable="1" type="GnomeVFSResult" writable="1"/>
      <field name="bytes_written" readable="1" type="GnomeVFSFileSize" writable="1"/>
    </struct>
    <struct get-type="" name="GnomeVFSXferOp" type-name="GnomeVFSXferOp">
      <field name="source_uri_list" readable="1" type="GList*" writable="1"/>
      <field name="target_uri_list" readable="1" type="GList*" writable="1"/>
      <field name="xfer_options" readable="1" type="GnomeVFSXferOptions" writable="1"/>
      <field name="error_mode" readable="1" type="GnomeVFSXferErrorMode" writable="1"/>
      <field name="overwrite_mode" readable="1" type="GnomeVFSXferOverwriteMode" writable="1"/>
      <field name="progress_sync_callback" readable="1" type="GnomeVFSXferProgressCallback" writable="1"/>
      <field name="sync_callback_data" readable="1" type="gpointer" writable="1"/>
    </struct>
    <struct get-type="" name="GnomeVFSXferOpResult" type-name="GnomeVFSXferOpResult">
      <field name="callback" readable="1" type="GnomeVFSAsyncXferProgressCallback" writable="1"/>
      <field name="callback_data" readable="1" type="void*" writable="1"/>
      <field name="progress_info" readable="1" type="GnomeVFSXferProgressInfo*" writable="1"/>
      <field name="reply" readable="1" type="int" writable="1"/>
    </struct>
    <struct get-type="" name="GnomeVFSXferProgressInfo" type-name="GnomeVFSXferProgressInfo">
      <field name="status" readable="1" type="GnomeVFSXferProgressStatus" writable="1"/>
      <field name="vfs_status" readable="1" type="GnomeVFSResult" writable="1"/>
      <field name="phase" readable="1" type="GnomeVFSXferPhase" writable="1"/>
      <field name="source_name" readable="1" type="gchar*" writable="1"/>
      <field name="target_name" readable="1" type="gchar*" writable="1"/>
      <field name="file_index" readable="1" type="gulong" writable="1"/>
      <field name="files_total" readable="1" type="gulong" writable="1"/>
      <field name="bytes_total" readable="1" type="GnomeVFSFileSize" writable="1"/>
      <field name="file_size" readable="1" type="GnomeVFSFileSize" writable="1"/>
      <field name="bytes_copied" readable="1" type="GnomeVFSFileSize" writable="1"/>
      <field name="total_bytes_copied" readable="1" type="GnomeVFSFileSize" writable="1"/>
      <field name="duplicate_name" readable="1" type="gchar*" writable="1"/>
      <field name="duplicate_count" readable="1" type="int" writable="1"/>
      <field name="top_level_item" readable="1" type="gboolean" writable="1"/>
      <field name="reserved1" readable="1" type="void*" writable="1"/>
      <field name="reserved2" readable="1" type="void*" writable="1"/>
    </struct>
    <struct get-type="" name="XdgAliasList" opaque="true" type-name="XdgAliasList"/>
    <struct get-type="" name="XdgGlobHash" opaque="true" type-name="XdgGlobHash"/>
    <struct get-type="" name="XdgMimeCache" opaque="true" type-name="XdgMimeCache"/>
    <struct get-type="" name="XdgMimeMagic" opaque="true" type-name="XdgMimeMagic"/>
    <struct get-type="" name="XdgParentList" opaque="true" type-name="XdgParentList"/>
    <struct name="GnomeVfsApplication">
      <method deprecated="1" name="is_user_owned_application" symbol="gnome_vfs_application_is_user_owned_application">
        <return-type type="gboolean"/>
        <parameters>
          <parameter name="application" type="const-GnomeVFSMimeApplication*"/>
        </parameters>
      </method>
      <method deprecated="1" name="registry_add_mime_type" symbol="gnome_vfs_application_registry_add_mime_type">
        <return-type type="void"/>
        <parameters>
          <parameter name="app_id" type="const-char*"/>
          <parameter name="mime_type" type="const-char*"/>
        </parameters>
      </method>
      <method deprecated="1" name="registry_clear_mime_types" symbol="gnome_vfs_application_registry_clear_mime_types">
        <return-type type="void"/>
        <parameters>
          <parameter name="app_id" type="const-char*"/>
        </parameters>
      </method>
      <method deprecated="1" name="registry_exists" symbol="gnome_vfs_application_registry_exists">
        <return-type type="gboolean"/>
        <parameters>
          <parameter name="app_id" type="const-char*"/>
        </parameters>
      </method>
      <method deprecated="1" name="registry_get_applications" symbol="gnome_vfs_application_registry_get_applications">
        <return-type type="GList*"/>
        <parameters>
          <parameter name="mime_type" type="const-char*"/>
        </parameters>
      </method>
      <method deprecated="1" name="registry_get_bool_value" symbol="gnome_vfs_application_registry_get_bool_value">
        <return-type type="gboolean"/>
        <parameters>
          <parameter name="app_id" type="const-char*"/>
          <parameter name="key" type="const-char*"/>
          <parameter name="got_key" type="gboolean*"/>
        </parameters>
      </method>
      <method deprecated="1" name="registry_get_keys" symbol="gnome_vfs_application_registry_get_keys">
        <return-type type="GList*"/>
        <parameters>
          <parameter name="app_id" type="const-char*"/>
        </parameters>
      </method>
      <method deprecated="1" name="registry_get_mime_application" symbol="gnome_vfs_application_registry_get_mime_application">
        <return-type type="GnomeVFSMimeApplication*"/>
        <parameters>
          <parameter name="app_id" type="const-char*"/>
        </parameters>
      </method>
      <method deprecated="1" name="registry_get_mime_types" symbol="gnome_vfs_application_registry_get_mime_types">
        <return-type type="GList*"/>
        <parameters>
          <parameter name="app_id" type="const-char*"/>
        </parameters>
      </method>
      <method deprecated="1" name="registry_peek_value" symbol="gnome_vfs_application_registry_peek_value">
        <return-type type="const-char*"/>
        <parameters>
          <parameter name="app_id" type="const-char*"/>
          <parameter name="key" type="const-char*"/>
        </parameters>
      </method>
      <method deprecated="1" name="registry_reload" symbol="gnome_vfs_application_registry_reload">
        <return-type type="void"/>
      </method>
      <method deprecated="1" name="registry_remove_application" symbol="gnome_vfs_application_registry_remove_application">
        <return-type type="void"/>
        <parameters>
          <parameter name="app_id" type="const-char*"/>
        </parameters>
      </method>
      <method deprecated="1" name="registry_remove_mime_type" symbol="gnome_vfs_application_registry_remove_mime_type">
        <return-type type="void"/>
        <parameters>
          <parameter name="app_id" type="const-char*"/>
          <parameter name="mime_type" type="const-char*"/>
        </parameters>
      </method>
      <method deprecated="1" name="registry_save_mime_application" symbol="gnome_vfs_application_registry_save_mime_application">
        <return-type type="void"/>
        <parameters>
          <parameter name="application" type="const-GnomeVFSMimeApplication*"/>
        </parameters>
      </method>
      <method deprecated="1" name="registry_set_bool_value" symbol="gnome_vfs_application_registry_set_bool_value">
        <return-type type="void"/>
        <parameters>
          <parameter name="app_id" type="const-char*"/>
          <parameter name="key" type="const-char*"/>
          <parameter name="value" type="gboolean"/>
        </parameters>
      </method>
      <method deprecated="1" name="registry_set_value" symbol="gnome_vfs_application_registry_set_value">
        <return-type type="void"/>
        <parameters>
          <parameter name="app_id" type="const-char*"/>
          <parameter name="key" type="const-char*"/>
          <parameter name="value" type="const-char*"/>
        </parameters>
      </method>
      <method deprecated="1" name="registry_shutdown" symbol="gnome_vfs_application_registry_shutdown">
        <return-type type="void"/>
      </method>
      <method deprecated="1" name="registry_supports_mime_type" symbol="gnome_vfs_application_registry_supports_mime_type">
        <return-type type="gboolean"/>
        <parameters>
          <parameter name="app_id" type="const-char*"/>
          <parameter name="mime_type" type="const-char*"/>
        </parameters>
      </method>
      <method deprecated="1" name="registry_supports_uri_scheme" symbol="gnome_vfs_application_registry_supports_uri_scheme">
        <return-type type="gboolean"/>
        <parameters>
          <parameter name="app_id" type="const-char*"/>
          <parameter name="uri_scheme" type="const-char*"/>
        </parameters>
      </method>
      <method deprecated="1" name="registry_sync" symbol="gnome_vfs_application_registry_sync">
        <return-type type="GnomeVFSResult"/>
      </method>
      <method deprecated="1" name="registry_unset_key" symbol="gnome_vfs_application_registry_unset_key">
        <return-type type="void"/>
        <parameters>
          <parameter name="app_id" type="const-char*"/>
          <parameter name="key" type="const-char*"/>
        </parameters>
      </method>
    </struct>
    <struct name="GnomeVfsAsync">
      <method name="cancel" symbol="gnome_vfs_async_cancel">
        <return-type type="void"/>
        <parameters>
          <parameter name="handle" type="GnomeVFSAsyncHandle*"/>
        </parameters>
      </method>
      <method name="close" symbol="gnome_vfs_async_close">
        <return-type type="void"/>
        <parameters>
          <parameter name="handle" type="GnomeVFSAsyncHandle*"/>
          <parameter name="callback" type="GnomeVFSAsyncCloseCallback"/>
          <parameter name="callback_data" type="gpointer"/>
        </parameters>
      </method>
      <method name="create" symbol="gnome_vfs_async_create">
        <return-type type="void"/>
        <parameters>
          <parameter name="handle_return" type="GnomeVFSAsyncHandle**"/>
          <parameter name="text_uri" type="const-gchar*"/>
          <parameter name="open_mode" type="GnomeVFSOpenMode"/>
          <parameter name="exclusive" type="gboolean"/>
          <parameter name="perm" type="guint"/>
          <parameter name="priority" type="int"/>
          <parameter name="callback" type="GnomeVFSAsyncOpenCallback"/>
          <parameter name="callback_data" type="gpointer"/>
        </parameters>
      </method>
      <method deprecated="1" name="create_as_channel" symbol="gnome_vfs_async_create_as_channel">
        <return-type type="void"/>
        <parameters>
          <parameter name="handle_return" type="GnomeVFSAsyncHandle**"/>
          <parameter name="text_uri" type="const-gchar*"/>
          <parameter name="open_mode" type="GnomeVFSOpenMode"/>
          <parameter name="exclusive" type="gboolean"/>
          <parameter name="perm" type="guint"/>
          <parameter name="priority" type="int"/>
          <parameter name="callback" type="GnomeVFSAsyncCreateAsChannelCallback"/>
          <parameter name="callback_data" type="gpointer"/>
        </parameters>
      </method>
      <method name="create_symbolic_link" symbol="gnome_vfs_async_create_symbolic_link">
        <return-type type="void"/>
        <parameters>
          <parameter name="handle_return" type="GnomeVFSAsyncHandle**"/>
          <parameter name="uri" type="GnomeVFSURI*"/>
          <parameter name="uri_reference" type="const-gchar*"/>
          <parameter name="priority" type="int"/>
          <parameter name="callback" type="GnomeVFSAsyncOpenCallback"/>
          <parameter name="callback_data" type="gpointer"/>
        </parameters>
      </method>
      <method name="create_uri" symbol="gnome_vfs_async_create_uri">
        <return-type type="void"/>
        <parameters>
          <parameter name="handle_return" type="GnomeVFSAsyncHandle**"/>
          <parameter name="uri" type="GnomeVFSURI*"/>
          <parameter name="open_mode" type="GnomeVFSOpenMode"/>
          <parameter name="exclusive" type="gboolean"/>
          <parameter name="perm" type="guint"/>
          <parameter name="priority" type="int"/>
          <parameter name="callback" type="GnomeVFSAsyncOpenCallback"/>
          <parameter name="callback_data" type="gpointer"/>
        </parameters>
      </method>
      <method deprecated="1" name="create_uri_as_channel" symbol="gnome_vfs_async_create_uri_as_channel">
        <return-type type="void"/>
        <parameters>
          <parameter name="handle_return" type="GnomeVFSAsyncHandle**"/>
          <parameter name="uri" type="GnomeVFSURI*"/>
          <parameter name="open_mode" type="GnomeVFSOpenMode"/>
          <parameter name="exclusive" type="gboolean"/>
          <parameter name="perm" type="guint"/>
          <parameter name="priority" type="int"/>
          <parameter name="callback" type="GnomeVFSAsyncCreateAsChannelCallback"/>
          <parameter name="callback_data" type="gpointer"/>
        </parameters>
      </method>
      <method name="file_control" symbol="gnome_vfs_async_file_control">
        <return-type type="void"/>
        <parameters>
          <parameter name="handle" type="GnomeVFSAsyncHandle*"/>
          <parameter name="operation" type="const-char*"/>
          <parameter name="operation_data" type="gpointer"/>
          <parameter name="operation_data_destroy_func" type="GDestroyNotify"/>
          <parameter name="callback" type="GnomeVFSAsyncFileControlCallback"/>
          <parameter name="callback_data" type="gpointer"/>
        </parameters>
      </method>
      <method name="find_directory" symbol="gnome_vfs_async_find_directory">
        <return-type type="void"/>
        <parameters>
          <parameter name="handle_return" type="GnomeVFSAsyncHandle**"/>
          <parameter name="near_uri_list" type="GList*"/>
          <parameter name="kind" type="GnomeVFSFindDirectoryKind"/>
          <parameter name="create_if_needed" type="gboolean"/>
          <parameter name="find_if_needed" type="gboolean"/>
          <parameter name="permissions" type="guint"/>
          <parameter name="priority" type="int"/>
          <parameter name="callback" type="GnomeVFSAsyncFindDirectoryCallback"/>
          <parameter name="user_data" type="gpointer"/>
        </parameters>
      </method>
      <method name="get_file_info" symbol="gnome_vfs_async_get_file_info">
        <return-type type="void"/>
        <parameters>
          <parameter name="handle_return" type="GnomeVFSAsyncHandle**"/>
          <parameter name="uri_list" type="GList*"/>
          <parameter name="options" type="GnomeVFSFileInfoOptions"/>
          <parameter name="priority" type="int"/>
          <parameter name="callback" type="GnomeVFSAsyncGetFileInfoCallback"/>
          <parameter name="callback_data" type="gpointer"/>
        </parameters>
      </method>
      <method name="get_job_limit" symbol="gnome_vfs_async_get_job_limit">
        <return-type type="int"/>
      </method>
      <method name="load_directory" symbol="gnome_vfs_async_load_directory">
        <return-type type="void"/>
        <parameters>
          <parameter name="handle_return" type="GnomeVFSAsyncHandle**"/>
          <parameter name="text_uri" type="const-gchar*"/>
          <parameter name="options" type="GnomeVFSFileInfoOptions"/>
          <parameter name="items_per_notification" type="guint"/>
          <parameter name="priority" type="int"/>
          <parameter name="callback" type="GnomeVFSAsyncDirectoryLoadCallback"/>
          <parameter name="callback_data" type="gpointer"/>
        </parameters>
      </method>
      <method name="load_directory_uri" symbol="gnome_vfs_async_load_directory_uri">
        <return-type type="void"/>
        <parameters>
          <parameter name="handle_return" type="GnomeVFSAsyncHandle**"/>
          <parameter name="uri" type="GnomeVFSURI*"/>
          <parameter name="options" type="GnomeVFSFileInfoOptions"/>
          <parameter name="items_per_notification" type="guint"/>
          <parameter name="priority" type="int"/>
          <parameter name="callback" type="GnomeVFSAsyncDirectoryLoadCallback"/>
          <parameter name="callback_data" type="gpointer"/>
        </parameters>
      </method>
      <method name="module_callback_pop" symbol="gnome_vfs_async_module_callback_pop">
        <return-type type="void"/>
        <parameters>
          <parameter name="callback_name" type="const-char*"/>
        </parameters>
      </method>
      <method name="module_callback_push" symbol="gnome_vfs_async_module_callback_push">
        <return-type type="void"/>
        <parameters>
          <parameter name="callback_name" type="const-char*"/>
          <parameter name="callback" type="GnomeVFSAsyncModuleCallback"/>
          <parameter name="callback_data" type="gpointer"/>
          <parameter name="destroy_notify" type="GDestroyNotify"/>
        </parameters>
      </method>
      <method name="module_callback_set_default" symbol="gnome_vfs_async_module_callback_set_default">
        <return-type type="void"/>
        <parameters>
          <parameter name="callback_name" type="const-char*"/>
          <parameter name="callback" type="GnomeVFSAsyncModuleCallback"/>
          <parameter name="callback_data" type="gpointer"/>
          <parameter name="destroy_notify" type="GDestroyNotify"/>
        </parameters>
      </method>
      <method name="open" symbol="gnome_vfs_async_open">
        <return-type type="void"/>
        <parameters>
          <parameter name="handle_return" type="GnomeVFSAsyncHandle**"/>
          <parameter name="text_uri" type="const-gchar*"/>
          <parameter name="open_mode" type="GnomeVFSOpenMode"/>
          <parameter name="priority" type="int"/>
          <parameter name="callback" type="GnomeVFSAsyncOpenCallback"/>
          <parameter name="callback_data" type="gpointer"/>
        </parameters>
      </method>
      <method deprecated="1" name="open_as_channel" symbol="gnome_vfs_async_open_as_channel">
        <return-type type="void"/>
        <parameters>
          <parameter name="handle_return" type="GnomeVFSAsyncHandle**"/>
          <parameter name="text_uri" type="const-gchar*"/>
          <parameter name="open_mode" type="GnomeVFSOpenMode"/>
          <parameter name="advised_block_size" type="guint"/>
          <parameter name="priority" type="int"/>
          <parameter name="callback" type="GnomeVFSAsyncOpenAsChannelCallback"/>
          <parameter name="callback_data" type="gpointer"/>
        </parameters>
      </method>
      <method name="open_uri" symbol="gnome_vfs_async_open_uri">
        <return-type type="void"/>
        <parameters>
          <parameter name="handle_return" type="GnomeVFSAsyncHandle**"/>
          <parameter name="uri" type="GnomeVFSURI*"/>
          <parameter name="open_mode" type="GnomeVFSOpenMode"/>
          <parameter name="priority" type="int"/>
          <parameter name="callback" type="GnomeVFSAsyncOpenCallback"/>
          <parameter name="callback_data" type="gpointer"/>
        </parameters>
      </method>
      <method deprecated="1" name="open_uri_as_channel" symbol="gnome_vfs_async_open_uri_as_channel">
        <return-type type="void"/>
        <parameters>
          <parameter name="handle_return" type="GnomeVFSAsyncHandle**"/>
          <parameter name="uri" type="GnomeVFSURI*"/>
          <parameter name="open_mode" type="GnomeVFSOpenMode"/>
          <parameter name="advised_block_size" type="guint"/>
          <parameter name="priority" type="int"/>
          <parameter name="callback" type="GnomeVFSAsyncOpenAsChannelCallback"/>
          <parameter name="callback_data" type="gpointer"/>
        </parameters>
      </method>
      <method name="read" symbol="gnome_vfs_async_read">
        <return-type type="void"/>
        <parameters>
          <parameter name="handle" type="GnomeVFSAsyncHandle*"/>
          <parameter name="buffer" type="gpointer"/>
          <parameter name="bytes" type="guint"/>
          <parameter name="callback" type="GnomeVFSAsyncReadCallback"/>
          <parameter name="callback_data" type="gpointer"/>
        </parameters>
      </method>
      <method name="seek" symbol="gnome_vfs_async_seek">
        <return-type type="void"/>
        <parameters>
          <parameter name="handle" type="GnomeVFSAsyncHandle*"/>
          <parameter name="whence" type="GnomeVFSSeekPosition"/>
          <parameter name="offset" type="GnomeVFSFileOffset"/>
          <parameter name="callback" type="GnomeVFSAsyncSeekCallback"/>
          <parameter name="callback_data" type="gpointer"/>
        </parameters>
      </method>
      <method name="set_file_info" symbol="gnome_vfs_async_set_file_info">
        <return-type type="void"/>
        <parameters>
          <parameter name="handle_return" type="GnomeVFSAsyncHandle**"/>
          <parameter name="uri" type="GnomeVFSURI*"/>
          <parameter name="info" type="GnomeVFSFileInfo*"/>
          <parameter name="mask" type="GnomeVFSSetFileInfoMask"/>
          <parameter name="options" type="GnomeVFSFileInfoOptions"/>
          <parameter name="priority" type="int"/>
          <parameter name="callback" type="GnomeVFSAsyncSetFileInfoCallback"/>
          <parameter name="callback_data" type="gpointer"/>
        </parameters>
      </method>
      <method name="set_job_limit" symbol="gnome_vfs_async_set_job_limit">
        <return-type type="void"/>
        <parameters>
          <parameter name="limit" type="int"/>
        </parameters>
      </method>
      <method name="write" symbol="gnome_vfs_async_write">
        <return-type type="void"/>
        <parameters>
          <parameter name="handle" type="GnomeVFSAsyncHandle*"/>
          <parameter name="buffer" type="gconstpointer"/>
          <parameter name="bytes" type="guint"/>
          <parameter name="callback" type="GnomeVFSAsyncWriteCallback"/>
          <parameter name="callback_data" type="gpointer"/>
        </parameters>
      </method>
      <method name="xfer" symbol="gnome_vfs_async_xfer">
        <return-type type="GnomeVFSResult"/>
        <parameters>
          <parameter name="handle_return" type="GnomeVFSAsyncHandle**"/>
          <parameter name="source_uri_list" type="GList*"/>
          <parameter name="target_uri_list" type="GList*"/>
          <parameter name="xfer_options" type="GnomeVFSXferOptions"/>
          <parameter name="error_mode" type="GnomeVFSXferErrorMode"/>
          <parameter name="overwrite_mode" type="GnomeVFSXferOverwriteMode"/>
          <parameter name="priority" type="int"/>
          <parameter name="progress_update_callback" type="GnomeVFSAsyncXferProgressCallback"/>
          <parameter name="update_callback_data" type="gpointer"/>
          <parameter name="progress_sync_callback" type="GnomeVFSXferProgressCallback"/>
          <parameter name="sync_callback_data" type="gpointer"/>
        </parameters>
      </method>
    </struct>
    <struct name="GnomeVfsCheck">
      <method name="same_fs" symbol="gnome_vfs_check_same_fs">
        <return-type type="GnomeVFSResult"/>
        <parameters>
          <parameter name="source" type="const-gchar*"/>
          <parameter name="target" type="const-gchar*"/>
          <parameter name="same_fs_return" type="gboolean*"/>
        </parameters>
      </method>
      <method name="same_fs_uris" symbol="gnome_vfs_check_same_fs_uris">
        <return-type type="GnomeVFSResult"/>
        <parameters>
          <parameter name="source_uri" type="GnomeVFSURI*"/>
          <parameter name="target_uri" type="GnomeVFSURI*"/>
          <parameter name="same_fs_return" type="gboolean*"/>
        </parameters>
      </method>
      <method name="same_fs_uris_cancellable" symbol="gnome_vfs_check_same_fs_uris_cancellable">
        <return-type type="GnomeVFSResult"/>
        <parameters>
          <parameter name="a" type="GnomeVFSURI*"/>
          <parameter name="b" type="GnomeVFSURI*"/>
          <parameter name="same_fs_return" type="gboolean*"/>
          <parameter name="context" type="GnomeVFSContext*"/>
        </parameters>
      </method>
    </struct>
    <function name="close_cancellable" symbol="gnome_vfs_close_cancellable">
      <return-type type="GnomeVFSResult"/>
      <parameters>
        <parameter name="handle" type="GnomeVFSHandle*"/>
        <parameter name="context" type="GnomeVFSContext*"/>
      </parameters>
    </function>
    <function name="connect_to_server" symbol="gnome_vfs_connect_to_server">
      <return-type type="void"/>
      <parameters>
        <parameter name="uri" type="const-char*"/>
        <parameter name="display_name" type="const-char*"/>
        <parameter name="icon" type="const-char*"/>
      </parameters>
    </function>
    <struct name="GnomeVfsCreate">
      <method name="symbolic_link" symbol="gnome_vfs_create_symbolic_link">
        <return-type type="GnomeVFSResult"/>
        <parameters>
          <parameter name="uri" type="GnomeVFSURI*"/>
          <parameter name="target_reference" type="const-gchar*"/>
        </parameters>
      </method>
      <method name="symbolic_link_cancellable" symbol="gnome_vfs_create_symbolic_link_cancellable">
        <return-type type="GnomeVFSResult"/>
        <parameters>
          <parameter name="uri" type="GnomeVFSURI*"/>
          <parameter name="target_reference" type="const-gchar*"/>
          <parameter name="context" type="GnomeVFSContext*"/>
        </parameters>
      </method>
      <method name="uri" symbol="gnome_vfs_create_uri">
        <return-type type="GnomeVFSResult"/>
        <parameters>
          <parameter name="handle" type="GnomeVFSHandle**"/>
          <parameter name="uri" type="GnomeVFSURI*"/>
          <parameter name="open_mode" type="GnomeVFSOpenMode"/>
          <parameter name="exclusive" type="gboolean"/>
          <parameter name="perm" type="guint"/>
        </parameters>
      </method>
      <method name="uri_cancellable" symbol="gnome_vfs_create_uri_cancellable">
        <return-type type="GnomeVFSResult"/>
        <parameters>
          <parameter name="handle" type="GnomeVFSHandle**"/>
          <parameter name="uri" type="GnomeVFSURI*"/>
          <parameter name="open_mode" type="GnomeVFSOpenMode"/>
          <parameter name="exclusive" type="gboolean"/>
          <parameter name="perm" type="guint"/>
          <parameter name="context" type="GnomeVFSContext*"/>
        </parameters>
      </method>
    </struct>
    <struct name="GnomeVfsDirectory">
      <method name="close" symbol="gnome_vfs_directory_close">
        <return-type type="GnomeVFSResult"/>
        <parameters>
          <parameter name="handle" type="GnomeVFSDirectoryHandle*"/>
        </parameters>
      </method>
      <method name="list_load" symbol="gnome_vfs_directory_list_load">
        <return-type type="GnomeVFSResult"/>
        <parameters>
          <parameter name="list" type="GList**"/>
          <parameter name="text_uri" type="const-gchar*"/>
          <parameter name="options" type="GnomeVFSFileInfoOptions"/>
        </parameters>
      </method>
      <method name="open" symbol="gnome_vfs_directory_open">
        <return-type type="GnomeVFSResult"/>
        <parameters>
          <parameter name="handle" type="GnomeVFSDirectoryHandle**"/>
          <parameter name="text_uri" type="const-gchar*"/>
          <parameter name="options" type="GnomeVFSFileInfoOptions"/>
        </parameters>
      </method>
      <method name="open_from_uri" symbol="gnome_vfs_directory_open_from_uri">
        <return-type type="GnomeVFSResult"/>
        <parameters>
          <parameter name="handle" type="GnomeVFSDirectoryHandle**"/>
          <parameter name="uri" type="GnomeVFSURI*"/>
          <parameter name="options" type="GnomeVFSFileInfoOptions"/>
        </parameters>
      </method>
      <method name="open_from_uri_cancellable" symbol="gnome_vfs_directory_open_from_uri_cancellable">
        <return-type type="GnomeVFSResult"/>
        <parameters>
          <parameter name="handle" type="GnomeVFSDirectoryHandle**"/>
          <parameter name="uri" type="GnomeVFSURI*"/>
          <parameter name="options" type="GnomeVFSFileInfoOptions"/>
          <parameter name="context" type="GnomeVFSContext*"/>
        </parameters>
      </method>
      <method name="read_next" symbol="gnome_vfs_directory_read_next">
        <return-type type="GnomeVFSResult"/>
        <parameters>
          <parameter name="handle" type="GnomeVFSDirectoryHandle*"/>
          <parameter name="file_info" type="GnomeVFSFileInfo*"/>
        </parameters>
      </method>
      <method name="read_next_cancellable" symbol="gnome_vfs_directory_read_next_cancellable">
        <return-type type="GnomeVFSResult"/>
        <parameters>
          <parameter name="handle" type="GnomeVFSDirectoryHandle*"/>
          <parameter name="info" type="GnomeVFSFileInfo*"/>
          <parameter name="context" type="GnomeVFSContext*"/>
        </parameters>
      </method>
      <method name="visit" symbol="gnome_vfs_directory_visit">
        <return-type type="GnomeVFSResult"/>
        <parameters>
          <parameter name="text_uri" type="const-gchar*"/>
          <parameter name="info_options" type="GnomeVFSFileInfoOptions"/>
          <parameter name="visit_options" type="GnomeVFSDirectoryVisitOptions"/>
          <parameter name="callback" type="GnomeVFSDirectoryVisitFunc"/>
          <parameter name="data" type="gpointer"/>
        </parameters>
      </method>
      <method name="visit_files" symbol="gnome_vfs_directory_visit_files">
        <return-type type="GnomeVFSResult"/>
        <parameters>
          <parameter name="text_uri" type="const-gchar*"/>
          <parameter name="file_list" type="GList*"/>
          <parameter name="info_options" type="GnomeVFSFileInfoOptions"/>
          <parameter name="visit_options" type="GnomeVFSDirectoryVisitOptions"/>
          <parameter name="callback" type="GnomeVFSDirectoryVisitFunc"/>
          <parameter name="data" type="gpointer"/>
        </parameters>
      </method>
      <method name="visit_files_at_uri" symbol="gnome_vfs_directory_visit_files_at_uri">
        <return-type type="GnomeVFSResult"/>
        <parameters>
          <parameter name="uri" type="GnomeVFSURI*"/>
          <parameter name="file_list" type="GList*"/>
          <parameter name="info_options" type="GnomeVFSFileInfoOptions"/>
          <parameter name="visit_options" type="GnomeVFSDirectoryVisitOptions"/>
          <parameter name="callback" type="GnomeVFSDirectoryVisitFunc"/>
          <parameter name="data" type="gpointer"/>
        </parameters>
      </method>
      <method name="visit_uri" symbol="gnome_vfs_directory_visit_uri">
        <return-type type="GnomeVFSResult"/>
        <parameters>
          <parameter name="uri" type="GnomeVFSURI*"/>
          <parameter name="info_options" type="GnomeVFSFileInfoOptions"/>
          <parameter name="visit_options" type="GnomeVFSDirectoryVisitOptions"/>
          <parameter name="callback" type="GnomeVFSDirectoryVisitFunc"/>
          <parameter name="data" type="gpointer"/>
        </parameters>
      </method>
    </struct>
    <struct name="GnomeVfsEscape">
      <method name="host_and_path_string" symbol="gnome_vfs_escape_host_and_path_string">
        <return-type type="char*"/>
        <parameters>
          <parameter name="path" type="const-char*"/>
        </parameters>
      </method>
      <method name="path_string" symbol="gnome_vfs_escape_path_string">
        <return-type type="char*"/>
        <parameters>
          <parameter name="path" type="const-char*"/>
        </parameters>
      </method>
      <method name="set" symbol="gnome_vfs_escape_set">
        <return-type type="char*"/>
        <parameters>
          <parameter name="string" type="const-char*"/>
          <parameter name="match_set" type="const-char*"/>
        </parameters>
      </method>
      <method name="slashes" symbol="gnome_vfs_escape_slashes">
        <return-type type="char*"/>
        <parameters>
          <parameter name="string" type="const-char*"/>
        </parameters>
      </method>
      <method name="string" symbol="gnome_vfs_escape_string">
        <return-type type="char*"/>
        <parameters>
          <parameter name="string" type="const-char*"/>
        </parameters>
      </method>
    </struct>
    <function name="expand_initial_tilde" symbol="gnome_vfs_expand_initial_tilde">
      <return-type type="char*"/>
      <parameters>
        <parameter name="path" type="const-char*"/>
      </parameters>
    </function>
    <struct name="GnomeVfsFile">
      <method name="control" symbol="gnome_vfs_file_control">
        <return-type type="GnomeVFSResult"/>
        <parameters>
          <parameter name="handle" type="GnomeVFSHandle*"/>
          <parameter name="operation" type="const-char*"/>
          <parameter name="operation_data" type="gpointer"/>
        </parameters>
      </method>
      <method name="control_cancellable" symbol="gnome_vfs_file_control_cancellable">
        <return-type type="GnomeVFSResult"/>
        <parameters>
          <parameter name="handle" type="GnomeVFSHandle*"/>
          <parameter name="operation" type="const-char*"/>
          <parameter name="operation_data" type="gpointer"/>
          <parameter name="context" type="GnomeVFSContext*"/>
        </parameters>
      </method>
    </struct>
    <function name="find_directory" symbol="gnome_vfs_find_directory">
      <return-type type="GnomeVFSResult"/>
      <parameters>
        <parameter name="near_uri" type="GnomeVFSURI*"/>
        <parameter name="kind" type="GnomeVFSFindDirectoryKind"/>
        <parameter name="result" type="GnomeVFSURI**"/>
        <parameter name="create_if_needed" type="gboolean"/>
        <parameter name="find_if_needed" type="gboolean"/>
        <parameter name="permissions" type="guint"/>
      </parameters>
    </function>
    <function name="find_directory_cancellable" symbol="gnome_vfs_find_directory_cancellable">
      <return-type type="GnomeVFSResult"/>
      <parameters>
        <parameter name="near_uri" type="GnomeVFSURI*"/>
        <parameter name="kind" type="GnomeVFSFindDirectoryKind"/>
        <parameter name="result_uri" type="GnomeVFSURI**"/>
        <parameter name="create_if_needed" type="gboolean"/>
        <parameter name="find_if_needed" type="gboolean"/>
        <parameter name="permissions" type="guint"/>
        <parameter name="context" type="GnomeVFSContext*"/>
      </parameters>
    </function>
    <function name="forget_cache" symbol="gnome_vfs_forget_cache">
      <return-type type="GnomeVFSResult"/>
      <parameters>
        <parameter name="handle" type="GnomeVFSHandle*"/>
        <parameter name="offset" type="GnomeVFSFileOffset"/>
        <parameter name="size" type="GnomeVFSFileSize"/>
      </parameters>
    </function>
    <struct name="GnomeVfsFormat">
      <method name="file_size_for_display" symbol="gnome_vfs_format_file_size_for_display">
        <return-type type="char*"/>
        <parameters>
          <parameter name="size" type="GnomeVFSFileSize"/>
        </parameters>
      </method>
      <method name="uri_for_display" symbol="gnome_vfs_format_uri_for_display">
        <return-type type="char*"/>
        <parameters>
          <parameter name="uri" type="const-char*"/>
        </parameters>
      </method>
    </struct>
    <function name="get_file_info" symbol="gnome_vfs_get_file_info">
      <return-type type="GnomeVFSResult"/>
      <parameters>
        <parameter name="text_uri" type="const-gchar*"/>
        <parameter name="info" type="GnomeVFSFileInfo*"/>
        <parameter name="options" type="GnomeVFSFileInfoOptions"/>
      </parameters>
    </function>
    <function name="get_file_info_from_handle" symbol="gnome_vfs_get_file_info_from_handle">
      <return-type type="GnomeVFSResult"/>
      <parameters>
        <parameter name="handle" type="GnomeVFSHandle*"/>
        <parameter name="info" type="GnomeVFSFileInfo*"/>
        <parameter name="options" type="GnomeVFSFileInfoOptions"/>
      </parameters>
    </function>
    <function name="get_file_info_from_handle_cancellable" symbol="gnome_vfs_get_file_info_from_handle_cancellable">
      <return-type type="GnomeVFSResult"/>
      <parameters>
        <parameter name="handle" type="GnomeVFSHandle*"/>
        <parameter name="info" type="GnomeVFSFileInfo*"/>
        <parameter name="options" type="GnomeVFSFileInfoOptions"/>
        <parameter name="context" type="GnomeVFSContext*"/>
      </parameters>
    </function>
    <function name="get_file_info_uri" symbol="gnome_vfs_get_file_info_uri">
      <return-type type="GnomeVFSResult"/>
      <parameters>
        <parameter name="uri" type="GnomeVFSURI*"/>
        <parameter name="info" type="GnomeVFSFileInfo*"/>
        <parameter name="options" type="GnomeVFSFileInfoOptions"/>
      </parameters>
    </function>
    <function name="get_file_info_uri_cancellable" symbol="gnome_vfs_get_file_info_uri_cancellable">
      <return-type type="GnomeVFSResult"/>
      <parameters>
        <parameter name="uri" type="GnomeVFSURI*"/>
        <parameter name="info" type="GnomeVFSFileInfo*"/>
        <parameter name="options" type="GnomeVFSFileInfoOptions"/>
        <parameter name="context" type="GnomeVFSContext*"/>
      </parameters>
    </function>
    <function name="get_file_mime_type" symbol="gnome_vfs_get_file_mime_type">
      <return-type type="const-char*"/>
      <parameters>
        <parameter name="path" type="const-char*"/>
        <parameter name="optional_stat_info" type="stat*"/>
        <parameter name="suffix_only" type="gboolean"/>
      </parameters>
    </function>
    <function name="get_file_mime_type_fast" symbol="gnome_vfs_get_file_mime_type_fast">
      <return-type type="const-char*"/>
      <parameters>
        <parameter name="path" type="const-char*"/>
        <parameter name="optional_stat_info" type="stat*"/>
      </parameters>
    </function>
    <function name="get_local_path_from_uri" symbol="gnome_vfs_get_local_path_from_uri">
      <return-type type="char*"/>
      <parameters>
        <parameter name="uri" type="const-char*"/>
      </parameters>
    </function>
    <function name="get_mime_type" symbol="gnome_vfs_get_mime_type">
      <return-type type="char*"/>
      <parameters>
        <parameter name="text_uri" type="const-char*"/>
      </parameters>
    </function>
    <function name="get_mime_type_common" symbol="gnome_vfs_get_mime_type_common">
      <return-type type="const-char*"/>
      <parameters>
        <parameter name="uri" type="GnomeVFSURI*"/>
      </parameters>
    </function>
    <function name="get_mime_type_for_buffer" symbol="gnome_vfs_get_mime_type_for_buffer">
      <return-type type="const-char*"/>
      <parameters>
        <parameter name="buffer" type="GnomeVFSMimeSniffBuffer*"/>
      </parameters>
    </function>
    <function name="get_mime_type_for_data" symbol="gnome_vfs_get_mime_type_for_data">
      <return-type type="const-char*"/>
      <parameters>
        <parameter name="data" type="gconstpointer"/>
        <parameter name="data_size" type="int"/>
      </parameters>
    </function>
    <function name="get_mime_type_for_name" symbol="gnome_vfs_get_mime_type_for_name">
      <return-type type="const-char*"/>
      <parameters>
        <parameter name="filename" type="const-char*"/>
      </parameters>
    </function>
    <function name="get_mime_type_for_name_and_data" symbol="gnome_vfs_get_mime_type_for_name_and_data">
      <return-type type="const-char*"/>
      <parameters>
        <parameter name="filename" type="const-char*"/>
        <parameter name="data" type="gconstpointer"/>
        <parameter name="data_size" type="gssize"/>
      </parameters>
    </function>
    <function deprecated="1" name="get_mime_type_from_file_data" symbol="gnome_vfs_get_mime_type_from_file_data">
      <return-type type="const-char*"/>
      <parameters>
        <parameter name="uri" type="GnomeVFSURI*"/>
      </parameters>
    </function>
    <function name="get_mime_type_from_uri" symbol="gnome_vfs_get_mime_type_from_uri">
      <return-type type="const-char*"/>
      <parameters>
        <parameter name="uri" type="GnomeVFSURI*"/>
      </parameters>
    </function>
    <function deprecated="1" name="get_registered_mime_types" symbol="gnome_vfs_get_registered_mime_types">
      <return-type type="GList*"/>
    </function>
    <function name="get_slow_mime_type" symbol="gnome_vfs_get_slow_mime_type">
      <return-type type="char*"/>
      <parameters>
        <parameter name="text_uri" type="const-char*"/>
      </parameters>
    </function>
    <function name="get_special_mime_type" symbol="gnome_vfs_get_special_mime_type">
      <return-type type="const-char*"/>
      <parameters>
        <parameter name="uri" type="GnomeVFSURI*"/>
      </parameters>
    </function>
    <function name="get_supertype_from_mime_type" symbol="gnome_vfs_get_supertype_from_mime_type">
      <return-type type="char*"/>
      <parameters>
        <parameter name="mime_type" type="const-char*"/>
      </parameters>
    </function>
    <function name="get_uri_from_local_path" symbol="gnome_vfs_get_uri_from_local_path">
      <return-type type="char*"/>
      <parameters>
        <parameter name="local_full_path" type="const-char*"/>
      </parameters>
    </function>
    <function name="get_uri_scheme" symbol="gnome_vfs_get_uri_scheme">
      <return-type type="char*"/>
      <parameters>
        <parameter name="uri" type="const-char*"/>
      </parameters>
    </function>
    <function name="get_volume_free_space" symbol="gnome_vfs_get_volume_free_space">
      <return-type type="GnomeVFSResult"/>
      <parameters>
        <parameter name="vfs_uri" type="const-GnomeVFSURI*"/>
        <parameter name="size" type="GnomeVFSFileSize*"/>
      </parameters>
    </function>
    <function name="get_volume_monitor" symbol="gnome_vfs_get_volume_monitor">
      <return-type type="GnomeVFSVolumeMonitor*"/>
    </function>
    <function name="icon_path_from_filename" symbol="gnome_vfs_icon_path_from_filename">
      <return-type type="char*"/>
      <parameters>
        <parameter name="filename" type="const-char*"/>
      </parameters>
    </function>
    <struct name="GnomeVfsIs">
      <method name="executable_command_string" symbol="gnome_vfs_is_executable_command_string">
        <return-type type="gboolean"/>
        <parameters>
          <parameter name="command_string" type="const-char*"/>
        </parameters>
      </method>
      <method name="primary_thread" symbol="gnome_vfs_is_primary_thread">
        <return-type type="gboolean"/>
      </method>
    </struct>
    <function name="list_deep_free" symbol="gnome_vfs_list_deep_free">
      <return-type type="void"/>
      <parameters>
        <parameter name="list" type="GList*"/>
      </parameters>
    </function>
    <struct name="GnomeVfsMake">
      <method name="directory" symbol="gnome_vfs_make_directory">
        <return-type type="GnomeVFSResult"/>
        <parameters>
          <parameter name="text_uri" type="const-gchar*"/>
          <parameter name="perm" type="guint"/>
        </parameters>
      </method>
      <method name="directory_for_uri" symbol="gnome_vfs_make_directory_for_uri">
        <return-type type="GnomeVFSResult"/>
        <parameters>
          <parameter name="uri" type="GnomeVFSURI*"/>
          <parameter name="perm" type="guint"/>
        </parameters>
      </method>
      <method name="directory_for_uri_cancellable" symbol="gnome_vfs_make_directory_for_uri_cancellable">
        <return-type type="GnomeVFSResult"/>
        <parameters>
          <parameter name="uri" type="GnomeVFSURI*"/>
          <parameter name="perm" type="guint"/>
          <parameter name="context" type="GnomeVFSContext*"/>
        </parameters>
      </method>
      <method name="path_name_canonical" symbol="gnome_vfs_make_path_name_canonical">
        <return-type type="char*"/>
        <parameters>
          <parameter name="path" type="const-char*"/>
        </parameters>
      </method>
      <method name="uri_canonical" symbol="gnome_vfs_make_uri_canonical">
        <return-type type="char*"/>
        <parameters>
          <parameter name="uri" type="const-char*"/>
        </parameters>
      </method>
      <method name="uri_canonical_strip_fragment" symbol="gnome_vfs_make_uri_canonical_strip_fragment">
        <return-type type="char*"/>
        <parameters>
          <parameter name="uri" type="const-char*"/>
        </parameters>
      </method>
      <method name="uri_from_input" symbol="gnome_vfs_make_uri_from_input">
        <return-type type="char*"/>
        <parameters>
          <parameter name="location" type="const-char*"/>
        </parameters>
      </method>
      <method name="uri_from_input_with_dirs" symbol="gnome_vfs_make_uri_from_input_with_dirs">
        <return-type type="char*"/>
        <parameters>
          <parameter name="location" type="const-char*"/>
          <parameter name="dirs" type="GnomeVFSMakeURIDirs"/>
        </parameters>
      </method>
      <method name="uri_from_input_with_trailing_ws" symbol="gnome_vfs_make_uri_from_input_with_trailing_ws">
        <return-type type="char*"/>
        <parameters>
          <parameter name="location" type="const-char*"/>
        </parameters>
      </method>
      <method name="uri_from_shell_arg" symbol="gnome_vfs_make_uri_from_shell_arg">
        <return-type type="char*"/>
        <parameters>
          <parameter name="uri" type="const-char*"/>
        </parameters>
      </method>
      <method deprecated="1" name="uri_full_from_relative" symbol="gnome_vfs_make_uri_full_from_relative">
        <return-type type="char*"/>
        <parameters>
          <parameter name="base_uri" type="const-char*"/>
          <parameter name="relative_uri" type="const-char*"/>
        </parameters>
      </method>
    </struct>
    <struct name="GnomeVfsMime">
      <method deprecated="1" name="add_application_to_short_list" symbol="gnome_vfs_mime_add_application_to_short_list">
        <return-type type="GnomeVFSResult"/>
        <parameters>
          <parameter name="mime_type" type="const-char*"/>
          <parameter name="application_id" type="const-char*"/>
        </parameters>
      </method>
      <method deprecated="1" name="add_component_to_short_list" symbol="gnome_vfs_mime_add_component_to_short_list">
        <return-type type="GnomeVFSResult"/>
        <parameters>
          <parameter name="mime_type" type="const-char*"/>
          <parameter name="iid" type="const-char*"/>
        </parameters>
      </method>
      <method deprecated="1" name="add_extension" symbol="gnome_vfs_mime_add_extension">
        <return-type type="GnomeVFSResult"/>
        <parameters>
          <parameter name="mime_type" type="const-char*"/>
          <parameter name="extension" type="const-char*"/>
        </parameters>
      </method>
      <method name="can_be_executable" symbol="gnome_vfs_mime_can_be_executable">
        <return-type type="gboolean"/>
        <parameters>
          <parameter name="mime_type" type="const-char*"/>
        </parameters>
      </method>
      <method deprecated="1" name="component_list_free" symbol="gnome_vfs_mime_component_list_free">
        <return-type type="void"/>
        <parameters>
          <parameter name="list" type="GList*"/>
        </parameters>
      </method>
      <method deprecated="1" name="extend_all_applications" symbol="gnome_vfs_mime_extend_all_applications">
        <return-type type="GnomeVFSResult"/>
        <parameters>
          <parameter name="mime_type" type="const-char*"/>
          <parameter name="application_ids" type="GList*"/>
        </parameters>
      </method>
      <method name="extensions_list_free" symbol="gnome_vfs_mime_extensions_list_free">
        <return-type type="void"/>
        <parameters>
          <parameter name="list" type="GList*"/>
        </parameters>
      </method>
      <method name="freeze" symbol="gnome_vfs_mime_freeze">
        <return-type type="void"/>
      </method>
      <method name="get_all_applications" symbol="gnome_vfs_mime_get_all_applications">
        <return-type type="GList*"/>
        <parameters>
          <parameter name="mime_type" type="const-char*"/>
        </parameters>
      </method>
      <method name="get_all_applications_for_uri" symbol="gnome_vfs_mime_get_all_applications_for_uri">
        <return-type type="GList*"/>
        <parameters>
          <parameter name="uri" type="const-char*"/>
          <parameter name="mime_type" type="const-char*"/>
        </parameters>
      </method>
      <method deprecated="1" name="get_all_components" symbol="gnome_vfs_mime_get_all_components">
        <return-type type="GList*"/>
        <parameters>
          <parameter name="mime_type" type="const-char*"/>
        </parameters>
      </method>
      <method deprecated="1" name="get_all_desktop_entries" symbol="gnome_vfs_mime_get_all_desktop_entries">
        <return-type type="GList*"/>
        <parameters>
          <parameter name="mime_type" type="const-char*"/>
        </parameters>
      </method>
      <method deprecated="1" name="get_default_action" symbol="gnome_vfs_mime_get_default_action">
        <return-type type="GnomeVFSMimeAction*"/>
        <parameters>
          <parameter name="mime_type" type="const-char*"/>
        </parameters>
      </method>
      <method deprecated="1" name="get_default_action_type" symbol="gnome_vfs_mime_get_default_action_type">
        <return-type type="GnomeVFSMimeActionType"/>
        <parameters>
          <parameter name="mime_type" type="const-char*"/>
        </parameters>
      </method>
      <method name="get_default_application" symbol="gnome_vfs_mime_get_default_application">
        <return-type type="GnomeVFSMimeApplication*"/>
        <parameters>
          <parameter name="mime_type" type="const-char*"/>
        </parameters>
      </method>
      <method name="get_default_application_for_uri" symbol="gnome_vfs_mime_get_default_application_for_uri">
        <return-type type="GnomeVFSMimeApplication*"/>
        <parameters>
          <parameter name="uri" type="const-char*"/>
          <parameter name="mime_type" type="const-char*"/>
        </parameters>
      </method>
      <method deprecated="1" name="get_default_component" symbol="gnome_vfs_mime_get_default_component">
        <return-type type="void*"/>
        <parameters>
          <parameter name="mime_type" type="const-char*"/>
        </parameters>
      </method>
      <method deprecated="1" name="get_default_desktop_entry" symbol="gnome_vfs_mime_get_default_desktop_entry">
        <return-type type="gchar*"/>
        <parameters>
          <parameter name="mime_type" type="const-char*"/>
        </parameters>
      </method>
      <method name="get_description" symbol="gnome_vfs_mime_get_description">
        <return-type type="const-char*"/>
        <parameters>
          <parameter name="mime_type" type="const-char*"/>
        </parameters>
      </method>
      <method name="get_extensions_list" symbol="gnome_vfs_mime_get_extensions_list">
        <return-type type="GList*"/>
        <parameters>
          <parameter name="mime_type" type="const-char*"/>
        </parameters>
      </method>
      <method deprecated="1" name="get_extensions_pretty_string" symbol="gnome_vfs_mime_get_extensions_pretty_string">
        <return-type type="char*"/>
        <parameters>
          <parameter name="mime_type" type="const-char*"/>
        </parameters>
      </method>
      <method deprecated="1" name="get_extensions_string" symbol="gnome_vfs_mime_get_extensions_string">
        <return-type type="char*"/>
        <parameters>
          <parameter name="mime_type" type="const-char*"/>
        </parameters>
      </method>
      <method deprecated="1" name="get_icon" symbol="gnome_vfs_mime_get_icon">
        <return-type type="const-char*"/>
        <parameters>
          <parameter name="mime_type" type="const-char*"/>
        </parameters>
      </method>
      <method deprecated="1" name="get_key_list" symbol="gnome_vfs_mime_get_key_list">
        <return-type type="GList*"/>
        <parameters>
          <parameter name="mime_type" type="const-char*"/>
        </parameters>
      </method>
      <method deprecated="1" name="get_short_list_applications" symbol="gnome_vfs_mime_get_short_list_applications">
        <return-type type="GList*"/>
        <parameters>
          <parameter name="mime_type" type="const-char*"/>
        </parameters>
      </method>
      <method deprecated="1" name="get_short_list_components" symbol="gnome_vfs_mime_get_short_list_components">
        <return-type type="GList*"/>
        <parameters>
          <parameter name="mime_type" type="const-char*"/>
        </parameters>
      </method>
      <method name="get_value" symbol="gnome_vfs_mime_get_value">
        <return-type type="const-char*"/>
        <parameters>
          <parameter name="mime_type" type="const-char*"/>
          <parameter name="key" type="const-char*"/>
        </parameters>
      </method>
      <method deprecated="1" name="id_in_application_list" symbol="gnome_vfs_mime_id_in_application_list">
        <return-type type="gboolean"/>
        <parameters>
          <parameter name="id" type="const-char*"/>
          <parameter name="applications" type="GList*"/>
        </parameters>
      </method>
      <method deprecated="1" name="id_in_component_list" symbol="gnome_vfs_mime_id_in_component_list">
        <return-type type="gboolean"/>
        <parameters>
          <parameter name="iid" type="const-char*"/>
          <parameter name="components" type="GList*"/>
        </parameters>
      </method>
      <method deprecated="1" name="id_list_from_application_list" symbol="gnome_vfs_mime_id_list_from_application_list">
        <return-type type="GList*"/>
        <parameters>
          <parameter name="applications" type="GList*"/>
        </parameters>
      </method>
      <method deprecated="1" name="id_list_from_component_list" symbol="gnome_vfs_mime_id_list_from_component_list">
        <return-type type="GList*"/>
        <parameters>
          <parameter name="components" type="GList*"/>
        </parameters>
      </method>
      <method name="info_cache_reload" symbol="gnome_vfs_mime_info_cache_reload">
        <return-type type="void"/>
        <parameters>
          <parameter name="dir" type="const-char*"/>
        </parameters>
      </method>
      <method name="info_reload" symbol="gnome_vfs_mime_info_reload">
        <return-type type="void"/>
      </method>
      <method deprecated="1" name="keys_list_free" symbol="gnome_vfs_mime_keys_list_free">
        <return-type type="void"/>
        <parameters>
          <parameter name="mime_type_list" type="GList*"/>
        </parameters>
      </method>
      <method deprecated="1" name="registered_mime_type_delete" symbol="gnome_vfs_mime_registered_mime_type_delete">
        <return-type type="void"/>
        <parameters>
          <parameter name="mime_type" type="const-char*"/>
        </parameters>
      </method>
      <method deprecated="1" name="registered_mime_type_list_free" symbol="gnome_vfs_mime_registered_mime_type_list_free">
        <return-type type="void"/>
        <parameters>
          <parameter name="list" type="GList*"/>
        </parameters>
      </method>
      <method name="reload" symbol="gnome_vfs_mime_reload">
        <return-type type="void"/>
      </method>
      <method deprecated="1" name="remove_application_from_list" symbol="gnome_vfs_mime_remove_application_from_list">
        <return-type type="GList*"/>
        <parameters>
          <parameter name="applications" type="GList*"/>
          <parameter name="application_id" type="const-char*"/>
          <parameter name="did_remove" type="gboolean*"/>
        </parameters>
      </method>
      <method deprecated="1" name="remove_application_from_short_list" symbol="gnome_vfs_mime_remove_application_from_short_list">
        <return-type type="GnomeVFSResult"/>
        <parameters>
          <parameter name="mime_type" type="const-char*"/>
          <parameter name="application_id" type="const-char*"/>
        </parameters>
      </method>
      <method deprecated="1" name="remove_component_from_list" symbol="gnome_vfs_mime_remove_component_from_list">
        <return-type type="GList*"/>
        <parameters>
          <parameter name="components" type="GList*"/>
          <parameter name="iid" type="const-char*"/>
          <parameter name="did_remove" type="gboolean*"/>
        </parameters>
      </method>
      <method deprecated="1" name="remove_component_from_short_list" symbol="gnome_vfs_mime_remove_component_from_short_list">
        <return-type type="GnomeVFSResult"/>
        <parameters>
          <parameter name="mime_type" type="const-char*"/>
          <parameter name="iid" type="const-char*"/>
        </parameters>
      </method>
      <method deprecated="1" name="remove_extension" symbol="gnome_vfs_mime_remove_extension">
        <return-type type="GnomeVFSResult"/>
        <parameters>
          <parameter name="mime_type" type="const-char*"/>
          <parameter name="extension" type="const-char*"/>
        </parameters>
      </method>
      <method deprecated="1" name="remove_from_all_applications" symbol="gnome_vfs_mime_remove_from_all_applications">
        <return-type type="GnomeVFSResult"/>
        <parameters>
          <parameter name="mime_type" type="const-char*"/>
          <parameter name="application_ids" type="GList*"/>
        </parameters>
      </method>
      <method deprecated="1" name="reset" symbol="gnome_vfs_mime_reset">
        <return-type type="void"/>
      </method>
      <method deprecated="1" name="set_can_be_executable" symbol="gnome_vfs_mime_set_can_be_executable">
        <return-type type="GnomeVFSResult"/>
        <parameters>
          <parameter name="mime_type" type="const-char*"/>
          <parameter name="new_value" type="gboolean"/>
        </parameters>
      </method>
      <method deprecated="1" name="set_default_action_type" symbol="gnome_vfs_mime_set_default_action_type">
        <return-type type="GnomeVFSResult"/>
        <parameters>
          <parameter name="mime_type" type="const-char*"/>
          <parameter name="action_type" type="GnomeVFSMimeActionType"/>
        </parameters>
      </method>
      <method deprecated="1" name="set_default_application" symbol="gnome_vfs_mime_set_default_application">
        <return-type type="GnomeVFSResult"/>
        <parameters>
          <parameter name="mime_type" type="const-char*"/>
          <parameter name="application_id" type="const-char*"/>
        </parameters>
      </method>
      <method deprecated="1" name="set_default_component" symbol="gnome_vfs_mime_set_default_component">
        <return-type type="GnomeVFSResult"/>
        <parameters>
          <parameter name="mime_type" type="const-char*"/>
          <parameter name="component_iid" type="const-char*"/>
        </parameters>
      </method>
      <method deprecated="1" name="set_description" symbol="gnome_vfs_mime_set_description">
        <return-type type="GnomeVFSResult"/>
        <parameters>
          <parameter name="mime_type" type="const-char*"/>
          <parameter name="description" type="const-char*"/>
        </parameters>
      </method>
      <method deprecated="1" name="set_extensions_list" symbol="gnome_vfs_mime_set_extensions_list">
        <return-type type="GnomeVFSResult"/>
        <parameters>
          <parameter name="mime_type" type="const-char*"/>
          <parameter name="extensions_list" type="const-char*"/>
        </parameters>
      </method>
      <method deprecated="1" name="set_icon" symbol="gnome_vfs_mime_set_icon">
        <return-type type="GnomeVFSResult"/>
        <parameters>
          <parameter name="mime_type" type="const-char*"/>
          <parameter name="filename" type="const-char*"/>
        </parameters>
      </method>
      <method name="set_registered_type_key" symbol="gnome_vfs_mime_set_registered_type_key">
        <return-type type="GnomeVFSResult"/>
        <parameters>
          <parameter name="mime_type" type="const-char*"/>
          <parameter name="key" type="const-char*"/>
          <parameter name="data" type="const-char*"/>
        </parameters>
      </method>
      <method deprecated="1" name="set_short_list_applications" symbol="gnome_vfs_mime_set_short_list_applications">
        <return-type type="GnomeVFSResult"/>
        <parameters>
          <parameter name="mime_type" type="const-char*"/>
          <parameter name="application_ids" type="GList*"/>
        </parameters>
      </method>
      <method deprecated="1" name="set_short_list_components" symbol="gnome_vfs_mime_set_short_list_components">
        <return-type type="GnomeVFSResult"/>
        <parameters>
          <parameter name="mime_type" type="const-char*"/>
          <parameter name="component_iids" type="GList*"/>
        </parameters>
      </method>
      <method deprecated="1" name="set_value" symbol="gnome_vfs_mime_set_value">
        <return-type type="GnomeVFSResult"/>
        <parameters>
          <parameter name="mime_type" type="const-char*"/>
          <parameter name="key" type="const-char*"/>
          <parameter name="value" type="const-char*"/>
        </parameters>
      </method>
      <method deprecated="1" name="shutdown" symbol="gnome_vfs_mime_shutdown">
        <return-type type="void"/>
      </method>
      <method name="thaw" symbol="gnome_vfs_mime_thaw">
        <return-type type="void"/>
      </method>
      <method name="type_from_mode" symbol="gnome_vfs_mime_type_from_mode">
        <return-type type="const-char*"/>
        <parameters>
          <parameter name="mode" type="mode_t"/>
        </parameters>
      </method>
      <method name="type_from_mode_or_default" symbol="gnome_vfs_mime_type_from_mode_or_default">
        <return-type type="const-char*"/>
        <parameters>
          <parameter name="mode" type="mode_t"/>
          <parameter name="defaultv" type="const-char*"/>
        </parameters>
      </method>
      <method deprecated="1" name="type_from_name" symbol="gnome_vfs_mime_type_from_name">
        <return-type type="const-char*"/>
        <parameters>
          <parameter name="filename" type="const-char*"/>
        </parameters>
      </method>
      <method name="type_from_name_or_default" symbol="gnome_vfs_mime_type_from_name_or_default">
        <return-type type="const-char*"/>
        <parameters>
          <parameter name="filename" type="const-char*"/>
          <parameter name="defaultv" type="const-char*"/>
        </parameters>
      </method>
      <method name="type_get_equivalence" symbol="gnome_vfs_mime_type_get_equivalence">
        <return-type type="GnomeVFSMimeEquivalence"/>
        <parameters>
          <parameter name="mime_type" type="const-char*"/>
          <parameter name="base_mime_type" type="const-char*"/>
        </parameters>
      </method>
      <method name="type_is_equal" symbol="gnome_vfs_mime_type_is_equal">
        <return-type type="gboolean"/>
        <parameters>
          <parameter name="a" type="const-char*"/>
          <parameter name="b" type="const-char*"/>
        </parameters>
      </method>
      <method name="type_is_known" symbol="gnome_vfs_mime_type_is_known">
        <return-type type="gboolean"/>
        <parameters>
          <parameter name="mime_type" type="const-char*"/>
        </parameters>
      </method>
      <method name="type_is_supertype" symbol="gnome_vfs_mime_type_is_supertype">
        <return-type type="gboolean"/>
        <parameters>
          <parameter name="mime_type" type="const-char*"/>
        </parameters>
      </method>
    </struct>
    <struct name="GnomeVfsModule">
      <method name="callback_invoke" symbol="gnome_vfs_module_callback_invoke">
        <return-type type="gboolean"/>
        <parameters>
          <parameter name="callback_name" type="const-char*"/>
          <parameter name="in" type="gconstpointer"/>
          <parameter name="in_size" type="gsize"/>
          <parameter name="out" type="gpointer"/>
          <parameter name="out_size" type="gsize"/>
        </parameters>
      </method>
      <method name="callback_pop" symbol="gnome_vfs_module_callback_pop">
        <return-type type="void"/>
        <parameters>
          <parameter name="callback_name" type="const-char*"/>
        </parameters>
      </method>
      <method name="callback_push" symbol="gnome_vfs_module_callback_push">
        <return-type type="void"/>
        <parameters>
          <parameter name="callback_name" type="const-char*"/>
          <parameter name="callback" type="GnomeVFSModuleCallback"/>
          <parameter name="callback_data" type="gpointer"/>
          <parameter name="destroy_notify" type="GDestroyNotify"/>
        </parameters>
      </method>
      <method name="callback_set_default" symbol="gnome_vfs_module_callback_set_default">
        <return-type type="void"/>
        <parameters>
          <parameter name="callback_name" type="const-char*"/>
          <parameter name="callback" type="GnomeVFSModuleCallback"/>
          <parameter name="callback_data" type="gpointer"/>
          <parameter name="destroy_notify" type="GDestroyNotify"/>
        </parameters>
      </method>
    </struct>
    <struct name="GnomeVfsMonitor">
      <method name="add" symbol="gnome_vfs_monitor_add">
        <return-type type="GnomeVFSResult"/>
        <parameters>
          <parameter name="handle" type="GnomeVFSMonitorHandle**"/>
          <parameter name="text_uri" type="const-gchar*"/>
          <parameter name="monitor_type" type="GnomeVFSMonitorType"/>
          <parameter name="callback" type="GnomeVFSMonitorCallback"/>
          <parameter name="user_data" type="gpointer"/>
        </parameters>
      </method>
      <method name="callback" symbol="gnome_vfs_monitor_callback">
        <return-type type="void"/>
        <parameters>
          <parameter name="method_handle" type="GnomeVFSMethodHandle*"/>
          <parameter name="info_uri" type="GnomeVFSURI*"/>
          <parameter name="event_type" type="GnomeVFSMonitorEventType"/>
        </parameters>
      </method>
      <method name="cancel" symbol="gnome_vfs_monitor_cancel">
        <return-type type="GnomeVFSResult"/>
        <parameters>
          <parameter name="handle" type="GnomeVFSMonitorHandle*"/>
        </parameters>
      </method>
    </struct>
    <struct name="GnomeVfsMove">
      <method name="uri" symbol="gnome_vfs_move_uri">
        <return-type type="GnomeVFSResult"/>
        <parameters>
          <parameter name="old_uri" type="GnomeVFSURI*"/>
          <parameter name="new_uri" type="GnomeVFSURI*"/>
          <parameter name="force_replace" type="gboolean"/>
        </parameters>
      </method>
      <method name="uri_cancellable" symbol="gnome_vfs_move_uri_cancellable">
        <return-type type="GnomeVFSResult"/>
        <parameters>
          <parameter name="old" type="GnomeVFSURI*"/>
          <parameter name="new" type="GnomeVFSURI*"/>
          <parameter name="force_replace" type="gboolean"/>
          <parameter name="context" type="GnomeVFSContext*"/>
        </parameters>
      </method>
    </struct>
    <struct name="GnomeVfsOpen">
      <method name="fd" symbol="gnome_vfs_open_fd">
        <return-type type="GnomeVFSResult"/>
        <parameters>
          <parameter name="handle" type="GnomeVFSHandle**"/>
          <parameter name="filedes" type="int"/>
        </parameters>
      </method>
      <method name="uri" symbol="gnome_vfs_open_uri">
        <return-type type="GnomeVFSResult"/>
        <parameters>
          <parameter name="handle" type="GnomeVFSHandle**"/>
          <parameter name="uri" type="GnomeVFSURI*"/>
          <parameter name="open_mode" type="GnomeVFSOpenMode"/>
        </parameters>
      </method>
      <method name="uri_cancellable" symbol="gnome_vfs_open_uri_cancellable">
        <return-type type="GnomeVFSResult"/>
        <parameters>
          <parameter name="handle" type="GnomeVFSHandle**"/>
          <parameter name="uri" type="GnomeVFSURI*"/>
          <parameter name="open_mode" type="GnomeVFSOpenMode"/>
          <parameter name="context" type="GnomeVFSContext*"/>
        </parameters>
      </method>
    </struct>
    <function name="parse_ls_lga" symbol="gnome_vfs_parse_ls_lga">
      <return-type type="int"/>
      <parameters>
        <parameter name="p" type="const-char*"/>
        <parameter name="s" type="stat*"/>
        <parameter name="filename" type="char**"/>
        <parameter name="linkname" type="char**"/>
      </parameters>
    </function>
    <function name="pty_open" symbol="gnome_vfs_pty_open">
      <return-type type="int"/>
      <parameters>
        <parameter name="child" type="pid_t*"/>
        <parameter name="flags" type="guint"/>
        <parameter name="env_add" type="char**"/>
        <parameter name="command" type="const-char*"/>
        <parameter name="argv" type="char**"/>
        <parameter name="directory" type="const-char*"/>
        <parameter name="columns" type="int"/>
        <parameter name="rows" type="int"/>
        <parameter name="stdin_fd" type="int*"/>
        <parameter name="stdout_fd" type="int*"/>
        <parameter name="stderr_fd" type="int*"/>
      </parameters>
    </function>
    <struct name="GnomeVfsRead">
      <method name="cancellable" symbol="gnome_vfs_read_cancellable">
        <return-type type="GnomeVFSResult"/>
        <parameters>
          <parameter name="handle" type="GnomeVFSHandle*"/>
          <parameter name="buffer" type="gpointer"/>
          <parameter name="bytes" type="GnomeVFSFileSize"/>
          <parameter name="bytes_written" type="GnomeVFSFileSize*"/>
          <parameter name="context" type="GnomeVFSContext*"/>
        </parameters>
      </method>
      <method name="entire_file" symbol="gnome_vfs_read_entire_file">
        <return-type type="GnomeVFSResult"/>
        <parameters>
          <parameter name="uri" type="const-char*"/>
          <parameter name="file_size" type="int*"/>
          <parameter name="file_contents" type="char**"/>
        </parameters>
      </method>
    </struct>
    <function name="remove_directory" symbol="gnome_vfs_remove_directory">
      <return-type type="GnomeVFSResult"/>
      <parameters>
        <parameter name="text_uri" type="const-gchar*"/>
      </parameters>
    </function>
    <function name="remove_directory_from_uri" symbol="gnome_vfs_remove_directory_from_uri">
      <return-type type="GnomeVFSResult"/>
      <parameters>
        <parameter name="uri" type="GnomeVFSURI*"/>
      </parameters>
    </function>
    <function name="remove_directory_from_uri_cancellable" symbol="gnome_vfs_remove_directory_from_uri_cancellable">
      <return-type type="GnomeVFSResult"/>
      <parameters>
        <parameter name="uri" type="GnomeVFSURI*"/>
        <parameter name="context" type="GnomeVFSContext*"/>
      </parameters>
    </function>
    <struct name="GnomeVfsResolve">
      <method name="free" symbol="gnome_vfs_resolve_free">
        <return-type type="void"/>
        <parameters>
          <parameter name="handle" type="GnomeVFSResolveHandle*"/>
        </parameters>
      </method>
      <method name="next_address" symbol="gnome_vfs_resolve_next_address">
        <return-type type="gboolean"/>
        <parameters>
          <parameter name="handle" type="GnomeVFSResolveHandle*"/>
          <parameter name="address" type="GnomeVFSAddress**"/>
        </parameters>
      </method>
      <method name="reset_to_beginning" symbol="gnome_vfs_resolve_reset_to_beginning">
        <return-type type="void"/>
        <parameters>
          <parameter name="handle" type="GnomeVFSResolveHandle*"/>
        </parameters>
      </method>
    </struct>
    <function name="result_from_errno" symbol="gnome_vfs_result_from_errno">
      <return-type type="GnomeVFSResult"/>
    </function>
    <function name="result_from_errno_code" symbol="gnome_vfs_result_from_errno_code">
      <return-type type="GnomeVFSResult"/>
      <parameters>
        <parameter name="errno_code" type="int"/>
      </parameters>
    </function>
    <function name="result_from_h_errno" symbol="gnome_vfs_result_from_h_errno">
      <return-type type="GnomeVFSResult"/>
    </function>
    <function name="result_from_h_errno_val" symbol="gnome_vfs_result_from_h_errno_val">
      <return-type type="GnomeVFSResult"/>
      <parameters>
        <parameter name="h_errno_code" type="int"/>
      </parameters>
    </function>
    <function name="result_to_string" symbol="gnome_vfs_result_to_string">
      <return-type type="const-char*"/>
      <parameters>
        <parameter name="result" type="GnomeVFSResult"/>
      </parameters>
    </function>
    <function name="seek_cancellable" symbol="gnome_vfs_seek_cancellable">
      <return-type type="GnomeVFSResult"/>
      <parameters>
        <parameter name="handle" type="GnomeVFSHandle*"/>
        <parameter name="whence" type="GnomeVFSSeekPosition"/>
        <parameter name="offset" type="GnomeVFSFileOffset"/>
        <parameter name="context" type="GnomeVFSContext*"/>
      </parameters>
    </function>
    <function name="set_file_info" symbol="gnome_vfs_set_file_info">
      <return-type type="GnomeVFSResult"/>
      <parameters>
        <parameter name="text_uri" type="const-gchar*"/>
        <parameter name="info" type="GnomeVFSFileInfo*"/>
        <parameter name="mask" type="GnomeVFSSetFileInfoMask"/>
      </parameters>
    </function>
    <function name="set_file_info_cancellable" symbol="gnome_vfs_set_file_info_cancellable">
      <return-type type="GnomeVFSResult"/>
      <parameters>
        <parameter name="a" type="GnomeVFSURI*"/>
        <parameter name="info" type="const-GnomeVFSFileInfo*"/>
        <parameter name="mask" type="GnomeVFSSetFileInfoMask"/>
        <parameter name="context" type="GnomeVFSContext*"/>
      </parameters>
    </function>
    <function name="set_file_info_uri" symbol="gnome_vfs_set_file_info_uri">
      <return-type type="GnomeVFSResult"/>
      <parameters>
        <parameter name="uri" type="GnomeVFSURI*"/>
        <parameter name="info" type="GnomeVFSFileInfo*"/>
        <parameter name="mask" type="GnomeVFSSetFileInfoMask"/>
      </parameters>
    </function>
    <function name="set_meta" symbol="gnome_vfs_set_meta">
      <return-type type="GnomeVFSResult"/>
      <parameters>
        <parameter name="info" type="GnomeVFSFileInfo*"/>
        <parameter name="file_name" type="const-char*"/>
        <parameter name="meta_key" type="const-char*"/>
      </parameters>
    </function>
    <function name="set_meta_for_list" symbol="gnome_vfs_set_meta_for_list">
      <return-type type="GnomeVFSResult"/>
      <parameters>
        <parameter name="info" type="GnomeVFSFileInfo*"/>
        <parameter name="file_name" type="const-char*"/>
        <parameter name="meta_keys" type="const-GList*"/>
      </parameters>
    </function>
    <function name="stat_to_file_info" symbol="gnome_vfs_stat_to_file_info">
      <return-type type="void"/>
      <parameters>
        <parameter name="file_info" type="GnomeVFSFileInfo*"/>
        <parameter name="statptr" type="stat*"/>
      </parameters>
    </function>
    <struct name="GnomeVfsTruncate">
      <method name="handle" symbol="gnome_vfs_truncate_handle">
        <return-type type="GnomeVFSResult"/>
        <parameters>
          <parameter name="handle" type="GnomeVFSHandle*"/>
          <parameter name="length" type="GnomeVFSFileSize"/>
        </parameters>
      </method>
      <method name="handle_cancellable" symbol="gnome_vfs_truncate_handle_cancellable">
        <return-type type="GnomeVFSResult"/>
        <parameters>
          <parameter name="handle" type="GnomeVFSHandle*"/>
          <parameter name="length" type="GnomeVFSFileSize"/>
          <parameter name="context" type="GnomeVFSContext*"/>
        </parameters>
      </method>
      <method name="uri" symbol="gnome_vfs_truncate_uri">
        <return-type type="GnomeVFSResult"/>
        <parameters>
          <parameter name="uri" type="GnomeVFSURI*"/>
          <parameter name="length" type="GnomeVFSFileSize"/>
        </parameters>
      </method>
      <method name="uri_cancellable" symbol="gnome_vfs_truncate_uri_cancellable">
        <return-type type="GnomeVFSResult"/>
        <parameters>
          <parameter name="uri" type="GnomeVFSURI*"/>
          <parameter name="length" type="GnomeVFSFileSize"/>
          <parameter name="context" type="GnomeVFSContext*"/>
        </parameters>
      </method>
    </struct>
    <struct name="GnomeVfsUnescape">
      <method name="string" symbol="gnome_vfs_unescape_string">
        <return-type type="char*"/>
        <parameters>
          <parameter name="escaped_string" type="const-char*"/>
          <parameter name="illegal_characters" type="const-char*"/>
        </parameters>
      </method>
      <method name="string_for_display" symbol="gnome_vfs_unescape_string_for_display">
        <return-type type="char*"/>
        <parameters>
          <parameter name="escaped" type="const-char*"/>
        </parameters>
      </method>
    </struct>
    <struct name="GnomeVfsUnlink">
      <method name="from_uri" symbol="gnome_vfs_unlink_from_uri">
        <return-type type="GnomeVFSResult"/>
        <parameters>
          <parameter name="uri" type="GnomeVFSURI*"/>
        </parameters>
      </method>
      <method name="from_uri_cancellable" symbol="gnome_vfs_unlink_from_uri_cancellable">
        <return-type type="GnomeVFSResult"/>
        <parameters>
          <parameter name="uri" type="GnomeVFSURI*"/>
          <parameter name="context" type="GnomeVFSContext*"/>
        </parameters>
      </method>
    </struct>
    <function name="uris_match" symbol="gnome_vfs_uris_match">
      <return-type type="gboolean"/>
      <parameters>
        <parameter name="uri_1" type="const-char*"/>
        <parameter name="uri_2" type="const-char*"/>
      </parameters>
    </function>
    <struct name="GnomeVfsUrl">
      <method name="show" symbol="gnome_vfs_url_show">
        <return-type type="GnomeVFSResult"/>
        <parameters>
          <parameter name="url" type="const-char*"/>
        </parameters>
      </method>
      <method name="show_with_env" symbol="gnome_vfs_url_show_with_env">
        <return-type type="GnomeVFSResult"/>
        <parameters>
          <parameter name="url" type="const-char*"/>
          <parameter name="envp" type="char**"/>
        </parameters>
      </method>
    </struct>
    <function name="write_cancellable" symbol="gnome_vfs_write_cancellable">
      <return-type type="GnomeVFSResult"/>
      <parameters>
        <parameter name="handle" type="GnomeVFSHandle*"/>
        <parameter name="buffer" type="gconstpointer"/>
        <parameter name="bytes" type="GnomeVFSFileSize"/>
        <parameter name="bytes_written" type="GnomeVFSFileSize*"/>
        <parameter name="context" type="GnomeVFSContext*"/>
      </parameters>
    </function>
    <struct name="GnomeVfsXfer">
      <method name="delete_list" symbol="gnome_vfs_xfer_delete_list">
        <return-type type="GnomeVFSResult"/>
        <parameters>
          <parameter name="source_uri_list" type="const-GList*"/>
          <parameter name="error_mode" type="GnomeVFSXferErrorMode"/>
          <parameter name="xfer_options" type="GnomeVFSXferOptions"/>
          <parameter name="progress_callback" type="GnomeVFSXferProgressCallback"/>
          <parameter name="data" type="gpointer"/>
        </parameters>
      </method>
      <method name="uri" symbol="gnome_vfs_xfer_uri">
        <return-type type="GnomeVFSResult"/>
        <parameters>
          <parameter name="source_uri" type="const-GnomeVFSURI*"/>
          <parameter name="target_uri" type="const-GnomeVFSURI*"/>
          <parameter name="xfer_options" type="GnomeVFSXferOptions"/>
          <parameter name="error_mode" type="GnomeVFSXferErrorMode"/>
          <parameter name="overwrite_mode" type="GnomeVFSXferOverwriteMode"/>
          <parameter name="progress_callback" type="GnomeVFSXferProgressCallback"/>
          <parameter name="data" type="gpointer"/>
        </parameters>
      </method>
      <method name="uri_list" symbol="gnome_vfs_xfer_uri_list">
        <return-type type="GnomeVFSResult"/>
        <parameters>
          <parameter name="source_uri_list" type="const-GList*"/>
          <parameter name="target_uri_list" type="const-GList*"/>
          <parameter name="xfer_options" type="GnomeVFSXferOptions"/>
          <parameter name="error_mode" type="GnomeVFSXferErrorMode"/>
          <parameter name="overwrite_mode" type="GnomeVFSXferOverwriteMode"/>
          <parameter name="progress_callback" type="GnomeVFSXferProgressCallback"/>
          <parameter name="data" type="gpointer"/>
        </parameters>
      </method>
    </struct>
  </namespace>
</api>
