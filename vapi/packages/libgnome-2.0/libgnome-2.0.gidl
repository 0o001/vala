<?xml version="1.0"?>
<api version="1.0">
  <!--

        This file was automatically generated.
        Please DO NOT MODIFY THIS FILE, modify .metadata files instead.

-->
  <namespace name="Gnome">
    <enum get-type="gnome_file_domain_get_type" name="GnomeFileDomain" type="enum" type-name="GnomeFileDomain">
      <member name="GNOME_FILE_DOMAIN_UNKNOWN" value=""/>
      <member name="GNOME_FILE_DOMAIN_LIBDIR" value=""/>
      <member name="GNOME_FILE_DOMAIN_DATADIR" value=""/>
      <member name="GNOME_FILE_DOMAIN_SOUND" value=""/>
      <member name="GNOME_FILE_DOMAIN_PIXMAP" value=""/>
      <member name="GNOME_FILE_DOMAIN_CONFIG" value=""/>
      <member name="GNOME_FILE_DOMAIN_HELP" value=""/>
      <member name="GNOME_FILE_DOMAIN_APP_LIBDIR" value=""/>
      <member name="GNOME_FILE_DOMAIN_APP_DATADIR" value=""/>
      <member name="GNOME_FILE_DOMAIN_APP_SOUND" value=""/>
      <member name="GNOME_FILE_DOMAIN_APP_PIXMAP" value=""/>
      <member name="GNOME_FILE_DOMAIN_APP_CONFIG" value=""/>
      <member name="GNOME_FILE_DOMAIN_APP_HELP" value=""/>
    </enum>
    <enum get-type="gnome_help_error_get_type" name="GnomeHelpError" type="enum" type-name="GnomeHelpError">
      <member name="GNOME_HELP_ERROR_INTERNAL" value=""/>
      <member name="GNOME_HELP_ERROR_NOT_FOUND" value=""/>
    </enum>
    <enum get-type="gnome_trigger_type_get_type" name="GnomeTriggerType" type="enum" type-name="GnomeTriggerType">
      <member name="GTRIG_NONE" value=""/>
      <member name="GTRIG_FUNCTION" value=""/>
      <member name="GTRIG_COMMAND" value=""/>
      <member name="GTRIG_MEDIAPLAY" value=""/>
    </enum>
    <enum name="GnomeURLError" type="enum" type-name="GnomeURLError">
      <member name="GNOME_URL_ERROR_PARSE" value=""/>
      <member name="GNOME_URL_ERROR_LAUNCH" value=""/>
      <member name="GNOME_URL_ERROR_URL" value=""/>
      <member name="GNOME_URL_ERROR_NO_DEFAULT" value=""/>
      <member name="GNOME_URL_ERROR_NOT_SUPPORTED" value=""/>
      <member name="GNOME_URL_ERROR_VFS" value=""/>
      <member name="GNOME_URL_ERROR_CANCELLED" value=""/>
    </enum>
    <callback name="GnomeModuleClassInitHook" type-name="GnomeModuleClassInitHook">
      <return-type type="void"/>
      <parameters>
        <parameter name="klass" type="GnomeProgramClass*"/>
        <parameter name="mod_info" type="const-GnomeModuleInfo*"/>
      </parameters>
    </callback>
    <callback name="GnomeModuleGetGOptionGroupFunc" type-name="GnomeModuleGetGOptionGroupFunc">
      <return-type type="GOptionGroup*"/>
    </callback>
    <callback name="GnomeModuleHook" type-name="GnomeModuleHook">
      <return-type type="void"/>
      <parameters>
        <parameter name="program" type="GnomeProgram*"/>
        <parameter name="mod_info" type="GnomeModuleInfo*"/>
      </parameters>
    </callback>
    <callback name="GnomeModuleInitHook" type-name="GnomeModuleInitHook">
      <return-type type="void"/>
      <parameters>
        <parameter name="mod_info" type="const-GnomeModuleInfo*"/>
      </parameters>
    </callback>
    <callback name="GnomeTriggerActionFunction" type-name="GnomeTriggerActionFunction">
      <return-type type="void"/>
      <parameters>
        <parameter name="msg" type="char*"/>
        <parameter name="level" type="char*"/>
        <parameter name="supinfo" type="char*[]"/>
      </parameters>
    </callback>
    <object get-type="" name="GnomeProgram" parent="GObject" type-name="GnomeProgram">
      <field name="_priv" type="GnomeProgramPrivate*"/>
      <property construct-only="1" name="popt-table" type="gpointer" writable="1"/>
      <property construct-only="1" name="popt-flags" type="gint" writable="1"/>
      <property name="popt-context" readable="1" type="gpointer"/>
      <property construct-only="1" name="goption-context" readable="1" type="gpointer" writable="1"/>
      <property construct-only="1" name="human-readable-name" readable="1" type="gchar*" writable="1"/>
      <property construct-only="1" name="gnome-path" readable="1" type="gchar*" writable="1"/>
      <property name="app-id" readable="1" type="gchar*"/>
      <property name="app-version" readable="1" type="gchar*"/>
      <property construct-only="1" name="gnome-prefix" readable="1" type="gchar*" writable="1"/>
      <property construct-only="1" name="gnome-libdir" readable="1" type="gchar*" writable="1"/>
      <property construct-only="1" name="gnome-datadir" readable="1" type="gchar*" writable="1"/>
      <property construct-only="1" name="gnome-sysconfdir" readable="1" type="gchar*" writable="1"/>
      <property name="app-prefix" readable="1" type="gchar*" writable="1"/>
      <property name="app-libdir" readable="1" type="gchar*" writable="1"/>
      <property name="app-datadir" readable="1" type="gchar*" writable="1"/>
      <property name="app-sysconfdir" readable="1" type="gchar*" writable="1"/>
      <property construct-only="1" name="create-directories" readable="1" type="gboolean" writable="1"/>
      <property name="enable-sound" readable="1" type="gboolean" writable="1"/>
      <property name="espeaker" readable="1" type="gchar*" writable="1"/>
      <method name="get" symbol="gnome_program_get">
        <return-type type="GnomeProgram*"/>
      </method>
      <method name="get_app_id" symbol="gnome_program_get_app_id">
        <return-type type="const-char*"/>
        <parameters>
          <parameter name="program" type="GnomeProgram*"/>
        </parameters>
      </method>
      <method name="get_app_version" symbol="gnome_program_get_app_version">
        <return-type type="const-char*"/>
        <parameters>
          <parameter name="program" type="GnomeProgram*"/>
        </parameters>
      </method>
      <method name="get_human_readable_name" symbol="gnome_program_get_human_readable_name">
        <return-type type="const-char*"/>
        <parameters>
          <parameter name="program" type="GnomeProgram*"/>
        </parameters>
      </method>
      <method name="get_type" symbol="gnome_program_get_type">
        <return-type type="GType"/>
      </method>
      <method name="init" symbol="gnome_program_init">
        <return-type type="GnomeProgram*"/>
        <parameters>
          <parameter name="app_id" type="const-char*"/>
          <parameter name="app_version" type="const-char*"/>
          <parameter name="module_info" type="const-GnomeModuleInfo*"/>
          <parameter name="argc" type="int"/>
          <parameter name="argv" type="char**"/>
          <parameter name="first_property_name" type="const-char*"/>
        </parameters>
      </method>
      <method name="init_paramv" symbol="gnome_program_init_paramv">
        <return-type type="GnomeProgram*"/>
        <parameters>
          <parameter name="type" type="GType"/>
          <parameter name="app_id" type="const-char*"/>
          <parameter name="app_version" type="const-char*"/>
          <parameter name="module_info" type="const-GnomeModuleInfo*"/>
          <parameter name="argc" type="int"/>
          <parameter name="argv" type="char**"/>
          <parameter name="nparams" type="guint"/>
          <parameter name="params" type="GParameter*"/>
        </parameters>
      </method>
      <method name="initv" symbol="gnome_program_initv">
        <return-type type="GnomeProgram*"/>
        <parameters>
          <parameter name="type" type="GType"/>
          <parameter name="app_id" type="const-char*"/>
          <parameter name="app_version" type="const-char*"/>
          <parameter name="module_info" type="const-GnomeModuleInfo*"/>
          <parameter name="argc" type="int"/>
          <parameter name="argv" type="char**"/>
          <parameter name="first_property_name" type="const-char*"/>
          <parameter name="args" type="va_list"/>
        </parameters>
      </method>
      <method name="install_property" symbol="gnome_program_install_property">
        <return-type type="guint"/>
        <parameters>
          <parameter name="pclass" type="GnomeProgramClass*"/>
          <parameter name="get_fn" type="GObjectGetPropertyFunc"/>
          <parameter name="set_fn" type="GObjectSetPropertyFunc"/>
          <parameter name="pspec" type="GParamSpec*"/>
        </parameters>
      </method>
      <method name="locate_file" symbol="gnome_program_locate_file">
        <return-type type="gchar*"/>
        <parameters>
          <parameter name="program" type="GnomeProgram*"/>
          <parameter name="domain" type="GnomeFileDomain"/>
          <parameter name="file_name" type="const-gchar*"/>
          <parameter name="only_if_exists" type="gboolean"/>
          <parameter name="ret_locations" type="GSList**"/>
        </parameters>
      </method>
      <method name="module_load" symbol="gnome_program_module_load">
        <return-type type="const-GnomeModuleInfo*"/>
        <parameters>
          <parameter name="mod_name" type="const-char*"/>
        </parameters>
      </method>
      <method name="module_register" symbol="gnome_program_module_register">
        <return-type type="void"/>
        <parameters>
          <parameter name="module_info" type="const-GnomeModuleInfo*"/>
        </parameters>
      </method>
      <method name="module_registered" symbol="gnome_program_module_registered">
        <return-type type="gboolean"/>
        <parameters>
          <parameter name="module_info" type="const-GnomeModuleInfo*"/>
        </parameters>
      </method>
      <method deprecated="1" name="parse_args" symbol="gnome_program_parse_args">
        <return-type type="void"/>
        <parameters>
          <parameter name="program" type="GnomeProgram*"/>
        </parameters>
      </method>
      <method deprecated="1" name="postinit" symbol="gnome_program_postinit">
        <return-type type="void"/>
        <parameters>
          <parameter name="program" type="GnomeProgram*"/>
        </parameters>
      </method>
      <method deprecated="1" name="preinit" symbol="gnome_program_preinit">
        <return-type type="poptContext"/>
        <parameters>
          <parameter name="program" type="GnomeProgram*"/>
          <parameter name="app_id" type="const-char*"/>
          <parameter name="app_version" type="const-char*"/>
          <parameter name="argc" type="int"/>
          <parameter name="argv" type="char**"/>
        </parameters>
      </method>
    </object>
    <boxed get-type="" name="GnomeModuleInfo" type-name="GnomeModuleInfo">
      <field name="name" readable="1" type="const-char*" writable="1"/>
      <field name="version" readable="1" type="const-char*" writable="1"/>
      <field name="description" readable="1" type="const-char*" writable="1"/>
      <field name="requirements" readable="1" type="GnomeModuleRequirement*" writable="1"/>
      <field name="instance_init" readable="1" type="GnomeModuleHook" writable="1"/>
      <field name="pre_args_parse" readable="1" type="GnomeModuleHook" writable="1"/>
      <field name="post_args_parse" readable="1" type="GnomeModuleHook" writable="1"/>
      <field name="_options" readable="1" type="void*" writable="1"/>
      <field name="options" readable="1" type="struct-poptOption*" writable="1"/>
      <field name="init_pass" readable="1" type="GnomeModuleInitHook" writable="1"/>
      <field name="class_init" readable="1" type="GnomeModuleClassInitHook" writable="1"/>
      <field name="opt_prefix" readable="1" type="const-char*" writable="1"/>
      <field name="get_goption_group_func" readable="1" type="GnomeModuleGetGOptionGroupFunc" writable="1"/>
      <method name="get_type" symbol="gnome_module_info_get_type">
        <return-type type="GType"/>
      </method>
    </boxed>
    <struct get-type="" name="GnomeModuleRequirement" type-name="GnomeModuleRequirement">
      <field name="required_version" readable="1" type="const-char*" writable="1"/>
      <field name="module_info" readable="1" type="const-GnomeModuleInfo*" writable="1"/>
    </struct>
    <struct get-type="" name="GnomeTrigger" type-name="GnomeTrigger">
      <field name="type" readable="1" type="GnomeTriggerType" writable="1"/>
      <field name="function" readable="1" type="GnomeTriggerActionFunction" writable="1"/>
      <field name="level" readable="1" type="gchar*" writable="1"/>
    </struct>
    <struct get-type="" name="GnomeTriggerList" type-name="GnomeTriggerList">
      <field name="nodename" readable="1" type="char*" writable="1"/>
      <field name="subtrees" readable="1" type="GnomeTriggerList**" writable="1"/>
      <field name="actions" readable="1" type="GnomeTrigger**" writable="1"/>
      <field name="numsubtrees" readable="1" type="gint" writable="1"/>
      <field name="numactions" readable="1" type="gint" writable="1"/>
    </struct>
    <function name="bonobo_module_info_get" symbol="gnome_bonobo_module_info_get">
      <return-type type="const-GnomeModuleInfo*"/>
    </function>
    <struct name="GnomeConfig">
      <method deprecated="1" name="assemble_vector" symbol="gnome_config_assemble_vector">
        <return-type type="char*"/>
        <parameters>
          <parameter name="argc" type="int"/>
          <parameter name="argv" type="const-char*"/>
        </parameters>
      </method>
      <method deprecated="1" name="clean_file_" symbol="gnome_config_clean_file_">
        <return-type type="void"/>
        <parameters>
          <parameter name="path" type="const-char*"/>
          <parameter name="priv" type="gboolean"/>
        </parameters>
      </method>
      <method deprecated="1" name="clean_key_" symbol="gnome_config_clean_key_">
        <return-type type="void"/>
        <parameters>
          <parameter name="path" type="const-char*"/>
          <parameter name="priv" type="gboolean"/>
        </parameters>
      </method>
      <method deprecated="1" name="clean_section_" symbol="gnome_config_clean_section_">
        <return-type type="void"/>
        <parameters>
          <parameter name="path" type="const-char*"/>
          <parameter name="priv" type="gboolean"/>
        </parameters>
      </method>
      <method deprecated="1" name="drop_all" symbol="gnome_config_drop_all">
        <return-type type="void"/>
      </method>
      <method deprecated="1" name="drop_file_" symbol="gnome_config_drop_file_">
        <return-type type="void"/>
        <parameters>
          <parameter name="path" type="const-char*"/>
          <parameter name="priv" type="gboolean"/>
        </parameters>
      </method>
      <method deprecated="1" name="get_bool_with_default_" symbol="gnome_config_get_bool_with_default_">
        <return-type type="gboolean"/>
        <parameters>
          <parameter name="path" type="const-char*"/>
          <parameter name="def" type="gboolean*"/>
          <parameter name="priv" type="gboolean"/>
        </parameters>
      </method>
      <method deprecated="1" name="get_float_with_default_" symbol="gnome_config_get_float_with_default_">
        <return-type type="gdouble"/>
        <parameters>
          <parameter name="path" type="const-char*"/>
          <parameter name="def" type="gboolean*"/>
          <parameter name="priv" type="gboolean"/>
        </parameters>
      </method>
      <method deprecated="1" name="get_int_with_default_" symbol="gnome_config_get_int_with_default_">
        <return-type type="gint"/>
        <parameters>
          <parameter name="path" type="const-char*"/>
          <parameter name="def" type="gboolean*"/>
          <parameter name="priv" type="gboolean"/>
        </parameters>
      </method>
      <method deprecated="1" name="get_string_with_default_" symbol="gnome_config_get_string_with_default_">
        <return-type type="char*"/>
        <parameters>
          <parameter name="path" type="const-char*"/>
          <parameter name="def" type="gboolean*"/>
          <parameter name="priv" type="gboolean"/>
        </parameters>
      </method>
      <method deprecated="1" name="get_translated_string_with_default_" symbol="gnome_config_get_translated_string_with_default_">
        <return-type type="char*"/>
        <parameters>
          <parameter name="path" type="const-char*"/>
          <parameter name="def" type="gboolean*"/>
          <parameter name="priv" type="gboolean"/>
        </parameters>
      </method>
      <method deprecated="1" name="get_vector_with_default_" symbol="gnome_config_get_vector_with_default_">
        <return-type type="void"/>
        <parameters>
          <parameter name="path" type="const-char*"/>
          <parameter name="argcp" type="gint*"/>
          <parameter name="argvp" type="char***"/>
          <parameter name="def" type="gboolean*"/>
          <parameter name="priv" type="gboolean"/>
        </parameters>
      </method>
      <method deprecated="1" name="has_section_" symbol="gnome_config_has_section_">
        <return-type type="gboolean"/>
        <parameters>
          <parameter name="path" type="const-char*"/>
          <parameter name="priv" type="gboolean"/>
        </parameters>
      </method>
      <method deprecated="1" name="init_iterator_" symbol="gnome_config_init_iterator_">
        <return-type type="void*"/>
        <parameters>
          <parameter name="path" type="const-char*"/>
          <parameter name="priv" type="gboolean"/>
        </parameters>
      </method>
      <method deprecated="1" name="init_iterator_sections_" symbol="gnome_config_init_iterator_sections_">
        <return-type type="void*"/>
        <parameters>
          <parameter name="path" type="const-char*"/>
          <parameter name="priv" type="gboolean"/>
        </parameters>
      </method>
      <method deprecated="1" name="iterator_next" symbol="gnome_config_iterator_next">
        <return-type type="void*"/>
        <parameters>
          <parameter name="iterator_handle" type="void*"/>
          <parameter name="key" type="char**"/>
          <parameter name="value" type="char**"/>
        </parameters>
      </method>
      <method deprecated="1" name="make_vector" symbol="gnome_config_make_vector">
        <return-type type="void"/>
        <parameters>
          <parameter name="string" type="const-char*"/>
          <parameter name="argcp" type="int*"/>
          <parameter name="argvp" type="char***"/>
        </parameters>
      </method>
      <method deprecated="1" name="pop_prefix" symbol="gnome_config_pop_prefix">
        <return-type type="void"/>
      </method>
      <method deprecated="1" name="push_prefix" symbol="gnome_config_push_prefix">
        <return-type type="void"/>
        <parameters>
          <parameter name="path" type="const-char*"/>
        </parameters>
      </method>
      <method deprecated="1" name="set_bool_" symbol="gnome_config_set_bool_">
        <return-type type="void"/>
        <parameters>
          <parameter name="path" type="const-char*"/>
          <parameter name="value" type="gboolean"/>
          <parameter name="priv" type="gboolean"/>
        </parameters>
      </method>
      <method deprecated="1" name="set_float_" symbol="gnome_config_set_float_">
        <return-type type="void"/>
        <parameters>
          <parameter name="path" type="const-char*"/>
          <parameter name="value" type="gdouble"/>
          <parameter name="priv" type="gboolean"/>
        </parameters>
      </method>
      <method deprecated="1" name="set_int_" symbol="gnome_config_set_int_">
        <return-type type="void"/>
        <parameters>
          <parameter name="path" type="const-char*"/>
          <parameter name="value" type="int"/>
          <parameter name="priv" type="gboolean"/>
        </parameters>
      </method>
      <method deprecated="1" name="set_set_handler" symbol="gnome_config_set_set_handler">
        <return-type type="void"/>
        <parameters>
          <parameter name="(*func)(void*" type="void"/>
          <parameter name="data" type="void*"/>
        </parameters>
      </method>
      <method deprecated="1" name="set_string_" symbol="gnome_config_set_string_">
        <return-type type="void"/>
        <parameters>
          <parameter name="path" type="const-char*"/>
          <parameter name="value" type="const-char*"/>
          <parameter name="priv" type="gboolean"/>
        </parameters>
      </method>
      <method deprecated="1" name="set_sync_handler" symbol="gnome_config_set_sync_handler">
        <return-type type="void"/>
        <parameters>
          <parameter name="(*func)(void*" type="void"/>
          <parameter name="data" type="void*"/>
        </parameters>
      </method>
      <method deprecated="1" name="set_translated_string_" symbol="gnome_config_set_translated_string_">
        <return-type type="void"/>
        <parameters>
          <parameter name="path" type="const-char*"/>
          <parameter name="value" type="const-char*"/>
          <parameter name="priv" type="gboolean"/>
        </parameters>
      </method>
      <method deprecated="1" name="set_vector_" symbol="gnome_config_set_vector_">
        <return-type type="void"/>
        <parameters>
          <parameter name="path" type="const-char*"/>
          <parameter name="argc" type="int"/>
          <parameter name="argv" type="const-char*[]"/>
          <parameter name="priv" type="gboolean"/>
        </parameters>
      </method>
      <method deprecated="1" name="sync" symbol="gnome_config_sync">
        <return-type type="gboolean"/>
      </method>
      <method deprecated="1" name="sync_file_" symbol="gnome_config_sync_file_">
        <return-type type="gboolean"/>
        <parameters>
          <parameter name="path" type="char*"/>
          <parameter name="priv" type="gboolean"/>
        </parameters>
      </method>
    </struct>
    <function name="execute_async" symbol="gnome_execute_async">
      <return-type type="int"/>
      <parameters>
        <parameter name="dir" type="const-char*"/>
        <parameter name="argc" type="int"/>
        <parameter name="argv" type="char*[]"/>
      </parameters>
    </function>
    <function name="execute_async_fds" symbol="gnome_execute_async_fds">
      <return-type type="int"/>
      <parameters>
        <parameter name="dir" type="const-char*"/>
        <parameter name="argc" type="int"/>
        <parameter name="argv" type="char*[]"/>
        <parameter name="close_fds" type="gboolean"/>
      </parameters>
    </function>
    <function name="execute_async_with_env" symbol="gnome_execute_async_with_env">
      <return-type type="int"/>
      <parameters>
        <parameter name="dir" type="const-char*"/>
        <parameter name="argc" type="int"/>
        <parameter name="argv" type="char*[]"/>
        <parameter name="envc" type="int"/>
        <parameter name="envv" type="char*[]"/>
      </parameters>
    </function>
    <function name="execute_async_with_env_fds" symbol="gnome_execute_async_with_env_fds">
      <return-type type="int"/>
      <parameters>
        <parameter name="dir" type="const-char*"/>
        <parameter name="argc" type="int"/>
        <parameter name="argv" type="char*[]"/>
        <parameter name="envc" type="int"/>
        <parameter name="envv" type="char*[]"/>
        <parameter name="close_fds" type="gboolean"/>
      </parameters>
    </function>
    <function name="execute_shell" symbol="gnome_execute_shell">
      <return-type type="int"/>
      <parameters>
        <parameter name="dir" type="const-char*"/>
        <parameter name="commandline" type="const-char*"/>
      </parameters>
    </function>
    <function name="execute_shell_fds" symbol="gnome_execute_shell_fds">
      <return-type type="int"/>
      <parameters>
        <parameter name="dir" type="const-char*"/>
        <parameter name="commandline" type="const-char*"/>
        <parameter name="close_fds" type="gboolean"/>
      </parameters>
    </function>
    <function name="execute_terminal_shell" symbol="gnome_execute_terminal_shell">
      <return-type type="int"/>
      <parameters>
        <parameter name="dir" type="const-char*"/>
        <parameter name="commandline" type="const-char*"/>
      </parameters>
    </function>
    <function name="execute_terminal_shell_fds" symbol="gnome_execute_terminal_shell_fds">
      <return-type type="int"/>
      <parameters>
        <parameter name="dir" type="const-char*"/>
        <parameter name="commandline" type="const-char*"/>
        <parameter name="close_fds" type="gboolean"/>
      </parameters>
    </function>
    <struct name="GnomeGconf">
      <method name="get_app_settings_relative" symbol="gnome_gconf_get_app_settings_relative">
        <return-type type="gchar*"/>
        <parameters>
          <parameter name="program" type="GnomeProgram*"/>
          <parameter name="subkey" type="const-gchar*"/>
        </parameters>
      </method>
      <method name="get_gnome_libs_settings_relative" symbol="gnome_gconf_get_gnome_libs_settings_relative">
        <return-type type="gchar*"/>
        <parameters>
          <parameter name="subkey" type="const-gchar*"/>
        </parameters>
      </method>
    </struct>
    <struct name="GnomeHelp">
      <method name="display" symbol="gnome_help_display">
        <return-type type="gboolean"/>
        <parameters>
          <parameter name="file_name" type="const-char*"/>
          <parameter name="link_id" type="const-char*"/>
          <parameter name="error" type="GError**"/>
        </parameters>
      </method>
      <method name="display_desktop" symbol="gnome_help_display_desktop">
        <return-type type="gboolean"/>
        <parameters>
          <parameter name="program" type="GnomeProgram*"/>
          <parameter name="doc_id" type="const-char*"/>
          <parameter name="file_name" type="const-char*"/>
          <parameter name="link_id" type="const-char*"/>
          <parameter name="error" type="GError**"/>
        </parameters>
      </method>
      <method name="display_desktop_with_env" symbol="gnome_help_display_desktop_with_env">
        <return-type type="gboolean"/>
        <parameters>
          <parameter name="program" type="GnomeProgram*"/>
          <parameter name="doc_id" type="const-char*"/>
          <parameter name="file_name" type="const-char*"/>
          <parameter name="link_id" type="const-char*"/>
          <parameter name="envp" type="char**"/>
          <parameter name="error" type="GError**"/>
        </parameters>
      </method>
      <method name="display_uri" symbol="gnome_help_display_uri">
        <return-type type="gboolean"/>
        <parameters>
          <parameter name="help_uri" type="const-char*"/>
          <parameter name="error" type="GError**"/>
        </parameters>
      </method>
      <method name="display_uri_with_env" symbol="gnome_help_display_uri_with_env">
        <return-type type="gboolean"/>
        <parameters>
          <parameter name="help_uri" type="const-char*"/>
          <parameter name="envp" type="char**"/>
          <parameter name="error" type="GError**"/>
        </parameters>
      </method>
      <method name="display_with_doc_id" symbol="gnome_help_display_with_doc_id">
        <return-type type="gboolean"/>
        <parameters>
          <parameter name="program" type="GnomeProgram*"/>
          <parameter name="doc_id" type="const-char*"/>
          <parameter name="file_name" type="const-char*"/>
          <parameter name="link_id" type="const-char*"/>
          <parameter name="error" type="GError**"/>
        </parameters>
      </method>
      <method name="display_with_doc_id_and_env" symbol="gnome_help_display_with_doc_id_and_env">
        <return-type type="gboolean"/>
        <parameters>
          <parameter name="program" type="GnomeProgram*"/>
          <parameter name="doc_id" type="const-char*"/>
          <parameter name="file_name" type="const-char*"/>
          <parameter name="link_id" type="const-char*"/>
          <parameter name="envp" type="char**"/>
          <parameter name="error" type="GError**"/>
        </parameters>
      </method>
      <method name="error_quark" symbol="gnome_help_error_quark">
        <return-type type="GQuark"/>
      </method>
    </struct>
    <function name="prepend_terminal_to_vector" symbol="gnome_prepend_terminal_to_vector">
      <return-type type="void"/>
      <parameters>
        <parameter name="argc" type="int*"/>
        <parameter name="argv" type="char***"/>
      </parameters>
    </function>
    <struct name="GnomeScore">
      <method deprecated="1" name="get_notable" symbol="gnome_score_get_notable">
        <return-type type="gint"/>
        <parameters>
          <parameter name="gamename" type="const-gchar*"/>
          <parameter name="level" type="const-gchar*"/>
          <parameter name="names" type="gchar***"/>
          <parameter name="scores" type="gfloat**"/>
          <parameter name="scoretimes" type="time_t**"/>
        </parameters>
      </method>
      <method deprecated="1" name="init" symbol="gnome_score_init">
        <return-type type="gint"/>
        <parameters>
          <parameter name="gamename" type="const-gchar*"/>
        </parameters>
      </method>
      <method deprecated="1" name="log" symbol="gnome_score_log">
        <return-type type="gint"/>
        <parameters>
          <parameter name="score" type="gfloat"/>
          <parameter name="level" type="const-gchar*"/>
          <parameter name="Pass" type="/*"/>
        </parameters>
      </method>
    </struct>
    <struct name="GnomeSound">
      <method name="connection_get" symbol="gnome_sound_connection_get">
        <return-type type="int"/>
      </method>
      <method name="init" symbol="gnome_sound_init">
        <return-type type="void"/>
        <parameters>
          <parameter name="hostname" type="const-char*"/>
        </parameters>
      </method>
      <method name="play" symbol="gnome_sound_play">
        <return-type type="void"/>
        <parameters>
          <parameter name="filename" type="const-char*"/>
        </parameters>
      </method>
      <method name="sample_load" symbol="gnome_sound_sample_load">
        <return-type type="int"/>
        <parameters>
          <parameter name="sample_name" type="const-char*"/>
          <parameter name="filename" type="const-char*"/>
        </parameters>
      </method>
      <method name="shutdown" symbol="gnome_sound_shutdown">
        <return-type type="void"/>
      </method>
    </struct>
    <struct name="GnomeTriggers">
      <method name="add_trigger" symbol="gnome_triggers_add_trigger">
        <return-type type="void"/>
        <parameters>
          <parameter name="nt" type="GnomeTrigger*"/>
        </parameters>
      </method>
      <method name="do" symbol="gnome_triggers_do">
        <return-type type="void"/>
        <parameters>
          <parameter name="msg" type="const-char*"/>
          <parameter name="level" type="const-char*"/>
        </parameters>
      </method>
      <method name="vadd_trigger" symbol="gnome_triggers_vadd_trigger">
        <return-type type="void"/>
        <parameters>
          <parameter name="nt" type="GnomeTrigger*"/>
          <parameter name="supinfo" type="char*[]"/>
        </parameters>
      </method>
      <method name="vdo" symbol="gnome_triggers_vdo">
        <return-type type="void"/>
        <parameters>
          <parameter name="msg" type="const-char*"/>
          <parameter name="level" type="const-char*"/>
          <parameter name="supinfo" type="const-char*[]"/>
        </parameters>
      </method>
    </struct>
    <struct name="GnomeUrl">
      <method name="error_quark" symbol="gnome_url_error_quark">
        <return-type type="GQuark"/>
      </method>
      <method name="show" symbol="gnome_url_show">
        <return-type type="gboolean"/>
        <parameters>
          <parameter name="url" type="const-char*"/>
          <parameter name="error" type="GError**"/>
        </parameters>
      </method>
      <method name="show_with_env" symbol="gnome_url_show_with_env">
        <return-type type="gboolean"/>
        <parameters>
          <parameter name="url" type="const-char*"/>
          <parameter name="envp" type="char**"/>
          <parameter name="error" type="GError**"/>
        </parameters>
      </method>
    </struct>
    <struct name="GnomeUser">
      <method name="accels_dir_get" symbol="gnome_user_accels_dir_get">
        <return-type type="const-char*"/>
      </method>
      <method name="dir_get" symbol="gnome_user_dir_get">
        <return-type type="const-char*"/>
      </method>
      <method name="private_dir_get" symbol="gnome_user_private_dir_get">
        <return-type type="const-char*"/>
      </method>
    </struct>
    <function name="util_user_shell" symbol="gnome_util_user_shell">
      <return-type type="char*"/>
    </function>
  </namespace>
</api>
