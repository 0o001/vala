/* gio-unix-2.0.vapi generated by lt-vapigen, do not modify. */

[CCode (cprefix = "G", lower_case_cprefix = "g_")]
namespace GLib {
	[CCode (cheader_filename = "gio/gdesktopappinfo.h")]
	public class DesktopAppInfo : GLib.Object, GLib.AppInfo {
		[CCode (has_construct_function = false)]
		public DesktopAppInfo.from_filename (string filename);
		public bool get_is_hidden ();
		[CCode (has_construct_function = false)]
		public DesktopAppInfo (string desktop_id);
		public static void set_desktop_env (string desktop_env);
	}
	[CCode (cheader_filename = "gio/gunixinputstream.h")]
	public class UnixInputStream : GLib.InputStream {
		[CCode (type = "GInputStream*", has_construct_function = false)]
		public UnixInputStream (int fd, bool close_fd_at_close);
	}
	[Compact]
	[CCode (cheader_filename = "gio/gunixmounts.h")]
	public class UnixMountEntry {
	}
	[CCode (cheader_filename = "gio/gunixmounts.h")]
	public class UnixMountMonitor : GLib.Object {
		[CCode (has_construct_function = false)]
		public UnixMountMonitor ();
		public void set_rate_limit (int limit_msec);
		public virtual signal void mountpoints_changed ();
		public virtual signal void mounts_changed ();
	}
	[Compact]
	[CCode (cheader_filename = "gio/gunixmounts.h")]
	public class UnixMountMonitorClass {
	}
	[Compact]
	[CCode (cheader_filename = "gio/gunixmounts.h")]
	public class UnixMountPoint {
		public int compare (GLib.UnixMountPoint mount2);
		public unowned string get_device_path ();
		public unowned string get_fs_type ();
		public unowned string get_mount_path ();
		public bool guess_can_eject ();
		public unowned GLib.Icon guess_icon ();
		public unowned string guess_name ();
		public bool is_loopback ();
		public bool is_readonly ();
		public bool is_user_mountable ();
	}
	[CCode (cheader_filename = "gio/gunixoutputstream.h")]
	public class UnixOutputStream : GLib.OutputStream {
		[CCode (type = "GOutputStream*", has_construct_function = false)]
		public UnixOutputStream (int fd, bool close_fd_at_close);
	}
	[CCode (cheader_filename = "gio/gunixmounts.h")]
	public interface DesktopAppInfoLookup : GLib.Object {
		public abstract unowned GLib.AppInfo get_default_for_uri_scheme (string uri_scheme);
	}
	[CCode (cheader_filename = "gio/gunixmounts.h")]
	public const string DESKTOP_APP_INFO_LOOKUP_EXTENSION_POINT_NAME;
	[CCode (cname = "g_unix_is_mount_path_system_internal", cheader_filename = "gio/gunixmounts.h")]
	public static bool g_unix_is_mount_path_system_internal (string mount_path);
	[CCode (cname = "g_unix_mount_at", cheader_filename = "gio/gunixmounts.h")]
	public static unowned GLib.UnixMountEntry g_unix_mount_at (string mount_path, uint64 time_read);
	[CCode (cname = "g_unix_mount_compare", cheader_filename = "gio/gunixmounts.h")]
	public static int g_unix_mount_compare (GLib.UnixMountEntry mount1, GLib.UnixMountEntry mount2);
	[CCode (cname = "g_unix_mount_free", cheader_filename = "gio/gunixmounts.h")]
	public static void g_unix_mount_free (GLib.UnixMountEntry mount_entry);
	[CCode (cname = "g_unix_mount_get_device_path", cheader_filename = "gio/gunixmounts.h")]
	public static unowned string g_unix_mount_get_device_path (GLib.UnixMountEntry mount_entry);
	[CCode (cname = "g_unix_mount_get_fs_type", cheader_filename = "gio/gunixmounts.h")]
	public static unowned string g_unix_mount_get_fs_type (GLib.UnixMountEntry mount_entry);
	[CCode (cname = "g_unix_mount_get_mount_path", cheader_filename = "gio/gunixmounts.h")]
	public static unowned string g_unix_mount_get_mount_path (GLib.UnixMountEntry mount_entry);
	[CCode (cname = "g_unix_mount_guess_can_eject", cheader_filename = "gio/gunixmounts.h")]
	public static bool g_unix_mount_guess_can_eject (GLib.UnixMountEntry mount_entry);
	[CCode (cname = "g_unix_mount_guess_icon", cheader_filename = "gio/gunixmounts.h")]
	public static unowned GLib.Icon g_unix_mount_guess_icon (GLib.UnixMountEntry mount_entry);
	[CCode (cname = "g_unix_mount_guess_name", cheader_filename = "gio/gunixmounts.h")]
	public static unowned string g_unix_mount_guess_name (GLib.UnixMountEntry mount_entry);
	[CCode (cname = "g_unix_mount_guess_should_display", cheader_filename = "gio/gunixmounts.h")]
	public static bool g_unix_mount_guess_should_display (GLib.UnixMountEntry mount_entry);
	[CCode (cname = "g_unix_mount_is_readonly", cheader_filename = "gio/gunixmounts.h")]
	public static bool g_unix_mount_is_readonly (GLib.UnixMountEntry mount_entry);
	[CCode (cname = "g_unix_mount_is_system_internal", cheader_filename = "gio/gunixmounts.h")]
	public static bool g_unix_mount_is_system_internal (GLib.UnixMountEntry mount_entry);
	[CCode (cname = "g_unix_mount_points_changed_since", cheader_filename = "gio/gunixmounts.h")]
	public static bool g_unix_mount_points_changed_since (uint64 time);
	[CCode (cname = "g_unix_mount_points_get", cheader_filename = "gio/gunixmounts.h")]
	public static unowned GLib.List g_unix_mount_points_get (uint64 time_read);
	[CCode (cname = "g_unix_mounts_changed_since", cheader_filename = "gio/gunixmounts.h")]
	public static bool g_unix_mounts_changed_since (uint64 time);
	[CCode (cname = "g_unix_mounts_get", cheader_filename = "gio/gunixmounts.h")]
	public static unowned GLib.List g_unix_mounts_get (uint64 time_read);
}
