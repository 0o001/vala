/* gobject-2.0.vapi generated by vapigen, do not modify. */

[CCode (cprefix = "G", gir_namespace = "GObject", gir_version = "2.0", lower_case_cprefix = "g_")]
namespace GLib {
	namespace SignalHandler {
		[CCode (cheader_filename = "glib-object.h")]
		public static void block (GLib.Object instance, ulong handler_id);
		[CCode (cheader_filename = "glib-object.h", cname = "g_signal_handlers_block_matched")]
		public static uint block_matched (GLib.Object instance, GLib.SignalMatchType mask, uint signal_id, GLib.Quark detail, void* func, [CCode (delegate_target_pos = 4.5)] void* data);
		[CCode (cheader_filename = "glib-object.h", cname = "g_signal_handlers_destroy")]
		public static void destroy (GLib.Object instance);
		[CCode (cheader_filename = "glib-object.h")]
		public static void disconnect (GLib.Object instance, ulong handler_id);
		[CCode (cheader_filename = "glib-object.h", cname = "g_signal_handlers_disconnect_matched")]
		public static uint disconnect_matched (GLib.Object instance, GLib.SignalMatchType mask, uint signal_id, GLib.Quark detail, void* func, [CCode (delegate_target_pos = 4.5)] void* data);
		[CCode (cheader_filename = "glib-object.h")]
		public static ulong find (GLib.Object instance, GLib.SignalMatchType mask, uint signal_id, GLib.Quark detail, void* func, [CCode (delegate_target_pos = 4.5)] void* data);
		[CCode (cheader_filename = "glib-object.h")]
		public static bool is_connected (GLib.Object instance, ulong handler_id);
		[CCode (cheader_filename = "glib-object.h")]
		public static void unblock (GLib.Object instance, ulong handler_id);
		[CCode (cheader_filename = "glib-object.h", cname = "g_signal_handlers_unblock_matched")]
		public static uint unblock_matched (GLib.Object instance, GLib.SignalMatchType mask, uint signal_id, GLib.Quark detail, void* func, [CCode (delegate_target_pos = 4.5)] void* data);
	}
	[CCode (cheader_filename = "glib-object.h", type_id = "g_binding_get_type ()")]
	[Version (since = "2.26")]
	public class Binding : GLib.Object {
		[CCode (has_construct_function = false)]
		protected Binding ();
		[Version (since = "2.68")]
		public GLib.Object? dup_source ();
		[Version (since = "2.68")]
		public GLib.Object? dup_target ();
		public GLib.BindingFlags get_flags ();
		[Version (deprecated = true, deprecated_since = "2.68", since = "2.26")]
		public unowned GLib.Object? get_source ();
		public unowned string get_source_property ();
		[Version (deprecated = true, deprecated_since = "2.68", since = "2.26")]
		public unowned GLib.Object? get_target ();
		public unowned string get_target_property ();
		[DestroysInstance]
		[Version (since = "2.38")]
		public void unbind ();
		public GLib.BindingFlags flags { get; construct; }
		public GLib.Object source { get; construct; }
		public string source_property { get; construct; }
		public GLib.Object target { get; construct; }
		public string target_property { get; construct; }
	}
	[CCode (cheader_filename = "glib-object.h", ref_function = "g_closure_ref", type_id = "g_closure_get_type ()", unref_function = "g_closure_unref")]
	[Compact]
	public class Closure {
		public void* data;
		public uint derivative_flag;
		public uint floating;
		public uint in_inotify;
		public uint in_marshal;
		public uint is_invalid;
		public weak GLib.ClosureMarshalFunc marshal;
		public uint meta_marshal_nouse;
		public uint n_fnotifiers;
		public uint n_guards;
		public uint n_inotifiers;
		public GLib.ClosureNotifyData notifiers;
		public uint ref_count;
		public void add_finalize_notifier (void* notify_data);
		public void add_invalidate_notifier (void* notify_data);
		public void add_marshal_guards (void* pre_marshal_data);
		public void invalidate ();
		public void invoke (ref GLib.Value return_value, [CCode (array_length_cname = "n_param_values", array_length_pos = 1.5, array_length_type = "guint")] GLib.Value[] param_values, void* invocation_hint = null);
		[CCode (has_construct_function = false)]
		public Closure.object (uint sizeof_closure, GLib.Object object);
		public unowned GLib.Closure @ref ();
		public void remove_finalize_notifier (void* notify_data, GLib.ClosureNotify notify_func);
		public void remove_invalidate_notifier (void* notify_data, GLib.ClosureNotify notify_func);
		public void set_marshal (GLib.ClosureMarshal marshal);
		public void set_meta_marshal (void* marshal_data);
		[CCode (has_construct_function = false)]
		public Closure.simple (uint sizeof_closure, void* data);
		public void sink ();
		public void unref ();
	}
	[CCode (cheader_filename = "glib-object.h", has_type_id = false, lower_case_csuffix = "enum")]
	[Compact]
	public class EnumClass : GLib.TypeClass {
		public weak GLib.TypeClass g_type_class;
		public int maximum;
		public int minimum;
		public uint n_values;
		[CCode (array_length_cname = "n_values", array_length_type = "guint")]
		public weak GLib.EnumValue[] values;
		public static void complete_type_info (GLib.Type g_enum_type, out GLib.TypeInfo info, [CCode (array_length = false, type = "const GEnumValue*")] GLib.EnumValue[] const_values);
		public unowned GLib.EnumValue? get_value (int value);
		public unowned GLib.EnumValue? get_value_by_name (string name);
		public unowned GLib.EnumValue? get_value_by_nick (string nick);
		public static GLib.Type register_static (string name, [CCode (array_length = false, type = "const GEnumValue*")] GLib.EnumValue[] const_static_values);
		[Version (since = "2.54")]
		public static string to_string (GLib.Type g_enum_type, int value);
	}
	[CCode (cheader_filename = "glib-object.h", has_type_id = false, lower_case_csuffix = "flags")]
	[Compact]
	public class FlagsClass : GLib.TypeClass {
		public weak GLib.TypeClass g_type_class;
		public uint mask;
		public uint n_values;
		[CCode (array_length_cname = "n_values", array_length_type = "guint")]
		public weak GLib.FlagsValue[] values;
		public static void complete_type_info (GLib.Type g_flags_type, out GLib.TypeInfo info, [CCode (array_length = false, type = "const GFlagsValue*")] GLib.FlagsValue[] const_values);
		public unowned GLib.FlagsValue? get_first_value (uint value);
		public unowned GLib.FlagsValue? get_value_by_name (string name);
		public unowned GLib.FlagsValue? get_value_by_nick (string nick);
		public static GLib.Type register_static (string name, [CCode (array_length = false, type = "const GFlagsValue*")] GLib.FlagsValue[] const_static_values);
		[Version (since = "2.54")]
		public static string to_string (GLib.Type flags_type, uint value);
	}
	[CCode (cheader_filename = "glib-object.h", type_id = "g_initially_unowned_get_type ()")]
	public class InitiallyUnowned : GLib.Object {
		public GLib.Datalist qdata;
		public uint ref_count;
		[CCode (has_construct_function = false)]
		protected InitiallyUnowned ();
	}
	[CCode (cheader_filename = "glib-object.h", get_value_function = "g_value_get_object", marshaller_type_name = "OBJECT", param_spec_function = "g_param_spec_object", ref_function = "g_object_ref", set_value_function = "g_value_set_object", take_value_function = "g_value_take_object", type_id = "g_object_get_type ()", unref_function = "g_object_unref")]
	public class Object {
		public GLib.TypeInstance g_type_instance;
		public GLib.Datalist qdata;
		public uint ref_count;
		[CCode (has_construct_function = false, type = "gpointer")]
		public Object (GLib.Type object_type, ...);
		[Version (since = "2.8")]
		public void add_toggle_ref (GLib.ToggleNotify notify);
		public void add_weak_pointer (ref void* weak_pointer_location);
		[Version (since = "2.26")]
		public unowned GLib.Binding bind_property (string source_property, GLib.Object target, string target_property, GLib.BindingFlags flags);
		[Version (since = "2.26")]
		public unowned GLib.Binding bind_property_full (string source_property, GLib.Object target, string target_property, GLib.BindingFlags flags, GLib.BindingTransformFunc? transform_to, owned GLib.BindingTransformFunc? transform_from);
		[Version (since = "2.26")]
		public unowned GLib.Binding bind_property_with_closures (string source_property, GLib.Object target, string target_property, GLib.BindingFlags flags, GLib.Closure transform_to, GLib.Closure transform_from);
		public static size_t compat_control (size_t what, void* data);
		public unowned GLib.Object connect (string signal_spec, ...);
		[NoWrapper]
		public virtual void constructed ();
		public void disconnect (string signal_spec, ...);
		[CCode (cname = "g_object_run_dispose")]
		public void dispose ();
		[Version (since = "2.34")]
		public void* dup_data (string key, GLib.DuplicateFunc? dup_func);
		[Version (since = "2.34")]
		public void* dup_qdata (GLib.Quark quark, GLib.DuplicateFunc? dup_func);
		[CCode (cname = "g_object_class_find_property")]
		public class unowned GLib.ParamSpec find_property (string property_name);
		[Version (since = "2.10")]
		public void force_floating ();
		public void freeze_notify ();
		public void @get (...);
		public void* get_data (string key);
		public void get_property (string property_name, GLib.Value value);
		public void* get_qdata (GLib.Quark quark);
		public void get_valist (string first_property_name, va_list var_args);
		[Version (since = "2.54")]
		public void getv ([CCode (array_length_cname = "n_properties", array_length_pos = 0.5, array_length_type = "guint")] string[] names, [CCode (array_length_cname = "n_properties", array_length_pos = 0.5, array_length_type = "guint")] GLib.Value[] values);
		[CCode (cname = "g_object_class_install_properties")]
		[Version (since = "2.26")]
		public class void install_properties ([CCode (array_length_cname = "n_pspecs", array_length_pos = 0.5, array_length_type = "guint")] GLib.ParamSpec[] pspecs);
		[CCode (cname = "g_object_class_install_property")]
		public class void install_property (uint property_id, GLib.ParamSpec pspec);
		[Version (since = "2.4")]
		public static unowned GLib.ParamSpec interface_find_property (GLib.TypeInterface g_iface, string property_name);
		[Version (since = "2.4")]
		public static void interface_install_property (GLib.TypeInterface g_iface, GLib.ParamSpec pspec);
		[CCode (array_length_pos = 1.1, array_length_type = "guint")]
		[Version (since = "2.4")]
		public static (unowned GLib.ParamSpec)[] interface_list_properties (GLib.TypeInterface g_iface);
		[Version (since = "2.10")]
		public bool is_floating ();
		[CCode (array_length_pos = 0.1, array_length_type = "guint", cname = "g_object_class_list_properties")]
		public class (unowned GLib.ParamSpec)[] list_properties ();
		[CCode (cname = "g_object_newv", has_construct_function = false, type = "gpointer")]
		[Version (deprecated = true, deprecated_since = "2.54")]
		public Object.newv (GLib.Type object_type, [CCode (array_length_cname = "n_parameters", array_length_pos = 1.5, array_length_type = "guint")] GLib.Parameter[] parameters);
		[Version (since = "2.26")]
		public void notify_by_pspec (GLib.ParamSpec pspec);
		[CCode (cname = "g_object_class_override_property")]
		[Version (since = "2.4")]
		public class void override_property (uint property_id, string name);
		public unowned GLib.Object @ref ();
		[Version (since = "2.10")]
		public unowned GLib.Object ref_sink ();
		[Version (since = "2.8")]
		public void remove_toggle_ref (GLib.ToggleNotify notify);
		public void remove_weak_pointer (ref void* weak_pointer_location);
		[Version (since = "2.34")]
		public bool replace_data (string key, void* oldval, void* newval, GLib.DestroyNotify? destroy, out unowned GLib.DestroyNotify old_destroy);
		[Version (since = "2.34")]
		public bool replace_qdata (GLib.Quark quark, void* oldval, void* newval, GLib.DestroyNotify? destroy, out unowned GLib.DestroyNotify old_destroy);
		public void @set (...);
		public void set_data (string key, void* data);
		public void set_data_full (string key, void* data, GLib.DestroyNotify? destroy);
		public void set_property (string property_name, GLib.Value value);
		public void set_qdata (GLib.Quark quark, void* data);
		public void set_qdata_full (GLib.Quark quark, void* data, GLib.DestroyNotify? destroy);
		public void set_valist (string first_property_name, va_list var_args);
		[Version (since = "2.54")]
		public void setv ([CCode (array_length_cname = "n_properties", array_length_pos = 0.5, array_length_type = "guint")] string[] names, [CCode (array_length_cname = "n_properties", array_length_pos = 0.5, array_length_type = "guint")] GLib.Value[] values);
		public void* steal_data (string key);
		public void* steal_qdata (GLib.Quark quark);
		public void thaw_notify ();
		public void unref ();
		[CCode (has_construct_function = false)]
		public Object.valist (GLib.Type object_type, string first_property_name, va_list var_args);
		public void watch_closure (GLib.Closure closure);
		public void weak_ref (GLib.WeakNotify notify);
		public void weak_unref (GLib.WeakNotify notify);
		[CCode (has_construct_function = false)]
		[Version (since = "2.54")]
		public Object.with_properties (GLib.Type object_type, [CCode (array_length_cname = "n_properties", array_length_pos = 1.5, array_length_type = "guint")] string[] names, [CCode (array_length_cname = "n_properties", array_length_pos = 1.5, array_length_type = "guint")] GLib.Value[] values);
		[HasEmitter]
		public virtual signal void notify (GLib.ParamSpec pspec);
	}
	[CCode (cheader_filename = "glib-object.h", get_value_function = "g_value_get_param", param_spec_function = "g_param_spec_param", ref_function = "g_param_spec_ref", set_value_function = "g_value_set_param", take_value_function = "g_value_take_param", type_id = "G_TYPE_PARAM", unref_function = "g_param_spec_unref")]
	public class ParamSpec {
		public weak string _blurb;
		public weak string _nick;
		public GLib.ParamFlags flags;
		public GLib.TypeInstance g_type_instance;
		public weak string name;
		public GLib.Type owner_type;
		public uint param_id;
		public GLib.Datalist qdata;
		public uint ref_count;
		public GLib.Type value_type;
		[CCode (has_construct_function = false)]
		protected ParamSpec ();
		[NoWrapper]
		public virtual void finalize ();
		public unowned string? get_blurb ();
		[Version (since = "2.38")]
		public unowned GLib.Value? get_default_value ();
		public unowned string get_name ();
		[Version (since = "2.46")]
		public GLib.Quark get_name_quark ();
		public unowned string get_nick ();
		public void* get_qdata (GLib.Quark quark);
		[Version (since = "2.4")]
		public unowned GLib.ParamSpec? get_redirect_target ();
		public static unowned GLib.ParamSpec @internal (GLib.Type param_type, string name, string nick, string blurb, GLib.ParamFlags flags);
		[Version (since = "2.66")]
		public static bool is_valid_name (string name);
		[CCode (cname = "g_param_value_convert")]
		public bool param_value_convert (GLib.Value src_value, GLib.Value dest_value, bool strict_validation);
		[CCode (cname = "g_param_value_defaults")]
		public bool param_value_defaults (GLib.Value value);
		[CCode (cname = "g_param_value_set_default")]
		public void param_value_set_default (GLib.Value value);
		[CCode (cname = "g_param_value_validate")]
		public bool param_value_validate (GLib.Value value);
		[CCode (cname = "g_param_values_cmp")]
		public int param_values_cmp (GLib.Value value1, GLib.Value value2);
		public GLib.ParamSpec @ref ();
		[Version (since = "2.10")]
		public GLib.ParamSpec ref_sink ();
		public void set_qdata (GLib.Quark quark, void* data);
		public void set_qdata_full (GLib.Quark quark, void* data, GLib.DestroyNotify? destroy);
		public void sink ();
		public void* steal_qdata (GLib.Quark quark);
		public void unref ();
		[NoWrapper]
		public virtual void value_set_default (GLib.Value value);
		[NoWrapper]
		public virtual bool value_validate (GLib.Value value);
		[NoWrapper]
		public virtual int values_cmp (GLib.Value value1, GLib.Value value2);
	}
	[CCode (cheader_filename = "glib-object.h", type_id = "G_TYPE_PARAM_BOOLEAN")]
	public class ParamSpecBoolean : GLib.ParamSpec {
		public bool default_value;
		[CCode (cname = "g_param_spec_boolean", has_construct_function = false, type = "GParamSpec*")]
		public ParamSpecBoolean (string name, string nick, string blurb, bool default_value, GLib.ParamFlags flags);
	}
	[CCode (cheader_filename = "glib-object.h", type_id = "G_TYPE_PARAM_BOXED")]
	public class ParamSpecBoxed : GLib.ParamSpec {
		[CCode (cname = "g_param_spec_boxed", has_construct_function = false, type = "GParamSpec*")]
		public ParamSpecBoxed (string name, string nick, string blurb, GLib.Type boxed_type, GLib.ParamFlags flags);
	}
	[CCode (cheader_filename = "glib-object.h", type_id = "G_TYPE_PARAM_CHAR")]
	public class ParamSpecChar : GLib.ParamSpec {
		public int8 default_value;
		public int8 maximum;
		public int8 minimum;
		[CCode (cname = "g_param_spec_char", has_construct_function = false, type = "GParamSpec*")]
		public ParamSpecChar (string name, string nick, string blurb, int8 minimum, int8 maximum, int8 default_value, GLib.ParamFlags flags);
	}
	[CCode (cheader_filename = "glib-object.h", type_id = "G_TYPE_PARAM_DOUBLE")]
	public class ParamSpecDouble : GLib.ParamSpec {
		public double default_value;
		public double epsilon;
		public double maximum;
		public double minimum;
		[CCode (cname = "g_param_spec_double", has_construct_function = false, type = "GParamSpec*")]
		public ParamSpecDouble (string name, string nick, string blurb, double minimum, double maximum, double default_value, GLib.ParamFlags flags);
	}
	[CCode (cheader_filename = "glib-object.h", type_id = "G_TYPE_PARAM_ENUM")]
	public class ParamSpecEnum : GLib.ParamSpec {
		public int default_value;
		public weak GLib.EnumClass enum_class;
		[CCode (cname = "g_param_spec_enum", has_construct_function = false, type = "GParamSpec*")]
		public ParamSpecEnum (string name, string nick, string blurb, GLib.Type enum_type, int default_value, GLib.ParamFlags flags);
	}
	[CCode (cheader_filename = "glib-object.h", type_id = "G_TYPE_PARAM_FLAGS")]
	public class ParamSpecFlags : GLib.ParamSpec {
		public uint default_value;
		public weak GLib.FlagsClass flags_class;
		[CCode (cname = "g_param_spec_flags", has_construct_function = false, type = "GParamSpec*")]
		public ParamSpecFlags (string name, string nick, string blurb, GLib.Type flags_type, uint default_value, GLib.ParamFlags flags);
	}
	[CCode (cheader_filename = "glib-object.h", type_id = "G_TYPE_PARAM_FLOAT")]
	public class ParamSpecFloat : GLib.ParamSpec {
		public float default_value;
		public float epsilon;
		public float maximum;
		public float minimum;
		[CCode (cname = "g_param_spec_float", has_construct_function = false, type = "GParamSpec*")]
		public ParamSpecFloat (string name, string nick, string blurb, float minimum, float maximum, float default_value, GLib.ParamFlags flags);
	}
	[CCode (cheader_filename = "glib-object.h", type_id = "G_TYPE_PARAM_GTYPE")]
	[Version (since = "2.10")]
	public class ParamSpecGType : GLib.ParamSpec {
		public GLib.Type is_a_type;
		[CCode (cname = "g_param_spec_gtype", has_construct_function = false, type = "GParamSpec*")]
		public ParamSpecGType (string name, string nick, string blurb, GLib.Type is_a_type, GLib.ParamFlags flags);
	}
	[CCode (cheader_filename = "glib-object.h", type_id = "G_TYPE_PARAM_INT")]
	public class ParamSpecInt : GLib.ParamSpec {
		public int default_value;
		public int maximum;
		public int minimum;
		[CCode (cname = "g_param_spec_int", has_construct_function = false, type = "GParamSpec*")]
		public ParamSpecInt (string name, string nick, string blurb, int minimum, int maximum, int default_value, GLib.ParamFlags flags);
	}
	[CCode (cheader_filename = "glib-object.h", type_id = "G_TYPE_PARAM_INT64")]
	public class ParamSpecInt64 : GLib.ParamSpec {
		public int64 default_value;
		public int64 maximum;
		public int64 minimum;
		[CCode (cname = "g_param_spec_int64", has_construct_function = false, type = "GParamSpec*")]
		public ParamSpecInt64 (string name, string nick, string blurb, int64 minimum, int64 maximum, int64 default_value, GLib.ParamFlags flags);
	}
	[CCode (cheader_filename = "glib-object.h", type_id = "G_TYPE_PARAM_LONG")]
	public class ParamSpecLong : GLib.ParamSpec {
		public long default_value;
		public long maximum;
		public long minimum;
		[CCode (cname = "g_param_spec_long", has_construct_function = false, type = "GParamSpec*")]
		public ParamSpecLong (string name, string nick, string blurb, long minimum, long maximum, long default_value, GLib.ParamFlags flags);
	}
	[CCode (cheader_filename = "glib-object.h", type_id = "G_TYPE_PARAM_OBJECT")]
	public class ParamSpecObject : GLib.ParamSpec {
		[CCode (cname = "g_param_spec_object", has_construct_function = false, type = "GParamSpec*")]
		public ParamSpecObject (string name, string nick, string blurb, GLib.Type object_type, GLib.ParamFlags flags);
	}
	[CCode (cheader_filename = "glib-object.h", type_id = "G_TYPE_PARAM_OVERRIDE")]
	[Version (since = "2.4")]
	public class ParamSpecOverride : GLib.ParamSpec {
		public weak GLib.ParamSpec overridden;
		[CCode (cname = "g_param_spec_override", has_construct_function = false, type = "GParamSpec*")]
		public ParamSpecOverride (string name, GLib.ParamSpec overridden);
	}
	[CCode (cheader_filename = "glib-object.h", type_id = "G_TYPE_PARAM_PARAM")]
	public class ParamSpecParam : GLib.ParamSpec {
		[CCode (cname = "g_param_spec_param", has_construct_function = false, type = "GParamSpec*")]
		public ParamSpecParam (string name, string nick, string blurb, GLib.Type param_type, GLib.ParamFlags flags);
	}
	[CCode (cheader_filename = "glib-object.h", type_id = "G_TYPE_PARAM_POINTER")]
	public class ParamSpecPointer : GLib.ParamSpec {
		[CCode (cname = "g_param_spec_pointer", has_construct_function = false, type = "GParamSpec*")]
		public ParamSpecPointer (string name, string nick, string blurb, GLib.ParamFlags flags);
	}
	[CCode (cheader_filename = "glib-object.h", has_type_id = false)]
	[Compact]
	public class ParamSpecPool {
		public void insert (GLib.ParamSpec pspec, GLib.Type owner_type);
		[CCode (array_length_pos = 1.1, array_length_type = "guint")]
		public (unowned GLib.ParamSpec)[] list (GLib.Type owner_type);
		public GLib.List<weak GLib.ParamSpec> list_owned (GLib.Type owner_type);
		public unowned GLib.ParamSpec? lookup (string param_name, GLib.Type owner_type, bool walk_ancestors);
		public void remove (GLib.ParamSpec pspec);
	}
	[CCode (cheader_filename = "glib-object.h", type_id = "G_TYPE_PARAM_STRING")]
	public class ParamSpecString : GLib.ParamSpec {
		public weak string cset_first;
		public weak string cset_nth;
		public weak string default_value;
		public uint ensure_non_null;
		public uint null_fold_if_empty;
		public char substitutor;
		[CCode (cname = "g_param_spec_string", has_construct_function = false, type = "GParamSpec*")]
		public ParamSpecString (string name, string nick, string blurb, string? default_value, GLib.ParamFlags flags);
	}
	[CCode (cheader_filename = "glib-object.h", type_id = "G_TYPE_PARAM_UCHAR")]
	public class ParamSpecUChar : GLib.ParamSpec {
		public uint8 default_value;
		public uint8 maximum;
		public uint8 minimum;
		[CCode (cname = "g_param_spec_uchar", has_construct_function = false, type = "GParamSpec*")]
		public ParamSpecUChar (string name, string nick, string blurb, uint8 minimum, uint8 maximum, uint8 default_value, GLib.ParamFlags flags);
	}
	[CCode (cheader_filename = "glib-object.h", type_id = "G_TYPE_PARAM_UINT")]
	public class ParamSpecUInt : GLib.ParamSpec {
		public uint default_value;
		public uint maximum;
		public uint minimum;
		[CCode (cname = "g_param_spec_uint", has_construct_function = false, type = "GParamSpec*")]
		public ParamSpecUInt (string name, string nick, string blurb, uint minimum, uint maximum, uint default_value, GLib.ParamFlags flags);
	}
	[CCode (cheader_filename = "glib-object.h", type_id = "G_TYPE_PARAM_UINT64")]
	public class ParamSpecUInt64 : GLib.ParamSpec {
		public uint64 default_value;
		public uint64 maximum;
		public uint64 minimum;
		[CCode (cname = "g_param_spec_uint64", has_construct_function = false, type = "GParamSpec*")]
		public ParamSpecUInt64 (string name, string nick, string blurb, uint64 minimum, uint64 maximum, uint64 default_value, GLib.ParamFlags flags);
	}
	[CCode (cheader_filename = "glib-object.h", type_id = "G_TYPE_PARAM_ULONG")]
	public class ParamSpecULong : GLib.ParamSpec {
		public ulong default_value;
		public ulong maximum;
		public ulong minimum;
		[CCode (cname = "g_param_spec_ulong", has_construct_function = false, type = "GParamSpec*")]
		public ParamSpecULong (string name, string nick, string blurb, ulong minimum, ulong maximum, ulong default_value, GLib.ParamFlags flags);
	}
	[CCode (cheader_filename = "glib-object.h", type_id = "G_TYPE_PARAM_UNICHAR")]
	public class ParamSpecUnichar : GLib.ParamSpec {
		public unichar default_value;
		[CCode (cname = "g_param_spec_unichar", has_construct_function = false, type = "GParamSpec*")]
		public ParamSpecUnichar (string name, string nick, string blurb, unichar default_value, GLib.ParamFlags flags);
	}
	[CCode (cheader_filename = "glib-object.h", type_id = "G_TYPE_PARAM_VALUE_ARRAY")]
	public class ParamSpecValueArray : GLib.ParamSpec {
		public weak GLib.ParamSpec element_spec;
		public uint fixed_n_elements;
		[CCode (cname = "g_param_spec_value_array", has_construct_function = false, type = "GParamSpec*")]
		public ParamSpecValueArray (string name, string nick, string blurb, GLib.ParamSpec element_spec, GLib.ParamFlags flags);
	}
	[CCode (cheader_filename = "glib-object.h", type_id = "G_TYPE_PARAM_VARIANT")]
	[Version (since = "2.26")]
	public class ParamSpecVariant : GLib.ParamSpec {
		public weak GLib.Variant default_value;
		[CCode (array_length = false)]
		public weak void* padding[4];
		public weak GLib.VariantType type;
		[CCode (cname = "g_param_spec_variant", has_construct_function = false, type = "GParamSpec*")]
		public ParamSpecVariant (string name, string nick, string blurb, GLib.VariantType type, owned GLib.Variant? default_value, GLib.ParamFlags flags);
	}
	[CCode (cheader_filename = "glib-object.h", has_type_id = false)]
	[Compact]
	public class TypeClass {
		public GLib.Type g_type;
		[CCode (cname = "g_type_class_add_private")]
		[Version (deprecated = true, deprecated_since = "2.58", since = "2.4")]
		public void add_private (size_t private_size);
		[CCode (cname = "g_type_class_get_instance_private_offset")]
		[Version (since = "2.38")]
		public int get_instance_private_offset ();
		[CCode (cname = "g_type_class_get_private")]
		public void* get_private (GLib.Type private_type);
		[CCode (cname = "g_type_class_peek_parent")]
		public unowned GLib.TypeClass peek_parent ();
		[CCode (cname = "g_type_class_unref")]
		public void unref ();
		[CCode (cname = "g_type_class_unref_uncached")]
		public void unref_uncached ();
	}
	[CCode (cheader_filename = "glib-object.h", copy_function = "g_boxed_copy", free_function = "g_boxed_free", type_id = "g_value_array_get_type ()")]
	[Compact]
	public class ValueArray {
		public uint n_prealloced;
		public uint n_values;
		public GLib.Value values;
		[CCode (has_construct_function = false)]
		[Version (deprecated = true, deprecated_since = "2.32")]
		public ValueArray (uint n_prealloced);
		[Version (deprecated = true, deprecated_since = "2.32")]
		public unowned GLib.ValueArray append (GLib.Value? value);
		[Version (deprecated = true, deprecated_since = "2.32")]
		public GLib.ValueArray copy ();
		[Version (deprecated = true, deprecated_since = "2.32")]
		public void free ();
		[Version (deprecated = true, deprecated_since = "2.32")]
		public unowned GLib.Value? get_nth (uint index_);
		[Version (deprecated = true, deprecated_since = "2.32")]
		public unowned GLib.ValueArray insert (uint index_, GLib.Value? value);
		[Version (deprecated = true, deprecated_since = "2.32")]
		public unowned GLib.ValueArray prepend (GLib.Value? value);
		[Version (deprecated = true, deprecated_since = "2.32")]
		public unowned GLib.ValueArray remove (uint index_);
		[Version (deprecated = true, deprecated_since = "2.32")]
		public unowned GLib.ValueArray sort (GLib.CompareFunc compare_func);
		[Version (deprecated = true, deprecated_since = "2.32")]
		public unowned GLib.ValueArray sort_with_data (GLib.CompareDataFunc compare_func);
	}
	[CCode (cheader_filename = "glib-object.h", lower_case_csuffix = "type_plugin", type_id = "g_type_plugin_get_type ()")]
	public interface TypePlugin : GLib.Object {
		public void complete_interface_info (GLib.Type instance_type, GLib.Type interface_type, GLib.InterfaceInfo info);
		public void complete_type_info (GLib.Type g_type, GLib.TypeInfo info, GLib.TypeValueTable value_table);
		public void unuse ();
		public void use ();
	}
	[CCode (cheader_filename = "glib-object.h", has_type_id = false)]
	public struct CClosure {
		public weak GLib.Closure closure;
		public void* callback;
	}
	[CCode (cheader_filename = "glib-object.h", has_type_id = false)]
	public struct ClosureNotifyData {
		public void* data;
		public weak GLib.ClosureNotify notify;
	}
	[CCode (cheader_filename = "glib-object.h", has_type_id = false)]
	public struct EnumValue {
		public int value;
		public weak string value_name;
		public weak string value_nick;
	}
	[CCode (cheader_filename = "glib-object.h", has_type_id = false)]
	public struct FlagsValue {
		public uint value;
		public weak string value_name;
		public weak string value_nick;
	}
	[CCode (cheader_filename = "glib-object.h", has_type_id = false)]
	public struct InterfaceInfo {
		public weak GLib.InterfaceInitFunc interface_init;
		public weak GLib.InterfaceFinalizeFunc interface_finalize;
		public void* interface_data;
	}
	[CCode (cheader_filename = "glib-object.h", has_type_id = false)]
	public struct ObjectConstructParam {
		public weak GLib.ParamSpec pspec;
		public GLib.Value value;
	}
	[CCode (cheader_filename = "glib-object.h", has_type_id = false)]
	public struct ParamSpecTypeInfo {
		public uint16 instance_size;
		public uint16 n_preallocs;
		public weak GLib.ParamSpecTypeInfoInstanceInitFunc instance_init;
		public GLib.Type value_type;
		public weak GLib.ParamSpecTypeInfoFinalizeFunc finalize;
		public weak GLib.ParamSpecTypeInfoValueSetDefaultFunc value_set_default;
		public weak GLib.ParamSpecTypeInfoValueValidateFunc value_validate;
		public weak GLib.ParamSpecTypeInfoValuesCmpFunc values_cmp;
	}
	[CCode (cheader_filename = "glib-object.h", has_type_id = false)]
	[Version (deprecated = true, deprecated_since = "2.54")]
	public struct Parameter {
		public weak string name;
		public GLib.Value value;
	}
	[CCode (cheader_filename = "glib-object.h", cname = "guint")]
	public struct Signal : uint {
		[Version (since = "2.28")]
		public static bool accumulator_first_wins (GLib.SignalInvocationHint ihint, GLib.Value return_accu, GLib.Value handler_return, void* dummy);
		[Version (since = "2.4")]
		public static bool accumulator_true_handled (GLib.SignalInvocationHint ihint, GLib.Value return_accu, GLib.Value handler_return, void* dummy);
		public static ulong add_emission_hook (uint signal_id, GLib.Quark detail, owned GLib.SignalEmissionHook hook_func);
		public static void chain_from_overridden ([CCode (array_length = false)] GLib.Value[] instance_and_params, GLib.Value return_value);
		[Version (since = "2.18")]
		public static void chain_from_overridden_handler (GLib.TypeInstance instance, ...);
		public static ulong connect_closure (GLib.Object instance, string detailed_signal, GLib.Closure closure, bool after);
		public static ulong connect_closure_by_id (GLib.Object instance, uint signal_id, GLib.Quark detail, GLib.Closure closure, bool after);
		public static ulong connect_data (GLib.Object instance, string detailed_signal, [CCode (delegate_target_pos = 3.5)] GLib.Callback c_handler, [CCode (destroy_notify_pos = 3.5)] owned GLib.ClosureNotify? destroy_data, GLib.ConnectFlags connect_flags);
		public static ulong connect_object (GLib.TypeInstance instance, string detailed_signal, GLib.Callback c_handler, GLib.Object? gobject, GLib.ConnectFlags connect_flags);
		public static void emit (GLib.Object instance, uint signal_id, GLib.Quark detail, ...);
		public static void emit_by_name (GLib.Object instance, string detailed_signal, ...);
		public static void emit_valist (GLib.TypeInstance instance, uint signal_id, GLib.Quark detail, va_list var_args);
		public static void emitv ([CCode (array_length = false)] GLib.Value[] instance_and_params, uint signal_id, GLib.Quark detail, ref GLib.Value return_value);
		public static unowned GLib.SignalInvocationHint? get_invocation_hint (GLib.Object instance);
		public static bool has_handler_pending (GLib.Object instance, uint signal_id, GLib.Quark detail, bool may_be_blocked);
		[Version (since = "2.66")]
		public static bool is_valid_name (string name);
		[CCode (array_length_pos = 1.1, array_length_type = "guint")]
		public static uint[] list_ids (GLib.Type itype);
		public static uint lookup (string name, GLib.Type itype);
		public static unowned string? name (uint signal_id);
		public static uint @new (string signal_name, GLib.Type itype, GLib.SignalFlags signal_flags, uint class_offset, [CCode (delegate_target_pos = 5.5)] GLib.SignalAccumulator? accumulator, GLib.SignalCMarshaller? c_marshaller, GLib.Type return_type, uint n_params, ...);
		[Version (since = "2.18")]
		public static uint new_class_handler (string signal_name, GLib.Type itype, GLib.SignalFlags signal_flags, GLib.Callback? class_handler, [CCode (delegate_target_pos = 5.5)] GLib.SignalAccumulator? accumulator, GLib.SignalCMarshaller? c_marshaller, GLib.Type return_type, uint n_params, ...);
		public static uint new_valist (string signal_name, GLib.Type itype, GLib.SignalFlags signal_flags, GLib.Closure? class_closure, [CCode (delegate_target_pos = 5.5)] GLib.SignalAccumulator? accumulator, GLib.SignalCMarshaller? c_marshaller, GLib.Type return_type, uint n_params, va_list args);
		public static uint newv (string signal_name, GLib.Type itype, GLib.SignalFlags signal_flags, GLib.Closure? class_closure, [CCode (delegate_target_pos = 5.5)] GLib.SignalAccumulator? accumulator, GLib.SignalCMarshaller? c_marshaller, GLib.Type return_type, [CCode (array_length_cname = "n_params", array_length_pos = 7.5, array_length_type = "guint")] GLib.Type[]? param_types);
		public static void override_class_closure (uint signal_id, GLib.Type instance_type, GLib.Closure class_closure);
		[Version (since = "2.18")]
		public static void override_class_handler (string signal_name, GLib.Type instance_type, GLib.Callback class_handler);
		public static bool parse_name (string detailed_signal, GLib.Type itype, out uint signal_id_p, out GLib.Quark detail_p, bool force_detail_quark);
		public static GLib.SignalQuery query (uint signal_id);
		public static void remove_emission_hook (uint signal_id, ulong hook_id);
		[Version (since = "2.32")]
		public static void set_va_marshaller (uint signal_id, GLib.Type instance_type, GLib.SignalCVaMarshaller va_marshaller);
		public static void stop_emission (GLib.Object instance, uint signal_id, GLib.Quark detail);
		public static void stop_emission_by_name (GLib.Object instance, string detailed_signal);
	}
	[CCode (cheader_filename = "glib-object.h", has_type_id = false)]
	public struct SignalInvocationHint {
		public uint signal_id;
		public GLib.Quark detail;
		public GLib.SignalFlags run_type;
	}
	[CCode (cheader_filename = "glib-object.h", has_type_id = false)]
	public struct SignalQuery {
		public uint signal_id;
		public weak string signal_name;
		public GLib.Type itype;
		public GLib.SignalFlags signal_flags;
		public GLib.Type return_type;
		public uint n_params;
		[CCode (array_length_cname = "n_params", array_length_type = "guint")]
		public weak GLib.Type[] param_types;
	}
	[CCode (cheader_filename = "glib-object.h")]
	[SimpleType]
	public struct Type : size_t {
		public static void add_class_cache_func (void* cache_data, GLib.TypeClassCacheFunc cache_func);
		[Version (since = "2.24")]
		public static void add_class_private (GLib.Type class_type, size_t private_size);
		public static int add_instance_private (GLib.Type class_type, size_t private_size);
		[Version (since = "2.4")]
		public static void add_interface_check (void* check_data, GLib.TypeInterfaceCheckFunc check_func);
		public static void add_interface_dynamic (GLib.Type instance_type, GLib.Type interface_type, GLib.TypePlugin plugin);
		public static void add_interface_static (GLib.Type instance_type, GLib.Type interface_type, GLib.InterfaceInfo info);
		public static unowned GLib.TypeClass check_class_cast (GLib.TypeClass g_class, GLib.Type is_a_type);
		public static bool check_class_is_a (GLib.TypeClass g_class, GLib.Type is_a_type);
		public static bool check_instance (GLib.TypeInstance instance);
		public static unowned GLib.TypeInstance? check_instance_cast (GLib.TypeInstance instance, GLib.Type iface_type);
		public static bool check_instance_is_a (GLib.TypeInstance instance, GLib.Type iface_type);
		public static bool check_instance_is_fundamentally_a (GLib.TypeInstance instance, GLib.Type fundamental_type);
		public static bool check_is_value_type (GLib.Type type);
		public static bool check_value (GLib.Value value);
		public static bool check_value_holds (GLib.Value value, GLib.Type type);
		[CCode (array_length_pos = 1.1, array_length_type = "guint")]
		public static GLib.Type[] children (GLib.Type type);
		public static void class_adjust_private_offset (void* g_class, int private_size_or_offset);
		public static unowned GLib.TypeClass class_peek (GLib.Type type);
		[Version (since = "2.4")]
		public static unowned GLib.TypeClass class_peek_static (GLib.Type type);
		public static unowned GLib.TypeClass class_ref (GLib.Type type);
		public static unowned GLib.TypeInstance? create_instance (GLib.Type type);
		[Version (since = "2.4")]
		public static unowned GLib.TypeInterface? default_interface_peek (GLib.Type g_type);
		[Version (since = "2.4")]
		public static unowned GLib.TypeInterface? default_interface_ref (GLib.Type g_type);
		[Version (since = "2.4")]
		public static void default_interface_unref (GLib.TypeInterface g_iface);
		public static uint depth (GLib.Type type);
		[Version (since = "2.34")]
		public static void ensure (GLib.Type type);
		public static void free_instance (GLib.TypeInstance instance);
		public static GLib.Type from_name (string name);
		public static GLib.Type fundamental (GLib.Type type_id);
		public static GLib.Type fundamental_next ();
		[Version (since = "2.44")]
		public static int get_instance_count (GLib.Type type);
		public static unowned GLib.TypePlugin get_plugin (GLib.Type type);
		public static void* get_qdata (GLib.Type type, GLib.Quark quark);
		[Version (since = "2.36")]
		public static uint get_type_registration_serial ();
		[Version (deprecated = true, deprecated_since = "2.36")]
		public static void init ();
		[Version (deprecated = true, deprecated_since = "2.36")]
		public static void init_with_debug_flags (GLib.TypeDebugFlags debug_flags);
		public static void interface_add_prerequisite (GLib.Type interface_type, GLib.Type prerequisite_type);
		public static unowned GLib.TypePlugin interface_get_plugin (GLib.Type instance_type, GLib.Type interface_type);
		[Version (since = "2.68")]
		public static GLib.Type interface_instantiatable_prerequisite (GLib.Type interface_type);
		public static unowned GLib.TypeInterface? interface_peek (GLib.TypeClass instance_class, GLib.Type iface_type);
		[CCode (array_length_pos = 1.1, array_length_type = "guint")]
		[Version (since = "2.2")]
		public static GLib.Type[] interface_prerequisites (GLib.Type interface_type);
		[CCode (array_length_pos = 1.1, array_length_type = "guint")]
		public static GLib.Type[] interfaces (GLib.Type type);
		public static bool is_a (GLib.Type type, GLib.Type is_a_type);
		public static unowned string name (GLib.Type type);
		public static unowned string name_from_class (GLib.TypeClass g_class);
		public static unowned string name_from_instance (GLib.TypeInstance instance);
		public static GLib.Type next_base (GLib.Type leaf_type, GLib.Type root_type);
		public static GLib.Type parent (GLib.Type type);
		public static GLib.Quark qname (GLib.Type type);
		public static GLib.TypeQuery query (GLib.Type type);
		public static GLib.Type register_dynamic (GLib.Type parent_type, string type_name, GLib.TypePlugin plugin, GLib.TypeFlags flags);
		public static GLib.Type register_fundamental (GLib.Type type_id, string type_name, GLib.TypeInfo info, GLib.TypeFundamentalInfo finfo, GLib.TypeFlags flags);
		public static GLib.Type register_static (GLib.Type parent_type, string type_name, GLib.TypeInfo info, GLib.TypeFlags flags);
		[Version (since = "2.12")]
		public static GLib.Type register_static_simple (GLib.Type parent_type, string type_name, uint class_size, GLib.ClassInitFunc class_init, uint instance_size, GLib.InstanceInitFunc instance_init, GLib.TypeFlags flags);
		public static void remove_class_cache_func (void* cache_data, GLib.TypeClassCacheFunc cache_func);
		[Version (since = "2.4")]
		public static void remove_interface_check (void* check_data, GLib.TypeInterfaceCheckFunc check_func);
		public static void set_qdata (GLib.Type type, GLib.Quark quark, void* data);
		public static bool test_flags (GLib.Type type, uint flags);
		public static unowned GLib.TypeValueTable? value_table_peek (GLib.Type type);
	}
	[CCode (cheader_filename = "glib-object.h")]
	public struct TypeCValue {
	}
	[CCode (cheader_filename = "glib-object.h", has_type_id = false)]
	public struct TypeFundamentalInfo {
		public GLib.TypeFundamentalFlags type_flags;
	}
	[CCode (cheader_filename = "glib-object.h", has_type_id = false)]
	public struct TypeInfo {
		public uint16 class_size;
		public weak GLib.BaseInitFunc base_init;
		public weak GLib.BaseFinalizeFunc base_finalize;
		public weak GLib.ClassInitFunc class_init;
		public weak GLib.ClassFinalizeFunc class_finalize;
		public void* class_data;
		public uint16 instance_size;
		public uint16 n_preallocs;
		public weak GLib.InstanceInitFunc instance_init;
		public GLib.TypeValueTable value_table;
	}
	[CCode (cheader_filename = "glib-object.h", has_type_id = false)]
	public struct TypeInstance {
		public weak GLib.TypeClass g_class;
		[CCode (cname = "g_type_instance_get_private")]
		public void* get_private (GLib.Type private_type);
	}
	[CCode (cheader_filename = "glib-object.h", has_type_id = false)]
	public struct TypeInterface {
		public GLib.Type g_type;
		public GLib.Type g_instance_type;
		[CCode (cname = "g_type_interface_peek_parent")]
		public unowned GLib.TypeInterface? peek_parent ();
	}
	[CCode (cheader_filename = "glib-object.h", has_type_id = false)]
	public struct TypePluginClass {
		public GLib.TypeInterface base_iface;
		public weak GLib.TypePluginUse use_plugin;
		public weak GLib.TypePluginUnuse unuse_plugin;
		public weak GLib.TypePluginCompleteTypeInfo complete_type_info;
		public weak GLib.TypePluginCompleteInterfaceInfo complete_interface_info;
	}
	[CCode (cheader_filename = "glib-object.h", has_type_id = false)]
	public struct TypeQuery {
		public GLib.Type type;
		public weak string type_name;
		public uint class_size;
		public uint instance_size;
	}
	[CCode (cheader_filename = "glib-object.h", has_type_id = false)]
	public struct TypeValueTable {
		public weak GLib.TypeValueTableValueInitFunc value_init;
		public weak GLib.TypeValueTableValueFreeFunc value_free;
		public weak GLib.TypeValueTableValueCopyFunc value_copy;
		public weak GLib.TypeValueTableValuePeekPointerFunc value_peek_pointer;
		public weak string collect_format;
		public weak GLib.TypeValueTableCollectValueFunc collect_value;
		public weak string lcopy_format;
		public weak GLib.TypeValueTableLcopyValueFunc lcopy_value;
	}
	[CCode (cheader_filename = "glib-object.h", copy_function = "g_boxed_copy", destroy_function = "g_value_unset", free_function = "g_boxed_free", get_value_function = "g_value_get_boxed", marshaller_type_name = "BOXED", set_value_function = "g_value_set_boxed", take_value_function = "g_value_take_boxed", type_id = "G_TYPE_VALUE", type_signature = "v")]
	public struct Value {
		public GLib.Type g_type;
		[CCode (array_length = false)]
		public weak GLib._Value__data__union data[2];
		public void copy (GLib.Value dest_value);
		public void* dup_boxed ();
		public GLib.Object dup_object ();
		public GLib.ParamSpec dup_param ();
		public string dup_string ();
		[Version (since = "2.26")]
		public GLib.Variant? dup_variant ();
		public bool fits_pointer ();
		public bool get_boolean ();
		public void* get_boxed ();
		[Version (deprecated = true, deprecated_since = "2.32")]
		public char get_char ();
		public double get_double ();
		public int get_enum ();
		public uint get_flags ();
		public float get_float ();
		[Version (since = "2.12")]
		public GLib.Type get_gtype ();
		public int get_int ();
		public int64 get_int64 ();
		public long get_long ();
		public unowned GLib.Object get_object ();
		public unowned GLib.ParamSpec get_param ();
		public void* get_pointer ();
		[Version (since = "2.32")]
		public int8 get_schar ();
		public unowned string get_string ();
		public uint8 get_uchar ();
		public uint get_uint ();
		public uint64 get_uint64 ();
		public ulong get_ulong ();
		[Version (since = "2.26")]
		public unowned GLib.Variant? get_variant ();
		public unowned GLib.Value? init (GLib.Type g_type);
		[Version (since = "2.42")]
		public void init_from_instance (GLib.TypeInstance instance);
		public void* peek_pointer ();
		public static void register_transform_func (GLib.Type src_type, GLib.Type dest_type, GLib.ValueTransform transform_func);
		public GLib.Value? reset ();
		public void set_boolean (bool v_boolean);
		public void set_boxed (void* v_boxed);
		[Version (deprecated = true, deprecated_since = "2.4")]
		public void set_boxed_take_ownership (void* v_boxed);
		[Version (deprecated = true, deprecated_since = "2.32")]
		public void set_char (char v_char);
		public void set_double (double v_double);
		public void set_enum (int v_enum);
		public void set_flags (uint v_flags);
		public void set_float (float v_float);
		[Version (since = "2.12")]
		public void set_gtype (GLib.Type v_gtype);
		public void set_instance (void* instance);
		public void set_int (int v_int);
		public void set_int64 (int64 v_int64);
		[Version (since = "2.66")]
		public void set_interned_string (string? v_string);
		public void set_long (long v_long);
		public void set_object (GLib.Object? v_object);
		[Version (deprecated = true, deprecated_since = "2.4")]
		public void set_object_take_ownership (void* v_object);
		public void set_param (GLib.ParamSpec? param);
		[Version (deprecated = true, deprecated_since = "2.4")]
		public void set_param_take_ownership (GLib.ParamSpec? param);
		public void set_pointer (void* v_pointer);
		[Version (since = "2.32")]
		public void set_schar (int8 v_char);
		public void set_static_boxed (void* v_boxed);
		public void set_static_string (string? v_string);
		public void set_string (string? v_string);
		[Version (deprecated = true, deprecated_since = "2.4")]
		public void set_string_take_ownership (string? v_string);
		public void set_uchar (uint8 v_uchar);
		public void set_uint (uint v_uint);
		public void set_uint64 (uint64 v_uint64);
		public void set_ulong (ulong v_ulong);
		[Version (since = "2.26")]
		public void set_variant (GLib.Variant? variant);
		[Version (since = "2.4")]
		public void take_boxed (void* v_boxed);
		[Version (since = "2.4")]
		public void take_object (void* v_object);
		[Version (since = "2.4")]
		public void take_param (GLib.ParamSpec? param);
		[Version (since = "2.4")]
		public void take_string (string? v_string);
		[Version (since = "2.26")]
		public void take_variant (owned GLib.Variant? variant);
		public bool transform (GLib.Value dest_value);
		public static bool type_compatible (GLib.Type src_type, GLib.Type dest_type);
		public static bool type_transformable (GLib.Type src_type, GLib.Type dest_type);
		public void unset ();
	}
	[CCode (cheader_filename = "glib-object.h", has_type_id = false)]
	public struct WeakRef {
		[CCode (cname = "priv.p")]
		public void* priv_p;
		[Version (since = "2.32")]
		public static void clear (ref GLib.WeakRef weak_ref);
		[Version (since = "2.32")]
		public static GLib.Object @get (ref GLib.WeakRef weak_ref);
		[Version (since = "2.32")]
		public static void init (ref GLib.WeakRef weak_ref, GLib.Object? object);
		[Version (since = "2.32")]
		public void @set (GLib.Object? object);
	}
	[CCode (cheader_filename = "glib-object.h")]
	public struct _Value__data__union {
		public int v_int;
		public uint v_uint;
		public long v_long;
		public ulong v_ulong;
		public int64 v_int64;
		public uint64 v_uint64;
		public float v_float;
		public double v_double;
		public void* v_pointer;
	}
	[CCode (cheader_filename = "glib-object.h", cprefix = "G_BINDING_", type_id = "g_binding_flags_get_type ()")]
	[Flags]
	[Version (since = "2.26")]
	public enum BindingFlags {
		DEFAULT,
		BIDIRECTIONAL,
		SYNC_CREATE,
		INVERT_BOOLEAN
	}
	[CCode (cheader_filename = "glib-object.h", cprefix = "G_CONNECT_", has_type_id = false)]
	[Flags]
	public enum ConnectFlags {
		AFTER,
		SWAPPED
	}
	[CCode (cheader_filename = "glib-object.h", cprefix = "G_PARAM_", has_type_id = false)]
	[Flags]
	public enum ParamFlags {
		READABLE,
		WRITABLE,
		READWRITE,
		CONSTRUCT,
		CONSTRUCT_ONLY,
		LAX_VALIDATION,
		STATIC_NAME,
		PRIVATE,
		STATIC_NICK,
		STATIC_BLURB,
		EXPLICIT_NOTIFY,
		DEPRECATED
	}
	[CCode (cheader_filename = "glib-object.h", cprefix = "G_SIGNAL_", has_type_id = false)]
	[Flags]
	public enum SignalFlags {
		RUN_FIRST,
		RUN_LAST,
		RUN_CLEANUP,
		NO_RECURSE,
		DETAILED,
		ACTION,
		NO_HOOKS,
		MUST_COLLECT,
		DEPRECATED,
		ACCUMULATOR_FIRST_RUN
	}
	[CCode (cheader_filename = "glib-object.h", cprefix = "G_SIGNAL_MATCH_", has_type_id = false)]
	[Flags]
	public enum SignalMatchType {
		ID,
		DETAIL,
		CLOSURE,
		FUNC,
		DATA,
		UNBLOCKED
	}
	[CCode (cheader_filename = "glib-object.h", cprefix = "G_TYPE_DEBUG_", has_type_id = false)]
	[Flags]
	[Version (deprecated = true, deprecated_since = "2.36")]
	public enum TypeDebugFlags {
		NONE,
		OBJECTS,
		SIGNALS,
		INSTANCE_COUNT,
		MASK
	}
	[CCode (cheader_filename = "glib-object.h", cprefix = "G_TYPE_FLAG_", has_type_id = false)]
	[Flags]
	public enum TypeFlags {
		ABSTRACT,
		VALUE_ABSTRACT,
		[Version (since = "2.70")]
		FINAL
	}
	[CCode (cheader_filename = "glib-object.h", cprefix = "G_TYPE_FLAG_", has_type_id = false)]
	[Flags]
	public enum TypeFundamentalFlags {
		CLASSED,
		INSTANTIATABLE,
		DERIVABLE,
		DEEP_DERIVABLE
	}
	[CCode (cheader_filename = "glib-object.h", has_target = false)]
	public delegate void BaseFinalizeFunc (GLib.TypeClass g_class);
	[CCode (cheader_filename = "glib-object.h", has_target = false)]
	public delegate void BaseInitFunc (GLib.TypeClass g_class);
	[CCode (cheader_filename = "glib-object.h", instance_pos = 3.9)]
	[Version (since = "2.26")]
	public delegate bool BindingTransformFunc (GLib.Binding binding, GLib.Value from_value, ref GLib.Value to_value);
	[CCode (cheader_filename = "glib-object.h", has_target = false)]
	public delegate void* BoxedCopyFunc (void* boxed);
	[CCode (cheader_filename = "glib-object.h", has_target = false)]
	public delegate void BoxedFreeFunc (void* boxed);
	[CCode (cheader_filename = "glib-object.h", has_target = false)]
	public delegate void Callback ();
	[CCode (cheader_filename = "glib-object.h", has_target = false)]
	public delegate void ClassFinalizeFunc (GLib.TypeClass g_class, void* class_data);
	[CCode (cheader_filename = "glib-object.h", has_target = false)]
	public delegate void ClassInitFunc (GLib.TypeClass g_class, void* class_data);
	[CCode (cheader_filename = "glib-object.h", has_target = false)]
	public delegate void ClosureMarshal (GLib.Closure closure, GLib.Value? return_value, [CCode (array_length_cname = "n_param_values", array_length_pos = 2.5, array_length_type = "guint")] GLib.Value[] param_values, void* invocation_hint, void* marshal_data);
	[CCode (cheader_filename = "glib-object.h", has_target = false, has_typedef = false)]
	public delegate void ClosureMarshalFunc (GLib.Closure closure, GLib.Value return_value, uint n_param_values, GLib.Value param_values, void* invocation_hint, void* marshal_data);
	[CCode (cheader_filename = "glib-object.h", has_target = false)]
	public delegate void ClosureNotify (void* data, GLib.Closure closure);
	[CCode (cheader_filename = "glib-object.h", has_target = false)]
	public delegate void InstanceInitFunc (GLib.TypeInstance instance, GLib.TypeClass g_class);
	[CCode (cheader_filename = "glib-object.h", has_target = false)]
	public delegate void InterfaceFinalizeFunc (GLib.TypeInterface g_iface, void* iface_data);
	[CCode (cheader_filename = "glib-object.h", has_target = false)]
	public delegate void InterfaceInitFunc (GLib.TypeInterface g_iface, void* iface_data);
	[CCode (cheader_filename = "glib-object.h", has_target = false)]
	public delegate void ObjectFinalizeFunc (GLib.Object object);
	[CCode (cheader_filename = "glib-object.h", has_target = false)]
	public delegate void ObjectGetPropertyFunc (GLib.Object object, uint property_id, GLib.Value value, GLib.ParamSpec pspec);
	[CCode (cheader_filename = "glib-object.h", has_target = false)]
	public delegate void ObjectSetPropertyFunc (GLib.Object object, uint property_id, GLib.Value value, GLib.ParamSpec pspec);
	[CCode (cheader_filename = "glib-object.h", has_target = false, has_typedef = false)]
	public delegate void ParamSpecTypeInfoFinalizeFunc (GLib.ParamSpec pspec);
	[CCode (cheader_filename = "glib-object.h", has_target = false, has_typedef = false)]
	public delegate void ParamSpecTypeInfoInstanceInitFunc (GLib.ParamSpec pspec);
	[CCode (cheader_filename = "glib-object.h", has_target = false, has_typedef = false)]
	public delegate void ParamSpecTypeInfoValueSetDefaultFunc (GLib.ParamSpec pspec, GLib.Value value);
	[CCode (cheader_filename = "glib-object.h", has_target = false, has_typedef = false)]
	public delegate bool ParamSpecTypeInfoValueValidateFunc (GLib.ParamSpec pspec, GLib.Value value);
	[CCode (cheader_filename = "glib-object.h", has_target = false, has_typedef = false)]
	public delegate int ParamSpecTypeInfoValuesCmpFunc (GLib.ParamSpec pspec, GLib.Value value1, GLib.Value value2);
	[CCode (cheader_filename = "glib-object.h", has_target = false)]
	public delegate bool SignalAccumulator (GLib.SignalInvocationHint ihint, GLib.Value return_accu, GLib.Value handler_return, void* data);
	[CCode (cheader_filename = "glib-object.h", has_target = false)]
	public delegate void SignalCMarshaller (GLib.Closure closure, GLib.Value? return_value, [CCode (array_length_cname = "n_param_values", array_length_pos = 2.5, array_length_type = "guint")] GLib.Value[] param_values, void* invocation_hint, void* marshal_data);
	[CCode (cheader_filename = "glib-object.h", has_target = false)]
	public delegate void SignalCVaMarshaller (GLib.Closure closure, GLib.Value? return_value, GLib.TypeInstance instance, va_list args, void* marshal_data, [CCode (array_length_cname = "n_params", array_length_pos = 5.5)] GLib.Type[] param_types);
	[CCode (cheader_filename = "glib-object.h", has_target = false)]
	public delegate bool SignalEmissionHook (GLib.SignalInvocationHint ihint, [CCode (array_length_cname = "n_param_values", array_length_pos = 1.5, array_length_type = "guint")] GLib.Value[] param_values, void* data);
	[CCode (cheader_filename = "glib-object.h", has_target = false)]
	public delegate void ToggleNotify (void* data, GLib.Object object, bool is_last_ref);
	[CCode (cheader_filename = "glib-object.h", has_target = false)]
	public delegate bool TypeClassCacheFunc (void* cache_data, GLib.TypeClass g_class);
	[CCode (cheader_filename = "glib-object.h", has_target = false)]
	[Version (since = "2.4")]
	public delegate void TypeInterfaceCheckFunc (void* check_data, GLib.TypeInterface g_iface);
	[CCode (cheader_filename = "glib-object.h", has_target = false)]
	public delegate void TypePluginCompleteInterfaceInfo (GLib.TypePlugin plugin, GLib.Type instance_type, GLib.Type interface_type, GLib.InterfaceInfo info);
	[CCode (cheader_filename = "glib-object.h", has_target = false)]
	public delegate void TypePluginCompleteTypeInfo (GLib.TypePlugin plugin, GLib.Type g_type, GLib.TypeInfo info, GLib.TypeValueTable value_table);
	[CCode (cheader_filename = "glib-object.h", has_target = false)]
	public delegate void TypePluginUnuse (GLib.TypePlugin plugin);
	[CCode (cheader_filename = "glib-object.h", has_target = false)]
	public delegate void TypePluginUse (GLib.TypePlugin plugin);
	[CCode (cheader_filename = "glib-object.h", has_target = false, has_typedef = false)]
	public delegate string TypeValueTableCollectValueFunc (GLib.Value value, uint n_collect_values, GLib.TypeCValue collect_values, uint collect_flags);
	[CCode (cheader_filename = "glib-object.h", has_target = false, has_typedef = false)]
	public delegate string TypeValueTableLcopyValueFunc (GLib.Value value, uint n_collect_values, GLib.TypeCValue collect_values, uint collect_flags);
	[CCode (cheader_filename = "glib-object.h", has_target = false, has_typedef = false)]
	public delegate void TypeValueTableValueCopyFunc (GLib.Value src_value, GLib.Value dest_value);
	[CCode (cheader_filename = "glib-object.h", has_target = false, has_typedef = false)]
	public delegate void TypeValueTableValueFreeFunc (GLib.Value value);
	[CCode (cheader_filename = "glib-object.h", has_target = false, has_typedef = false)]
	public delegate void TypeValueTableValueInitFunc (GLib.Value value);
	[CCode (cheader_filename = "glib-object.h", has_target = false, has_typedef = false)]
	public delegate void* TypeValueTableValuePeekPointerFunc (GLib.Value value);
	[CCode (cheader_filename = "glib-object.h", has_target = false)]
	public delegate void VaClosureMarshal (GLib.Closure closure, GLib.Value? return_value, GLib.TypeInstance instance, va_list args, void* marshal_data, [CCode (array_length_cname = "n_params", array_length_pos = 5.5)] GLib.Type[] param_types);
	[CCode (cheader_filename = "glib-object.h", has_target = false)]
	public delegate void ValueTransform (GLib.Value src_value, GLib.Value dest_value);
	[CCode (cheader_filename = "glib-object.h", has_target = false)]
	public delegate void WeakNotify (void* data, GLib.Object where_the_object_was);
	[CCode (cheader_filename = "glib-object.h", cname = "G_PARAM_MASK")]
	public const int PARAM_MASK;
	[CCode (cheader_filename = "glib-object.h", cname = "G_PARAM_STATIC_STRINGS")]
	public const int PARAM_STATIC_STRINGS;
	[CCode (cheader_filename = "glib-object.h", cname = "G_PARAM_USER_SHIFT")]
	public const int PARAM_USER_SHIFT;
	[CCode (cheader_filename = "glib-object.h", cname = "G_SIGNAL_FLAGS_MASK")]
	public const int SIGNAL_FLAGS_MASK;
	[CCode (cheader_filename = "glib-object.h", cname = "G_SIGNAL_MATCH_MASK")]
	public const int SIGNAL_MATCH_MASK;
	[CCode (cheader_filename = "glib-object.h", cname = "G_TYPE_FLAG_RESERVED_ID_BIT")]
	public const GLib.Type TYPE_FLAG_RESERVED_ID_BIT;
	[CCode (cheader_filename = "glib-object.h", cname = "G_TYPE_FUNDAMENTAL_MAX")]
	public const int TYPE_FUNDAMENTAL_MAX;
	[CCode (cheader_filename = "glib-object.h", cname = "G_TYPE_FUNDAMENTAL_SHIFT")]
	public const int TYPE_FUNDAMENTAL_SHIFT;
	[CCode (cheader_filename = "glib-object.h", cname = "G_TYPE_RESERVED_BSE_FIRST")]
	public const int TYPE_RESERVED_BSE_FIRST;
	[CCode (cheader_filename = "glib-object.h", cname = "G_TYPE_RESERVED_BSE_LAST")]
	public const int TYPE_RESERVED_BSE_LAST;
	[CCode (cheader_filename = "glib-object.h", cname = "G_TYPE_RESERVED_GLIB_FIRST")]
	public const int TYPE_RESERVED_GLIB_FIRST;
	[CCode (cheader_filename = "glib-object.h", cname = "G_TYPE_RESERVED_GLIB_LAST")]
	public const int TYPE_RESERVED_GLIB_LAST;
	[CCode (cheader_filename = "glib-object.h", cname = "G_TYPE_RESERVED_USER_FIRST")]
	public const int TYPE_RESERVED_USER_FIRST;
	[CCode (cheader_filename = "glib-object.h", cname = "G_VALUE_INTERNED_STRING")]
	[Version (since = "2.66")]
	public const int VALUE_INTERNED_STRING;
	[CCode (cheader_filename = "glib-object.h", cname = "G_VALUE_NOCOPY_CONTENTS")]
	public const int VALUE_NOCOPY_CONTENTS;
	[CCode (cheader_filename = "glib-object.h")]
	public static void* boxed_copy (GLib.Type boxed_type, void* src_boxed);
	[CCode (cheader_filename = "glib-object.h")]
	public static void boxed_free (GLib.Type boxed_type, void* boxed);
	[CCode (cheader_filename = "glib-object.h")]
	public static GLib.Type boxed_type_register_static (string name, GLib.BoxedCopyFunc boxed_copy, GLib.BoxedFreeFunc boxed_free);
	[CCode (cheader_filename = "glib-object.h")]
	[Version (since = "2.28")]
	public static void clear_object (GLib.Object object_ptr);
	[CCode (cheader_filename = "glib-object.h")]
	[Version (since = "2.62")]
	public static void clear_signal_handler (ulong handler_id_ptr, GLib.Object instance);
	[CCode (cheader_filename = "glib-object.h")]
	public static GLib.Type gtype_get_type ();
	[CCode (cheader_filename = "glib-object.h")]
	public static GLib.Type param_type_register_static (string name, GLib.ParamSpecTypeInfo pspec_info);
	[CCode (cheader_filename = "glib-object.h")]
	public static GLib.Type pointer_type_register_static (string name);
	[CCode (cheader_filename = "glib-object.h")]
	public static void source_set_closure (GLib.Source source, GLib.Closure closure);
	[CCode (cheader_filename = "glib-object.h")]
	public static void source_set_dummy_callback (GLib.Source source);
	[CCode (cheader_filename = "glib-object.h")]
	public static string strdup_value_contents (GLib.Value value);
}
