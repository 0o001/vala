/* gnet-2.0.vala generated by lt-vapigen, do not modify. */

[CCode (cprefix = "G", lower_case_cprefix = "gnet_")]
namespace GNet {
	[CCode (cprefix = "GNET_IO_ERROR_", cheader_filename = "gnet-2.0-custom.h")]
	public enum IOError {
		NONE,
		AGAIN,
		INVAL,
		UNKNOWN,
	}
	[CCode (cprefix = "GNET_CONN_", cheader_filename = "gnet-2.0.h")]
	public enum ConnEventType {
		ERROR,
		CONNECT,
		CLOSE,
		TIMEOUT,
		READ,
		WRITE,
		READABLE,
		WRITABLE,
	}
	[CCode (cprefix = "GNET_CONN_HTTP_ERROR_", cheader_filename = "gnet-2.0.h")]
	public enum ConnHttpError {
		UNSPECIFIED,
		PROTOCOL_UNSUPPORTED,
	}
	[CCode (cprefix = "GNET_CONN_HTTP_", cheader_filename = "gnet-2.0.h")]
	public enum ConnHttpEventType {
		RESOLVED,
		CONNECTED,
		RESPONSE,
		REDIRECT,
		DATA_PARTIAL,
		DATA_COMPLETE,
		TIMEOUT,
		ERROR,
	}
	[CCode (cprefix = "GNET_CONN_HTTP_FLAG_SKIP_HEADER_", cheader_filename = "gnet-2.0.h")]
	public enum ConnHttpHeaderFlags {
		CHECK,
	}
	[CCode (cprefix = "GNET_CONN_HTTP_METHOD_", cheader_filename = "gnet-2.0.h")]
	public enum ConnHttpMethod {
		GET,
		POST,
	}
	[CCode (cprefix = "GIPV6_POLICY_", cheader_filename = "gnet-2.0.h")]
	public enum IPv6Policy {
		IPV4_THEN_IPV6,
		IPV6_THEN_IPV4,
		IPV4_ONLY,
		IPV6_ONLY,
	}
	[CCode (cprefix = "GNET_TOS_", cheader_filename = "gnet-2.0.h")]
	public enum TOS {
		NONE,
		LOWDELAY,
		THROUGHPUT,
		RELIABILITY,
		LOWCOST,
	}
	[CCode (cprefix = "GTCP_SOCKET_CONNECT_ASYNC_STATUS_", cheader_filename = "gnet-2.0.h")]
	public enum TcpSocketConnectAsyncStatus {
		OK,
		INETADDR_ERROR,
		TCP_ERROR,
	}
	[CCode (cheader_filename = "gnet-2.0-custom.h")]
	public class NetTOS {
	}
	[CCode (cheader_filename = "gnet-2.0-custom.h")]
	public class InetAddrGetNameAsyncID {
	}
	[CCode (cheader_filename = "gnet-2.0-custom.h")]
	public class InetAddrNewAsyncID {
	}
	[CCode (cheader_filename = "gnet-2.0-custom.h")]
	public class InetAddrNewListAsyncID {
	}
	[CCode (cheader_filename = "gnet-2.0-custom.h")]
	public class TcpSocketConnectAsyncID {
	}
	[CCode (cheader_filename = "gnet-2.0-custom.h")]
	public class TcpSocketNewAsyncID {
	}
	[CCode (cheader_filename = "gnet-2.0.h")]
	public class Conn {
		public weak string hostname;
		public int port;
		public weak GLib.IOChannel iochannel;
		public weak GNet.TcpSocket socket;
		public weak GNet.InetAddr inetaddr;
		public uint ref_count;
		public uint ref_count_internal;
		public weak GNet.TcpSocketConnectAsyncID connect_id;
		public weak GNet.TcpSocketNewAsyncID new_id;
		public weak GLib.List write_queue;
		public uint bytes_written;
		public weak string buffer;
		public uint length;
		public uint bytes_read;
		public bool read_eof;
		public weak GLib.List read_queue;
		public uint process_buffer_timeout;
		public bool watch_readable;
		public bool watch_writable;
		public uint watch_flags;
		public uint watch;
		public uint timer;
		public GNet.ConnFunc func;
		public pointer user_data;
	}
	[CCode (cheader_filename = "gnet-2.0.h")]
	public class ConnEvent {
		public GNet.ConnEventType type;
		public weak string buffer;
		public int length;
	}
	[CCode (cheader_filename = "gnet-2.0.h")]
	public class ConnHttp {
	}
	[CCode (cheader_filename = "gnet-2.0.h")]
	public class ConnHttpEvent {
		public GNet.ConnHttpEventType type;
	}
	[CCode (cheader_filename = "gnet-2.0.h")]
	public class ConnHttpEventData {
		public uint64 content_length;
		public uint64 data_received;
		public weak string buffer;
		public ulong buffer_length;
	}
	[CCode (cheader_filename = "gnet-2.0.h")]
	public class ConnHttpEventError {
		public GNet.ConnHttpError code;
		public weak string message;
	}
	[CCode (cheader_filename = "gnet-2.0.h")]
	public class ConnHttpEventRedirect {
		public uint num_redirects;
		public uint max_redirects;
		public weak string new_location;
		public bool auto_redirect;
	}
	[CCode (cheader_filename = "gnet-2.0.h")]
	public class ConnHttpEventResolved {
		public weak GNet.InetAddr ia;
	}
	[CCode (cheader_filename = "gnet-2.0.h")]
	public class ConnHttpEventResponse {
		public uint response_code;
		public weak string header_fields;
		public weak string header_values;
	}
	[CCode (cheader_filename = "gnet-2.0.h")]
	public class InetAddr {
	}
	[CCode (cheader_filename = "gnet-2.0.h")]
	public class MD5 {
	}
	[CCode (cheader_filename = "gnet-2.0.h")]
	public class McastSocket {
	}
	[CCode (cheader_filename = "gnet-2.0.h")]
	public class SHA {
	}
	[CCode (cheader_filename = "gnet-2.0.h")]
	public class Server {
		public weak GNet.InetAddr iface;
		public int port;
		public weak GNet.TcpSocket socket;
		public uint ref_count;
		public GNet.ServerFunc func;
		public pointer user_data;
	}
	[CCode (cheader_filename = "gnet-2.0.h")]
	public class TcpSocket {
	}
	[CCode (cheader_filename = "gnet-2.0.h")]
	public class URI {
		public weak string scheme;
		public weak string userinfo;
		public weak string hostname;
		public int port;
		public weak string path;
		public weak string query;
		public weak string fragment;
	}
	[CCode (cheader_filename = "gnet-2.0.h")]
	public class UdpSocket {
	}
	[CCode (cheader_filename = "gnet-2.0.h")]
	public class UnixSocket {
	}
	[CCode (ref_function = "gnet_conn_ref", unref_function = "gnet_conn_unref", cheader_filename = "gnet-2.0.h")]
	public class netConn {
		[CCode (cname = "gnet_conn_connect")]
		public static void connect (GNet.Conn conn);
		[CCode (cname = "gnet_conn_delete")]
		public static void delete (GNet.Conn conn);
		[CCode (cname = "gnet_conn_disconnect")]
		public static void disconnect (GNet.Conn conn);
		[CCode (cname = "gnet_conn_http_cancel")]
		public static void http_cancel (GNet.ConnHttp conn);
		[CCode (cname = "gnet_conn_http_delete")]
		public static void http_delete (GNet.ConnHttp conn);
		[CCode (cname = "gnet_conn_http_new")]
		public static weak GNet.ConnHttp http_new ();
		[CCode (cname = "gnet_conn_http_run")]
		public static bool http_run (GNet.ConnHttp conn, GNet.ConnHttpFunc func, pointer user_data);
		[CCode (cname = "gnet_conn_http_run_async")]
		public static void http_run_async (GNet.ConnHttp conn, GNet.ConnHttpFunc func, pointer user_data);
		[CCode (cname = "gnet_conn_http_set_header")]
		public static bool http_set_header (GNet.ConnHttp conn, string field, string value, GNet.ConnHttpHeaderFlags flags);
		[CCode (cname = "gnet_conn_http_set_max_redirects")]
		public static void http_set_max_redirects (GNet.ConnHttp conn, uint num);
		[CCode (cname = "gnet_conn_http_set_method")]
		public static bool http_set_method (GNet.ConnHttp conn, GNet.ConnHttpMethod method, string post_data, ulong post_data_len);
		[CCode (cname = "gnet_conn_http_set_timeout")]
		public static void http_set_timeout (GNet.ConnHttp conn, uint timeout);
		[CCode (cname = "gnet_conn_http_set_uri")]
		public static bool http_set_uri (GNet.ConnHttp conn, string uri);
		[CCode (cname = "gnet_conn_http_set_user_agent")]
		public static bool http_set_user_agent (GNet.ConnHttp conn, string agent);
		[CCode (cname = "gnet_conn_http_steal_buffer")]
		public static bool http_steal_buffer (GNet.ConnHttp conn, string buffer, ulong length);
		[CCode (cname = "gnet_conn_is_connected")]
		public static bool is_connected (GNet.Conn conn);
		[CCode (cname = "gnet_conn_new")]
		public netConn (string hostname, int port, GNet.ConnFunc func, pointer user_data);
		[CCode (cname = "gnet_conn_new_inetaddr")]
		public netConn.from_inetaddr (GNet.InetAddr inetaddr, GNet.ConnFunc func, pointer user_data);
		[CCode (cname = "gnet_conn_new_socket")]
		public netConn.from_socket (GNet.TcpSocket socket, GNet.ConnFunc func, pointer user_data);
		[CCode (cname = "gnet_conn_read")]
		public static void read (GNet.Conn conn);
		[CCode (cname = "gnet_conn_readline")]
		public static void readline (GNet.Conn conn);
		[CCode (cname = "gnet_conn_readn")]
		public static void readn (GNet.Conn conn, int length);
		[CCode (cname = "gnet_conn_set_callback")]
		public static void set_callback (GNet.Conn conn, GNet.ConnFunc func, pointer user_data);
		[CCode (cname = "gnet_conn_set_watch_error")]
		public static void set_watch_error (GNet.Conn conn, bool enable);
		[CCode (cname = "gnet_conn_set_watch_readable")]
		public static void set_watch_readable (GNet.Conn conn, bool enable);
		[CCode (cname = "gnet_conn_set_watch_writable")]
		public static void set_watch_writable (GNet.Conn conn, bool enable);
		[CCode (cname = "gnet_conn_timeout")]
		public static void timeout (GNet.Conn conn, uint timeout);
		[CCode (cname = "gnet_conn_write")]
		public static void write (GNet.Conn conn, string buffer, int length);
	}
	[CCode (ref_function = "gnet_inetaddr_ref", unref_function = "gnet_inetaddr_unref", cheader_filename = "gnet-2.0.h")]
	public class netInetaddr {
		[CCode (cname = "gnet_inetaddr_autodetect_internet_interface")]
		public static weak GNet.InetAddr autodetect_internet_interface ();
		[CCode (cname = "gnet_inetaddr_clone")]
		public static weak GNet.InetAddr clone (GNet.InetAddr inetaddr);
		[CCode (cname = "gnet_inetaddr_delete")]
		public static void delete (GNet.InetAddr inetaddr);
		[CCode (cname = "gnet_inetaddr_delete_list")]
		public static void delete_list (GLib.List list);
		[CCode (cname = "gnet_inetaddr_equal")]
		public static bool equal (pointer p1, pointer p2);
		[CCode (cname = "gnet_inetaddr_get_bytes")]
		public static void get_bytes (GNet.InetAddr inetaddr, string buffer);
		[CCode (cname = "gnet_inetaddr_get_canonical_name")]
		public static weak string get_canonical_name (GNet.InetAddr inetaddr);
		[CCode (cname = "gnet_inetaddr_get_host_addr")]
		public static weak GNet.InetAddr get_host_addr ();
		[CCode (cname = "gnet_inetaddr_get_host_name")]
		public static weak string get_host_name ();
		[CCode (cname = "gnet_inetaddr_get_interface_to")]
		public static weak GNet.InetAddr get_interface_to (GNet.InetAddr inetaddr);
		[CCode (cname = "gnet_inetaddr_get_internet_interface")]
		public static weak GNet.InetAddr get_internet_interface ();
		[CCode (cname = "gnet_inetaddr_get_length")]
		public static int get_length (GNet.InetAddr inetaddr);
		[CCode (cname = "gnet_inetaddr_get_name")]
		public static weak string get_name (GNet.InetAddr inetaddr);
		[CCode (cname = "gnet_inetaddr_get_name_async")]
		public static weak GNet.InetAddrGetNameAsyncID get_name_async (GNet.InetAddr inetaddr, GNet.InetAddrGetNameAsyncFunc func, pointer data);
		[CCode (cname = "gnet_inetaddr_get_name_async_cancel")]
		public static void get_name_async_cancel (GNet.InetAddrGetNameAsyncID id);
		[CCode (cname = "gnet_inetaddr_get_name_nonblock")]
		public static weak string get_name_nonblock (GNet.InetAddr inetaddr);
		[CCode (cname = "gnet_inetaddr_get_port")]
		public static int get_port (GNet.InetAddr inetaddr);
		[CCode (cname = "gnet_inetaddr_hash")]
		public static uint hash (pointer p);
		[CCode (cname = "gnet_inetaddr_is_broadcast")]
		public static bool is_broadcast (GNet.InetAddr inetaddr);
		[CCode (cname = "gnet_inetaddr_is_canonical")]
		public static bool is_canonical (string hostname);
		[CCode (cname = "gnet_inetaddr_is_internet")]
		public static bool is_internet (GNet.InetAddr inetaddr);
		[CCode (cname = "gnet_inetaddr_is_internet_domainname")]
		public static bool is_internet_domainname (string name);
		[CCode (cname = "gnet_inetaddr_is_ipv4")]
		public static bool is_ipv4 (GNet.InetAddr inetaddr);
		[CCode (cname = "gnet_inetaddr_is_ipv6")]
		public static bool is_ipv6 (GNet.InetAddr inetaddr);
		[CCode (cname = "gnet_inetaddr_is_loopback")]
		public static bool is_loopback (GNet.InetAddr inetaddr);
		[CCode (cname = "gnet_inetaddr_is_multicast")]
		public static bool is_multicast (GNet.InetAddr inetaddr);
		[CCode (cname = "gnet_inetaddr_is_private")]
		public static bool is_private (GNet.InetAddr inetaddr);
		[CCode (cname = "gnet_inetaddr_is_reserved")]
		public static bool is_reserved (GNet.InetAddr inetaddr);
		[CCode (cname = "gnet_inetaddr_list_interfaces")]
		public static weak GLib.List list_interfaces ();
		[CCode (cname = "gnet_inetaddr_new")]
		public netInetaddr (string hostname, int port);
		[CCode (cname = "gnet_inetaddr_new_async")]
		public netInetaddr.async (string hostname, int port, GNet.InetAddrNewAsyncFunc func, pointer data);
		[CCode (cname = "gnet_inetaddr_new_async_cancel")]
		public netInetaddr.async_cancel (GNet.InetAddrNewAsyncID id);
		[CCode (cname = "gnet_inetaddr_new_bytes")]
		public netInetaddr.bytes (string bytes, uint length);
		[CCode (cname = "gnet_inetaddr_new_list")]
		public netInetaddr.list (string hostname, int port);
		[CCode (cname = "gnet_inetaddr_new_list_async")]
		public netInetaddr.list_async (string hostname, int port, GNet.InetAddrNewListAsyncFunc func, pointer data);
		[CCode (cname = "gnet_inetaddr_new_list_async_cancel")]
		public netInetaddr.list_async_cancel (GNet.InetAddrNewListAsyncID id);
		[CCode (cname = "gnet_inetaddr_new_nonblock")]
		public netInetaddr.nonblock (string hostname, int port);
		[CCode (cname = "gnet_inetaddr_noport_equal")]
		public static bool noport_equal (pointer p1, pointer p2);
		[CCode (cname = "gnet_inetaddr_set_bytes")]
		public static void set_bytes (GNet.InetAddr inetaddr, string bytes, int length);
		[CCode (cname = "gnet_inetaddr_set_port")]
		public static void set_port (GNet.InetAddr inetaddr, int port);
	}
	[CCode (cheader_filename = "gnet-2.0.h")]
	public class netIo {
		[CCode (cname = "gnet_io_channel_readline")]
		public static GNet.IOError channel_readline (GLib.IOChannel channel, string buffer, ulong length, ulong bytes_readp);
		[CCode (cname = "gnet_io_channel_readline_strdup")]
		public static GNet.IOError channel_readline_strdup (GLib.IOChannel channel, string bufferp, ulong bytes_readp);
		[CCode (cname = "gnet_io_channel_readn")]
		public static GNet.IOError channel_readn (GLib.IOChannel channel, pointer buffer, ulong length, ulong bytes_readp);
		[CCode (cname = "gnet_io_channel_writen")]
		public static GNet.IOError channel_writen (GLib.IOChannel channel, pointer buffer, ulong length, ulong bytes_writtenp);
	}
	[CCode (cheader_filename = "gnet-2.0.h")]
	public class netMcast {
		[CCode (cname = "gnet_mcast_socket_delete")]
		public static void socket_delete (GNet.McastSocket socket);
		[CCode (cname = "gnet_mcast_socket_get_io_channel")]
		public static weak GLib.IOChannel socket_get_io_channel (GNet.McastSocket socket);
		[CCode (cname = "gnet_mcast_socket_get_local_inetaddr")]
		public static weak GNet.InetAddr socket_get_local_inetaddr (GNet.McastSocket socket);
		[CCode (cname = "gnet_mcast_socket_get_ttl")]
		public static int socket_get_ttl (GNet.McastSocket socket);
		[CCode (cname = "gnet_mcast_socket_has_packet")]
		public static bool socket_has_packet (GNet.McastSocket socket);
		[CCode (cname = "gnet_mcast_socket_is_loopback")]
		public static int socket_is_loopback (GNet.McastSocket socket);
		[CCode (cname = "gnet_mcast_socket_join_group")]
		public static int socket_join_group (GNet.McastSocket socket, GNet.InetAddr inetaddr);
		[CCode (cname = "gnet_mcast_socket_leave_group")]
		public static int socket_leave_group (GNet.McastSocket socket, GNet.InetAddr inetaddr);
		[CCode (cname = "gnet_mcast_socket_new")]
		public static weak GNet.McastSocket socket_new ();
		[CCode (cname = "gnet_mcast_socket_new_full")]
		public static weak GNet.McastSocket socket_new_full (GNet.InetAddr iface, int port);
		[CCode (cname = "gnet_mcast_socket_new_with_port")]
		public static weak GNet.McastSocket socket_new_with_port (int port);
		[CCode (cname = "gnet_mcast_socket_receive")]
		public static int socket_receive (GNet.McastSocket socket, string buffer, int length, GNet.InetAddr src);
		[CCode (cname = "gnet_mcast_socket_ref")]
		public static void socket_ref (GNet.McastSocket socket);
		[CCode (cname = "gnet_mcast_socket_send")]
		public static int socket_send (GNet.McastSocket socket, string buffer, int length, GNet.InetAddr dst);
		[CCode (cname = "gnet_mcast_socket_set_loopback")]
		public static int socket_set_loopback (GNet.McastSocket socket, bool enable);
		[CCode (cname = "gnet_mcast_socket_set_ttl")]
		public static int socket_set_ttl (GNet.McastSocket socket, int ttl);
		[CCode (cname = "gnet_mcast_socket_unref")]
		public static void socket_unref (GNet.McastSocket socket);
	}
	[CCode (ref_function = "gnet_server_ref", unref_function = "gnet_server_unref", cheader_filename = "gnet-2.0.h")]
	public class netServer {
		[CCode (cname = "gnet_server_delete")]
		public static void delete (GNet.Server server);
		[CCode (cname = "gnet_server_new")]
		public netServer (GNet.InetAddr iface, int port, GNet.ServerFunc func, pointer user_data);
	}
	[CCode (cheader_filename = "gnet-2.0.h")]
	public class netSha {
		[CCode (cname = "gnet_sha_clone")]
		public static weak GNet.SHA clone (GNet.SHA sha);
		[CCode (cname = "gnet_sha_copy_string")]
		public static void copy_string (GNet.SHA sha, string buffer);
		[CCode (cname = "gnet_sha_delete")]
		public static void delete (GNet.SHA sha);
		[CCode (cname = "gnet_sha_equal")]
		public static bool equal (pointer p1, pointer p2);
		[CCode (cname = "gnet_sha_final")]
		public static void final (GNet.SHA sha);
		[CCode (cname = "gnet_sha_get_digest")]
		public static weak string get_digest (GNet.SHA sha);
		[CCode (cname = "gnet_sha_get_string")]
		public static weak string get_string (GNet.SHA sha);
		[CCode (cname = "gnet_sha_hash")]
		public static uint hash (pointer p);
		[CCode (cname = "gnet_sha_new")]
		public netSha (string buffer, uint length);
		[CCode (cname = "gnet_sha_new_incremental")]
		public netSha.incremental ();
		[CCode (cname = "gnet_sha_new_string")]
		public netSha.string (string str);
		[CCode (cname = "gnet_sha_update")]
		public static void update (GNet.SHA sha, string buffer, uint length);
	}
	[CCode (cheader_filename = "gnet-2.0.h")]
	public class netSocks {
		[CCode (cname = "gnet_socks_get_enabled")]
		public static bool get_enabled ();
		[CCode (cname = "gnet_socks_get_server")]
		public static weak GNet.InetAddr get_server ();
		[CCode (cname = "gnet_socks_get_version")]
		public static int get_version ();
		[CCode (cname = "gnet_socks_set_enabled")]
		public static void set_enabled (bool enabled);
		[CCode (cname = "gnet_socks_set_server")]
		public static void set_server (GNet.InetAddr inetaddr);
		[CCode (cname = "gnet_socks_set_version")]
		public static void set_version (int version);
	}
	[CCode (cheader_filename = "gnet-2.0.h")]
	public class netTcp {
		[CCode (cname = "gnet_tcp_socket_connect")]
		public static weak GNet.TcpSocket socket_connect (string hostname, int port);
		[CCode (cname = "gnet_tcp_socket_connect_async")]
		public static weak GNet.TcpSocketConnectAsyncID socket_connect_async (string hostname, int port, GNet.TcpSocketConnectAsyncFunc func, pointer data);
		[CCode (cname = "gnet_tcp_socket_connect_async_cancel")]
		public static void socket_connect_async_cancel (GNet.TcpSocketConnectAsyncID id);
		[CCode (cname = "gnet_tcp_socket_delete")]
		public static void socket_delete (GNet.TcpSocket socket);
		[CCode (cname = "gnet_tcp_socket_get_io_channel")]
		public static weak GLib.IOChannel socket_get_io_channel (GNet.TcpSocket socket);
		[CCode (cname = "gnet_tcp_socket_get_local_inetaddr")]
		public static weak GNet.InetAddr socket_get_local_inetaddr (GNet.TcpSocket socket);
		[CCode (cname = "gnet_tcp_socket_get_port")]
		public static int socket_get_port (GNet.TcpSocket socket);
		[CCode (cname = "gnet_tcp_socket_get_remote_inetaddr")]
		public static weak GNet.InetAddr socket_get_remote_inetaddr (GNet.TcpSocket socket);
		[CCode (cname = "gnet_tcp_socket_new")]
		public static weak GNet.TcpSocket socket_new (GNet.InetAddr addr);
		[CCode (cname = "gnet_tcp_socket_new_async")]
		public static weak GNet.TcpSocketNewAsyncID socket_new_async (GNet.InetAddr addr, GNet.TcpSocketNewAsyncFunc func, pointer data);
		[CCode (cname = "gnet_tcp_socket_new_async_cancel")]
		public static void socket_new_async_cancel (GNet.TcpSocketNewAsyncID id);
		[CCode (cname = "gnet_tcp_socket_new_async_direct")]
		public static weak GNet.TcpSocketNewAsyncID socket_new_async_direct (GNet.InetAddr addr, GNet.TcpSocketNewAsyncFunc func, pointer data);
		[CCode (cname = "gnet_tcp_socket_new_direct")]
		public static weak GNet.TcpSocket socket_new_direct (GNet.InetAddr addr);
		[CCode (cname = "gnet_tcp_socket_ref")]
		public static void socket_ref (GNet.TcpSocket socket);
		[CCode (cname = "gnet_tcp_socket_server_accept")]
		public static weak GNet.TcpSocket socket_server_accept (GNet.TcpSocket socket);
		[CCode (cname = "gnet_tcp_socket_server_accept_async")]
		public static void socket_server_accept_async (GNet.TcpSocket socket, GNet.TcpSocketAcceptFunc accept_func, pointer user_data);
		[CCode (cname = "gnet_tcp_socket_server_accept_async_cancel")]
		public static void socket_server_accept_async_cancel (GNet.TcpSocket socket);
		[CCode (cname = "gnet_tcp_socket_server_accept_nonblock")]
		public static weak GNet.TcpSocket socket_server_accept_nonblock (GNet.TcpSocket socket);
		[CCode (cname = "gnet_tcp_socket_server_new")]
		public static weak GNet.TcpSocket socket_server_new ();
		[CCode (cname = "gnet_tcp_socket_server_new_full")]
		public static weak GNet.TcpSocket socket_server_new_full (GNet.InetAddr iface, int port);
		[CCode (cname = "gnet_tcp_socket_server_new_with_port")]
		public static weak GNet.TcpSocket socket_server_new_with_port (int port);
		[CCode (cname = "gnet_tcp_socket_set_tos")]
		public static void socket_set_tos (GNet.TcpSocket socket, GNet.NetTOS tos);
		[CCode (cname = "gnet_tcp_socket_unref")]
		public static void socket_unref (GNet.TcpSocket socket);
	}
	[CCode (cheader_filename = "gnet-2.0.h")]
	public class netUdp {
		[CCode (cname = "gnet_udp_socket_delete")]
		public static void socket_delete (GNet.UdpSocket socket);
		[CCode (cname = "gnet_udp_socket_get_io_channel")]
		public static weak GLib.IOChannel socket_get_io_channel (GNet.UdpSocket socket);
		[CCode (cname = "gnet_udp_socket_get_local_inetaddr")]
		public static weak GNet.InetAddr socket_get_local_inetaddr (GNet.UdpSocket socket);
		[CCode (cname = "gnet_udp_socket_get_ttl")]
		public static int socket_get_ttl (GNet.UdpSocket socket);
		[CCode (cname = "gnet_udp_socket_has_packet")]
		public static bool socket_has_packet (GNet.UdpSocket socket);
		[CCode (cname = "gnet_udp_socket_new")]
		public static weak GNet.UdpSocket socket_new ();
		[CCode (cname = "gnet_udp_socket_new_full")]
		public static weak GNet.UdpSocket socket_new_full (GNet.InetAddr iface, int port);
		[CCode (cname = "gnet_udp_socket_new_with_port")]
		public static weak GNet.UdpSocket socket_new_with_port (int port);
		[CCode (cname = "gnet_udp_socket_receive")]
		public static int socket_receive (GNet.UdpSocket socket, string buffer, int length, GNet.InetAddr src);
		[CCode (cname = "gnet_udp_socket_ref")]
		public static void socket_ref (GNet.UdpSocket socket);
		[CCode (cname = "gnet_udp_socket_send")]
		public static int socket_send (GNet.UdpSocket socket, string buffer, int length, GNet.InetAddr dst);
		[CCode (cname = "gnet_udp_socket_set_ttl")]
		public static int socket_set_ttl (GNet.UdpSocket socket, int ttl);
		[CCode (cname = "gnet_udp_socket_unref")]
		public static void socket_unref (GNet.UdpSocket socket);
	}
	[CCode (cheader_filename = "gnet-2.0.h")]
	public class netUnix {
		[CCode (cname = "gnet_unix_socket_delete")]
		public static void socket_delete (GNet.UnixSocket socket);
		[CCode (cname = "gnet_unix_socket_get_io_channel")]
		public static weak GLib.IOChannel socket_get_io_channel (GNet.UnixSocket socket);
		[CCode (cname = "gnet_unix_socket_get_path")]
		public static weak string socket_get_path (GNet.UnixSocket socket);
		[CCode (cname = "gnet_unix_socket_new")]
		public static weak GNet.UnixSocket socket_new (string path);
		[CCode (cname = "gnet_unix_socket_ref")]
		public static void socket_ref (GNet.UnixSocket socket);
		[CCode (cname = "gnet_unix_socket_server_accept")]
		public static weak GNet.UnixSocket socket_server_accept (GNet.UnixSocket socket);
		[CCode (cname = "gnet_unix_socket_server_accept_nonblock")]
		public static weak GNet.UnixSocket socket_server_accept_nonblock (GNet.UnixSocket socket);
		[CCode (cname = "gnet_unix_socket_server_new")]
		public static weak GNet.UnixSocket socket_server_new (string path);
		[CCode (cname = "gnet_unix_socket_unref")]
		public static void socket_unref (GNet.UnixSocket socket);
	}
	[CCode (cheader_filename = "gnet-2.0.h")]
	public class netUri {
		[CCode (cname = "gnet_uri_clone")]
		public static weak GNet.URI clone (GNet.URI uri);
		[CCode (cname = "gnet_uri_delete")]
		public static void delete (GNet.URI uri);
		[CCode (cname = "gnet_uri_equal")]
		public static bool equal (pointer p1, pointer p2);
		[CCode (cname = "gnet_uri_escape")]
		public static void escape (GNet.URI uri);
		[CCode (cname = "gnet_uri_get_string")]
		public static weak string get_string (GNet.URI uri);
		[CCode (cname = "gnet_uri_hash")]
		public static uint hash (pointer p);
		[CCode (cname = "gnet_uri_new")]
		public netUri (string uri);
		[CCode (cname = "gnet_uri_new_fields")]
		public netUri.fields (string scheme, string hostname, int port, string path);
		[CCode (cname = "gnet_uri_new_fields_all")]
		public netUri.fields_all (string scheme, string userinfo, string hostname, int port, string path, string query, string fragment);
		[CCode (cname = "gnet_uri_set_fragment")]
		public static void set_fragment (GNet.URI uri, string fragment);
		[CCode (cname = "gnet_uri_set_hostname")]
		public static void set_hostname (GNet.URI uri, string hostname);
		[CCode (cname = "gnet_uri_set_path")]
		public static void set_path (GNet.URI uri, string path);
		[CCode (cname = "gnet_uri_set_port")]
		public static void set_port (GNet.URI uri, int port);
		[CCode (cname = "gnet_uri_set_query")]
		public static void set_query (GNet.URI uri, string query);
		[CCode (cname = "gnet_uri_set_scheme")]
		public static void set_scheme (GNet.URI uri, string scheme);
		[CCode (cname = "gnet_uri_set_userinfo")]
		public static void set_userinfo (GNet.URI uri, string userinfo);
		[CCode (cname = "gnet_uri_unescape")]
		public static void unescape (GNet.URI uri);
	}
	public static delegate void ConnFunc (GNet.Conn conn, GNet.ConnEvent event, pointer user_data);
	public static delegate void ConnHttpFunc (GNet.ConnHttp conn, GNet.ConnHttpEvent event, pointer user_data);
	public static delegate void InetAddrGetNameAsyncFunc (string hostname, pointer data);
	public static delegate void InetAddrNewAsyncFunc (GNet.InetAddr inetaddr, pointer data);
	public static delegate void InetAddrNewListAsyncFunc (GLib.List list, pointer data);
	public static delegate void ServerFunc (GNet.Server server, GNet.Conn conn, pointer user_data);
	public static delegate void TcpSocketAcceptFunc (GNet.TcpSocket server, GNet.TcpSocket client, pointer data);
	public static delegate void TcpSocketConnectAsyncFunc (GNet.TcpSocket socket, GNet.TcpSocketConnectAsyncStatus status, pointer data);
	public static delegate void TcpSocketNewAsyncFunc (GNet.TcpSocket socket, pointer data);
	public static bool http_get (string url, string buffer, ulong length, uint response);
	public static int pack_strdup (string format, string bufferp);
}
