/* gstreamer-interfaces-0.10.vapi generated by vapigen, do not modify. */

[CCode (cprefix = "Gst", lower_case_cprefix = "gst_")]
namespace Gst {
	[CCode (cheader_filename = "gst/interfaces/colorbalance.h")]
	public class ColorBalanceChannel : GLib.Object {
		public weak string label;
		public int max_value;
		public int min_value;
		public virtual signal void value_changed (int value);
	}
	[CCode (cheader_filename = "gst/interfaces/mixer.h")]
	public class MixerOptions : Gst.MixerTrack {
		public unowned GLib.List<string> get_values ();
	}
	[CCode (cheader_filename = "gst/interfaces/mixer.h")]
	public class MixerTrack : GLib.Object {
		[NoAccessorMethod]
		public uint flags { get; }
		[NoAccessorMethod]
		public string label { owned get; }
		[NoAccessorMethod]
		public int max_volume { get; }
		[NoAccessorMethod]
		public int min_volume { get; }
		[NoAccessorMethod]
		public int num_channels { get; }
		[NoAccessorMethod]
		public string untranslated_label { owned get; construct; }
	}
	[CCode (cheader_filename = "gst/interfaces/tuner.h")]
	public class TunerChannel : GLib.Object {
		public Gst.TunerChannelFlags flags;
		public float freq_multiplicator;
		public weak string label;
		public ulong max_frequency;
		public int max_signal;
		public ulong min_frequency;
		public int min_signal;
		public static void changed (Gst.Tuner tuner, Gst.TunerChannel channel);
		public virtual signal void frequency_changed (ulong frequency);
		public virtual signal void signal_changed (int @signal);
	}
	[CCode (cheader_filename = "gst/interfaces/tuner.h")]
	public class TunerNorm : GLib.Object {
		public Gst.Value framerate;
		public weak string label;
		public static void changed (Gst.Tuner tuner, Gst.TunerNorm norm);
	}
	[CCode (cheader_filename = "gst/interfaces/colorbalance.h")]
	public interface ColorBalance : Gst.ImplementsInterface, Gst.Element {
		public abstract int get_value (Gst.ColorBalanceChannel channel);
		public abstract unowned GLib.List<Gst.ColorBalanceChannel> list_channels ();
		public abstract void set_value (Gst.ColorBalanceChannel channel, int value);
		[HasEmitter]
		public virtual signal void value_changed (Gst.ColorBalanceChannel channel, int value);
	}
	[CCode (cheader_filename = "gst/interfaces/mixer.h")]
	public interface Mixer : Gst.ImplementsInterface, Gst.Element {
		public abstract Gst.MixerFlags get_mixer_flags ();
		public abstract unowned string get_option (Gst.MixerOptions opts);
		public abstract void get_volume (Gst.MixerTrack track, int volumes);
		public abstract unowned GLib.List<Gst.MixerTrack> list_tracks ();
		public static Gst.MixerMessageType message_get_type (Gst.Message message);
		public static void message_parse_mute_toggled (Gst.Message message, out unowned Gst.MixerTrack track, bool mute);
		public static void message_parse_option_changed (Gst.Message message, out unowned Gst.MixerOptions options, string value);
		public static void message_parse_record_toggled (Gst.Message message, out unowned Gst.MixerTrack track, bool record);
		public static void message_parse_volume_changed (Gst.Message message, out unowned Gst.MixerTrack track, int volumes, int num_channels);
		public abstract void set_mute (Gst.MixerTrack track, bool mute);
		public abstract void set_option (Gst.MixerOptions opts, string value);
		public abstract void set_record (Gst.MixerTrack track, bool record);
		public abstract void set_volume (Gst.MixerTrack track, int volumes);
		[HasEmitter]
		public virtual signal void mute_toggled (Gst.MixerTrack channel, bool mute);
		[HasEmitter]
		public virtual signal void option_changed (Gst.MixerOptions opts, string option);
		[HasEmitter]
		public virtual signal void record_toggled (Gst.MixerTrack channel, bool record);
		[HasEmitter]
		public virtual signal void volume_changed (Gst.MixerTrack channel, void* volumes);
	}
	[CCode (cheader_filename = "gst/interfaces/navigation.h")]
	public interface Navigation : Gst.Element {
		public abstract void send_event (Gst.Structure structure);
		public void send_key_event (string event, string key);
		public void send_mouse_event (string event, int button, double x, double y);
	}
	[CCode (cheader_filename = "gst/interfaces/propertyprobe.h")]
	public interface PropertyProbe {
		public abstract unowned GLib.List<string> get_properties ();
		public unowned GLib.ParamSpec get_property (string name);
		public abstract unowned GLib.ValueArray get_values (GLib.ParamSpec pspec);
		public unowned GLib.ValueArray get_values_name (string name);
		public abstract bool needs_probe (GLib.ParamSpec pspec);
		public bool needs_probe_name (string name);
		public unowned GLib.ValueArray probe_and_get_values (GLib.ParamSpec pspec);
		public unowned GLib.ValueArray probe_and_get_values_name (string name);
		public abstract void probe_property (GLib.ParamSpec pspec);
		public void probe_property_name (string name);
		public virtual signal void probe_needed (void* pspec);
	}
	[CCode (cheader_filename = "gst/interfaces/tuner.h")]
	public interface Tuner : Gst.ImplementsInterface, Gst.Element {
		public unowned Gst.TunerChannel find_channel_by_name (string channel);
		public unowned Gst.TunerNorm find_norm_by_name (string norm);
		public abstract unowned Gst.TunerChannel get_channel ();
		public abstract ulong get_frequency (Gst.TunerChannel channel);
		public abstract unowned Gst.TunerNorm get_norm ();
		public abstract unowned GLib.List<Gst.TunerChannel> list_channels ();
		public abstract unowned GLib.List<Gst.TunerNorm> list_norms ();
		public abstract void set_channel (Gst.TunerChannel channel);
		public abstract void set_frequency (Gst.TunerChannel channel, ulong frequency);
		public abstract void set_norm (Gst.TunerNorm norm);
		public abstract int signal_strength (Gst.TunerChannel channel);
		public virtual signal void channel_changed (Gst.TunerChannel channel);
		[HasEmitter]
		public virtual signal void frequency_changed (Gst.TunerChannel channel, ulong frequency);
		public virtual signal void norm_changed (Gst.TunerNorm norm);
		[HasEmitter]
		public virtual signal void signal_changed (Gst.TunerChannel channel, int @signal);
	}
	[CCode (cheader_filename = "gst/interfaces/videoorientation.h")]
	public interface VideoOrientation : Gst.ImplementsInterface, Gst.Element {
		public abstract bool get_hcenter (int center);
		public abstract bool get_hflip (bool flip);
		public abstract bool get_vcenter (int center);
		public abstract bool get_vflip (bool flip);
		public abstract bool set_hcenter (int center);
		public abstract bool set_hflip (bool flip);
		public abstract bool set_vcenter (int center);
		public abstract bool set_vflip (bool flip);
	}
	[CCode (cheader_filename = "gst/interfaces/xoverlay.h", lower_case_csuffix = "x_overlay")]
	public interface XOverlay : Gst.ImplementsInterface, Gst.Element {
		public abstract void expose ();
		public void got_xwindow_id (ulong xwindow_id);
		public abstract void handle_events (bool handle_events);
		public void prepare_xwindow_id ();
		public abstract void set_xwindow_id (ulong xwindow_id);
	}
	[CCode (cprefix = "GST_COLOR_BALANCE_", has_type_id = "0", cheader_filename = "gst/interfaces/colorbalance.h")]
	public enum ColorBalanceType {
		HARDWARE,
		SOFTWARE
	}
	[CCode (cprefix = "GST_MIXER_FLAG_", has_type_id = "0", cheader_filename = "gst/interfaces/mixer.h")]
	[Flags]
	public enum MixerFlags {
		NONE,
		AUTO_NOTIFICATIONS
	}
	[CCode (cprefix = "GST_MIXER_MESSAGE_", has_type_id = "0", cheader_filename = "gst/interfaces/mixer.h")]
	public enum MixerMessageType {
		INVALID,
		MUTE_TOGGLED,
		RECORD_TOGGLED,
		VOLUME_CHANGED,
		OPTION_CHANGED
	}
	[CCode (cprefix = "GST_MIXER_TRACK_", has_type_id = "0", cheader_filename = "gst/interfaces/mixertrack.h")]
	[Flags]
	public enum MixerTrackFlags {
		INPUT,
		OUTPUT,
		MUTE,
		RECORD,
		MASTER,
		SOFTWARE
	}
	[CCode (cprefix = "GST_MIXER_", has_type_id = "0", cheader_filename = "gst/interfaces/mixer.h")]
	public enum MixerType {
		HARDWARE,
		SOFTWARE
	}
	[CCode (cprefix = "GST_TUNER_CHANNEL_", has_type_id = "0", cheader_filename = "gst/interfaces/tuner.h")]
	[Flags]
	public enum TunerChannelFlags {
		INPUT,
		OUTPUT,
		FREQUENCY,
		AUDIO
	}
}
