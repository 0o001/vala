/* gconf-2.0.vala generated by lt-vapigen, do not modify. */

[CCode (cprefix = "GConf", lower_case_cprefix = "gconf_")]
namespace GConf {
	[CCode (cprefix = "GCONF_CLIENT_HANDLE_", cheader_filename = "gconf/gconf.h")]
	public enum ClientErrorHandlingMode {
		NONE,
		UNRETURNED,
		ALL,
	}
	[CCode (cprefix = "GCONF_CLIENT_PRELOAD_", cheader_filename = "gconf/gconf.h")]
	public enum ClientPreloadType {
		NONE,
		ONELEVEL,
		RECURSIVE,
	}
	[CCode (cprefix = "GCONF_ERROR_", cheader_filename = "gconf/gconf.h")]
	public enum Error {
		SUCCESS,
		FAILED,
		NO_SERVER,
		NO_PERMISSION,
		BAD_ADDRESS,
		BAD_KEY,
		PARSE_ERROR,
		CORRUPT,
		TYPE_MISMATCH,
		IS_DIR,
		IS_KEY,
		OVERRIDDEN,
		OAF_ERROR,
		LOCAL_ENGINE,
		LOCK_FAILED,
		NO_WRITABLE_DATABASE,
		IN_SHUTDOWN,
	}
	[CCode (cprefix = "GCONF_SOURCE_", cheader_filename = "gconf/gconf.h")]
	public enum SourceFlags {
		ALL_WRITEABLE,
		ALL_READABLE,
		NEVER_WRITEABLE,
		ALL_FLAGS,
	}
	[CCode (cprefix = "GCONF_UNSET_INCLUDING_SCHEMA_", cheader_filename = "gconf/gconf.h")]
	public enum UnsetFlags {
		NAMES,
	}
	[CCode (cprefix = "GCONF_VALUE_", cheader_filename = "gconf/gconf.h")]
	public enum ValueType {
		INVALID,
		STRING,
		INT,
		FLOAT,
		BOOL,
		SCHEMA,
		LIST,
		PAIR,
	}
	[CCode (cheader_filename = "gconf/gconf.h")]
	public class Client : GLib.Object {
		public void add_dir (string dir, GConf.ClientPreloadType preload) throws GLib.Error;
		public weak GLib.SList all_dirs (string dir) throws GLib.Error;
		public weak GLib.SList all_entries (string dir) throws GLib.Error;
		public weak GConf.ChangeSet change_set_from_current (...) throws GLib.Error;
		public weak GConf.ChangeSet change_set_from_currentv (out string keys) throws GLib.Error;
		public void clear_cache ();
		public bool commit_change_set (GConf.ChangeSet cs, bool remove_committed) throws GLib.Error;
		public bool dir_exists (string dir) throws GLib.Error;
		public weak GConf.Value get (string key) throws GLib.Error;
		public bool get_bool (string key) throws GLib.Error;
		public static weak GConf.Client get_default ();
		public weak GConf.Value get_default_from_schema (string key) throws GLib.Error;
		public weak GConf.Entry get_entry (string key, string locale, bool use_schema_default) throws GLib.Error;
		public double get_float (string key) throws GLib.Error;
		public static weak GConf.Client get_for_engine (GConf.Engine engine);
		public int get_int (string key) throws GLib.Error;
		public weak GLib.SList get_list (string key, GConf.ValueType list_type) throws GLib.Error;
		public bool get_pair (string key, GConf.ValueType car_type, GConf.ValueType cdr_type, pointer car_retloc, pointer cdr_retloc) throws GLib.Error;
		public weak GConf.Schema get_schema (string key) throws GLib.Error;
		public weak string get_string (string key) throws GLib.Error;
		public static GLib.Type get_type ();
		public weak GConf.Value get_without_default (string key) throws GLib.Error;
		public bool key_is_writable (string key) throws GLib.Error;
		public void notify (string key);
		public uint notify_add (string namespace_section, GConf.ClientNotifyFunc func, pointer user_data, GLib.FreeFunc destroy_notify) throws GLib.Error;
		public void notify_remove (uint cnxn);
		public void preload (string dirname, GConf.ClientPreloadType type) throws GLib.Error;
		public bool recursive_unset (string key, GConf.UnsetFlags flags) throws GLib.Error;
		public void remove_dir (string dir) throws GLib.Error;
		public weak GConf.ChangeSet reverse_change_set (GConf.ChangeSet cs) throws GLib.Error;
		public void set (string key, GConf.Value val) throws GLib.Error;
		public bool set_bool (string key, bool val) throws GLib.Error;
		public void set_error_handling (GConf.ClientErrorHandlingMode mode);
		public bool set_float (string key, double val) throws GLib.Error;
		public static void set_global_default_error_handler (GConf.ClientErrorHandlerFunc func);
		public bool set_int (string key, int val) throws GLib.Error;
		public bool set_list (string key, GConf.ValueType list_type, GLib.SList list) throws GLib.Error;
		public bool set_pair (string key, GConf.ValueType car_type, GConf.ValueType cdr_type, pointer address_of_car, pointer address_of_cdr) throws GLib.Error;
		public bool set_schema (string key, GConf.Schema val) throws GLib.Error;
		public bool set_string (string key, string val) throws GLib.Error;
		public void suggest_sync () throws GLib.Error;
		public bool unset (string key) throws GLib.Error;
		[HasEmitter]
		public signal void value_changed (string key, GConf.Value value);
		[HasEmitter]
		public signal void unreturned_error (GLib.Error error);
		[HasEmitter]
		public signal void error (GLib.Error error);
	}
	[CCode (ref_function = "gconf_backend_ref", unref_function = "gconf_backend_unref", cheader_filename = "gconf/gconf.h")]
	public class Backend {
		public weak string name;
		public uint refcount;
		public weak GConf.BackendVTable vtable;
		public weak GLib.Module module;
		public static weak string file (string address);
		public weak GConf.Source resolve_address (string address) throws GLib.Error;
	}
	[CCode (cheader_filename = "gconf/gconf.h")]
	public class BackendVTable {
		public ulong vtable_size;
	}
	[CCode (ref_function = "gconf_change_set_ref", unref_function = "gconf_change_set_unref", cheader_filename = "gconf/gconf.h")]
	public class ChangeSet {
		public bool check_value (string key, GConf.Value value_retloc);
		public void clear ();
		public void @foreach (GConf.ChangeSetForeachFunc func, pointer user_data);
		public static GLib.Type get_type ();
		public pointer get_user_data ();
		public ChangeSet ();
		public void remove (string key);
		public void set (string key, GConf.Value value);
		public void set_bool (string key, bool val);
		public void set_float (string key, double val);
		public void set_int (string key, int val);
		public void set_list (string key, GConf.ValueType list_type, GLib.SList list);
		public void set_nocopy (string key, GConf.Value value);
		public void set_pair (string key, GConf.ValueType car_type, GConf.ValueType cdr_type, pointer address_of_car, pointer address_of_cdr);
		public void set_schema (string key, GConf.Schema val);
		public void set_string (string key, string val);
		public void set_user_data (pointer data, GLib.DestroyNotify dnotify);
		public uint size ();
		public void unset (string key);
	}
	[CCode (ref_function = "gconf_engine_ref", unref_function = "gconf_engine_unref", cheader_filename = "gconf/gconf.h")]
	public class Engine {
		public weak GLib.SList all_dirs (string dir) throws GLib.Error;
		public weak GLib.SList all_entries (string dir) throws GLib.Error;
		public bool associate_schema (string key, string schema_key) throws GLib.Error;
		public weak GConf.ChangeSet change_set_from_current (...) throws GLib.Error;
		public weak GConf.ChangeSet change_set_from_currentv (out string keys) throws GLib.Error;
		public bool commit_change_set (GConf.ChangeSet cs, bool remove_committed) throws GLib.Error;
		public bool dir_exists (string dir) throws GLib.Error;
		public weak GConf.Value get (string key) throws GLib.Error;
		public bool get_bool (string key) throws GLib.Error;
		public static weak GConf.Engine get_default ();
		public weak GConf.Value get_default_from_schema (string key) throws GLib.Error;
		public weak GConf.Entry get_entry (string key, string locale, bool use_schema_default) throws GLib.Error;
		public double get_float (string key) throws GLib.Error;
		public static weak GConf.Engine get_for_address (string address) throws GLib.Error;
		public static weak GConf.Engine get_for_addresses (GLib.SList addresses) throws GLib.Error;
		public weak GConf.Value get_full (string key, string locale, bool use_schema_default, bool is_default_p, bool is_writable_p) throws GLib.Error;
		public int get_int (string key) throws GLib.Error;
		public weak GLib.SList get_list (string key, GConf.ValueType list_type) throws GLib.Error;
		public static weak GConf.Engine get_local (string address) throws GLib.Error;
		public static weak GConf.Engine get_local_for_addresses (GLib.SList addresses) throws GLib.Error;
		public bool get_pair (string key, GConf.ValueType car_type, GConf.ValueType cdr_type, pointer car_retloc, pointer cdr_retloc) throws GLib.Error;
		public weak GConf.Schema get_schema (string key) throws GLib.Error;
		public weak string get_string (string key) throws GLib.Error;
		public pointer get_user_data ();
		public weak GConf.Value get_with_locale (string key, string locale) throws GLib.Error;
		public weak GConf.Value get_without_default (string key) throws GLib.Error;
		public bool key_is_writable (string key) throws GLib.Error;
		public uint notify_add (string namespace_section, GConf.NotifyFunc func, pointer user_data) throws GLib.Error;
		public void notify_remove (uint cnxn);
		public void remove_dir (string dir) throws GLib.Error;
		public weak GConf.ChangeSet reverse_change_set (GConf.ChangeSet cs) throws GLib.Error;
		public bool set (string key, GConf.Value value) throws GLib.Error;
		public bool set_bool (string key, bool val) throws GLib.Error;
		public bool set_float (string key, double val) throws GLib.Error;
		public bool set_int (string key, int val) throws GLib.Error;
		public bool set_list (string key, GConf.ValueType list_type, GLib.SList list) throws GLib.Error;
		public bool set_pair (string key, GConf.ValueType car_type, GConf.ValueType cdr_type, pointer address_of_car, pointer address_of_cdr) throws GLib.Error;
		public bool set_schema (string key, GConf.Schema val) throws GLib.Error;
		public bool set_string (string key, string val) throws GLib.Error;
		public void set_user_data (pointer data, GLib.DestroyNotify dnotify);
		public void suggest_sync () throws GLib.Error;
		public bool unset (string key) throws GLib.Error;
	}
	[CCode (ref_function = "gconf_entry_ref", unref_function = "gconf_entry_unref", cheader_filename = "gconf/gconf.h")]
	public class Entry {
		public weak string key;
		public weak GConf.Value value;
		public weak GConf.Entry copy ();
		public bool equal (GConf.Entry b);
		public bool get_is_default ();
		public bool get_is_writable ();
		public weak string get_key ();
		public weak string get_schema_name ();
		public weak GConf.Value get_value ();
		public Entry (string key, GConf.Value val);
		public Entry.nocopy (string key, GConf.Value val);
		public void set_is_default (bool is_default);
		public void set_is_writable (bool is_writable);
		public void set_schema_name (string name);
		public void set_value (GConf.Value val);
		public void set_value_nocopy (GConf.Value val);
		public weak GConf.Value steal_value ();
	}
	[CCode (cheader_filename = "gconf/gconf.h")]
	public class EnumStringPair {
		public int enum_value;
		public weak string str;
	}
	[CCode (cheader_filename = "gconf/gconf.h")]
	public class Listeners {
		public uint add (string listen_point, pointer listener_data, GLib.FreeFunc destroy_notify);
		public uint count ();
		public void @foreach (GConf.ListenersForeach callback, pointer user_data);
		public bool get_data (uint cnxn_id, pointer listener_data_p, out string location_p);
		public Listeners ();
		public void notify (string all_above, GConf.ListenersCallback callback, pointer user_data);
		public void remove (uint cnxn_id);
		public void remove_if (GConf.ListenersPredicate predicate, pointer user_data);
	}
	[CCode (cheader_filename = "gconf/gconf.h")]
	public class LocaleCache {
		public void expire (uint max_age_exclusive_in_seconds);
		public weak GConf.LocaleList get_list (string locale);
		public LocaleCache ();
	}
	[CCode (ref_function = "gconf_locale_list_ref", unref_function = "gconf_locale_list_unref", cheader_filename = "gconf/gconf.h")]
	public class LocaleList {
		public weak string list;
	}
	[CCode (cheader_filename = "gconf/gconf.h")]
	public class MetaInfo {
		public weak string schema;
		public weak string mod_user;
		public GLib.Time mod_time;
		public weak string get_mod_user ();
		public weak string get_schema ();
		[CCode (cname = "gconf_meta_info_mod_time")]
		public GLib.Time get_mod_time ();
		public MetaInfo ();
		public void set_mod_time (GLib.Time mod_time);
		public void set_mod_user (string mod_user);
		public void set_schema (string schema_name);
	}
	[CCode (cheader_filename = "gconf/gconf.h")]
	public class Schema {
		public weak GConf.Schema copy ();
		public GConf.ValueType get_car_type ();
		public GConf.ValueType get_cdr_type ();
		public weak GConf.Value get_default_value ();
		public GConf.ValueType get_list_type ();
		public weak string get_locale ();
		public weak string get_long_desc ();
		public weak string get_owner ();
		public weak string get_short_desc ();
		public GConf.ValueType get_type ();
		public Schema ();
		public void set_car_type (GConf.ValueType type);
		public void set_cdr_type (GConf.ValueType type);
		public void set_default_value (GConf.Value val);
		public void set_default_value_nocopy (GConf.Value val);
		public void set_list_type (GConf.ValueType type);
		public void set_locale (string locale);
		public void set_long_desc (string desc);
		public void set_owner (string owner);
		public void set_short_desc (string desc);
		public void set_type (GConf.ValueType type);
	}
	[CCode (cheader_filename = "gconf/gconf.h")]
	public class Source {
		public uint flags;
		public weak string address;
		public weak GConf.Backend backend;
	}
	[CCode (cheader_filename = "gconf/gconf.h")]
	public class Sources {
		public weak GLib.List sources;
		public void add_listener (uint id, string location);
		public weak GLib.SList all_dirs (string dir) throws GLib.Error;
		public weak GLib.SList all_entries (string dir, out string locales) throws GLib.Error;
		public void clear_cache ();
		public bool dir_exists (string dir) throws GLib.Error;
		public bool is_affected (GConf.Source modified_src, string key);
		public Sources.from_addresses (GLib.SList addresses) throws GLib.Error;
		public Sources.from_source (GConf.Source source);
		public weak GConf.Value query_default_value (string key, out string locales, bool is_writable) throws GLib.Error;
		public weak GConf.MetaInfo query_metainfo (string key) throws GLib.Error;
		public weak GConf.Value query_value (string key, out string locales, bool use_schema_default, bool value_is_default, bool value_is_writable, string schema_name) throws GLib.Error;
		public void recursive_unset (string key, string locale, GConf.UnsetFlags flags, GLib.SList notifies) throws GLib.Error;
		public void remove_dir (string dir) throws GLib.Error;
		public void remove_listener (uint id);
		public void set_notify_func (GConf.SourceNotifyFunc notify_func, pointer user_data);
		public void set_schema (string key, string schema_key) throws GLib.Error;
		public void set_value (string key, GConf.Value value, GConf.Sources modified_sources) throws GLib.Error;
		public bool sync_all () throws GLib.Error;
		public void unset_value (string key, string locale, GConf.Sources modified_sources) throws GLib.Error;
	}
	[CCode (cheader_filename = "gconf/gconf.h")]
	public class UnsetNotify {
		public weak GConf.Sources modified_sources;
		public weak string key;
	}
	[CCode (cheader_filename = "gconf/gconf.h")]
	public class Value {
		public GConf.ValueType type;
		public int compare (GConf.Value value_b);
		public weak GConf.Value copy ();
		public bool get_bool ();
		public weak GConf.Value get_car ();
		public weak GConf.Value get_cdr ();
		public double get_float ();
		public int get_int ();
		public weak GLib.SList get_list ();
		public GConf.ValueType get_list_type ();
		public weak GConf.Schema get_schema ();
		public weak string get_string ();
		public Value (GConf.ValueType type);
		public Value.from_string (GConf.ValueType type, string str) throws GLib.Error;
		public void set_bool (bool the_bool);
		public void set_car (GConf.Value car);
		public void set_car_nocopy (GConf.Value car);
		public void set_cdr (GConf.Value cdr);
		public void set_cdr_nocopy (GConf.Value cdr);
		public void set_float (double the_float);
		public void set_int (int the_int);
		public void set_list (GLib.SList list);
		public void set_list_nocopy (GLib.SList list);
		public void set_list_type (GConf.ValueType type);
		public void set_schema (GConf.Schema sc);
		public void set_schema_nocopy (GConf.Schema sc);
		public void set_string (string the_str);
		public weak string to_string ();
	}
	[CCode (cheader_filename = "gconf/gconf.h")]
	public class GconfAddress {
		[CCode (cname = "gconf_address_backend")]
		public static weak string backend (string address);
		[CCode (cname = "gconf_address_flags")]
		public static weak string flags (string address);
		[CCode (cname = "gconf_address_resource")]
		public static weak string resource (string address);
	}
	public static delegate void ChangeSetForeachFunc (GConf.ChangeSet cs, string key, GConf.Value value, pointer user_data);
	public static delegate void ClientErrorHandlerFunc (GConf.Client client, GLib.Error error);
	public static delegate void ClientNotifyFunc (GConf.Client client, uint cnxn_id, GConf.Entry entry, pointer user_data);
	public static delegate void ListenersCallback (GConf.Listeners listeners, string all_above_key, uint cnxn_id, pointer listener_data, pointer user_data);
	public static delegate void ListenersForeach (string location, uint cnxn_id, pointer listener_data, pointer user_data);
	public static delegate bool ListenersPredicate (string location, uint cnxn_id, pointer listener_data, pointer user_data);
	public static delegate void NotifyFunc (GConf.Engine conf, uint cnxn_id, GConf.Entry entry, pointer user_data);
	public static delegate void SourceNotifyFunc (GConf.Source source, string location, pointer user_data);
	public static void blow_away_locks (string address);
	public static void clear_cache (GConf.Engine conf) throws GLib.Error;
	public static weak string concat_dir_and_key (string dir, string key);
	public static int debug_shutdown ();
	[NoArrayLength]
	public static weak string enum_to_string (GConf.EnumStringPair[] lookup_table, int enum_value);
	public static GLib.Quark error_quark ();
	public static weak string escape_key (string arbitrary_text, int len);
	public static weak GConf.Backend get_backend (string address) throws GLib.Error;
	public static bool key_is_below (string above, string below);
	public static weak GConf.Source resolve_address (string address) throws GLib.Error;
	public static weak string split_locale (string locale);
	[NoArrayLength]
	public static bool string_to_enum (GConf.EnumStringPair[] lookup_table, string str, int enum_value_retloc);
	public static void synchronous_sync (GConf.Engine conf) throws GLib.Error;
	public static weak string unescape_key (string escaped_key, int len);
	public static weak string unique_key ();
	public static bool valid_key (string key, string why_invalid);
}
